name: growerp
repository: https://github.com/growerp/growerp

# packages also determine the order of test
packages:
  - packages/growerp_models
  - packages/growerp_core
  - packages/growerp_core/example
  - packages/growerp_chat
  - packages/growerp_chat/example
  - packages/growerp_user_company
  - packages/growerp_user_company/example
  - packages/growerp_catalog
  - packages/growerp_catalog/example
  - packages/growerp_inventory
  - packages/growerp_inventory/example
  - packages/growerp_marketing
  - packages/growerp_marketing/example
  - packages/growerp_order_accounting
  - packages/growerp_order_accounting/example
  - packages/growerp_website
  - packages/growerp_website/example
  - packages/growerp_task
  - packages/growerp_task/example
  - packages/growerp
  - packages/admin
  - packages/website
  - packages/hotel
  - packages/freelance
  - packages/health

command:
  bootstrap:
    runPubGetInParallel: false

scripts:
  analyze:
    exec: dart analyze .
    description: Analyse all packages for possible problems.
  build:
    description: build_runner build all modules.
    run: "dart run build_runner build --delete-conflicting-outputs"
    exec:
      concurrency: 1
      orderDependents: true
    packageFilters:
      dependsOn: build_runner
  buildclean:
    description: build_runner clean.
    run: "flutter clean && dart run build_runner clean"
    exec:
      concurrency: 1
      orderDependents: true
    packageFilters:
      dependsOn: build_runner
  watch:
    description: watch package.
    run: "dart run build_runner watch"
    exec:
      concurrency: 1
      orderDependents: true
    packageFilters:
      dependsOn: build_runner
  l10n:
    description: Generates l10n for all app packages.
    run: "flutter gen-l10n"
    exec:
      concurrency: 1
      failFast: true
    packageFilters:
      fileExists: "l10n.yaml"

  test_package:
    description: run all integration tests.
    run: "flutter test integration_test"
    exec:
      orderDependents: true
      concurrency: 1
    packageFilters:
      dirExists: "integration_test"
      scope: "*_example"
  test:
    description: run all app and package tests.
    run: "flutter test integration_test"
    exec:
      orderDependents: true
      concurrency: 1
    packageFilters:
      dirExists: "integration_test"
  test-headless:
    description: run all app and package tests in headless mode using flutter/docker-compose-test.yml.
    run: $MELOS_ROOT_PATH/test/set_app_settings.sh && flutter test integration_test
    exec:
      orderDependents: true
      concurrency: 1
    packageFilters:
      dirExists: "integration_test"
