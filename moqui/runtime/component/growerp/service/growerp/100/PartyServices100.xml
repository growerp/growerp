<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="CompanyFromHost" authenticate="anonymous-all">
        <description>Get the main company from the hostname</description>
        <in-parameters>
            <parameter name="hostName" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" />
                <parameter name="email" />
                <parameter name="role" />
                <parameter name="email" />
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="hostNames">
                <econdition field-name="settingTypeEnumId" value="PsstHostname" />
                <econdition field-name="settingValue" from="hostName" />
                <date-filter />
            </entity-find>
            <if condition="!hostNames">
                <return />
            </if>
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="productStoreId" from="hostNames[0].productStoreId" />
            </entity-find>
            <if condition="stores">
                <service-call name="growerp.100.PartyServices100.get#Company"
                    in-map="[companyPartyId: stores[0].organizationPartyId]"
                    out-map="context" />
                <set field="company" from="companies[0]" />
            </if>
        </actions>
    </service>

    <service verb="check" noun="Email">
        <description>Check if a particular email address exists of a party</description>
        <in-parameters>
            <parameter name="email" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ok" type="Boolean" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo"
                list="partyInfoList" distinct="true">
                <econdition field-name="infoString" from="email" ignore-case="true" />
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress" />
                <date-filter />
                <select-field field-name="partyId" />
                <select-field field-name="infoString" />
                <order-by field-name="fromDate DESC" />
            </entity-find>
            <set field="partyIds" from="[] as Set" />
            <!-- check if active -->
            <iterate list="partyInfoList" entry="partyInfo">
                <entity-find-count entity-name="mantle.party.Party" count-field="isDisabled">
                    <econdition field-name="partyId" from="partyInfo.partyId" />
                    <econdition field-name="disabled" value="Y" ignore-case="true" />
                </entity-find-count>
                <if condition="isDisabled==0">
                    <set field="partyIds" from="partyIds + [partyInfo.partyId]" />
                </if>
            </iterate>
            <if condition="!partyIds.isEmpty()">
                <set field="ok" value="true" type="Boolean" />
                <else>
                    <set field="ok" value="false" type="Boolean" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="check" noun="Company">
        <description>Check if a particular company (irrespective of owner) exists</description>
        <in-parameters>
            <parameter name="partyId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ok" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                <econdition field-name="partyId" from="partyId" />
            </entity-find>
            <if condition="parties">
                <set field="ok" value="ok" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="Companies">
        <description>Get a list of main/initial companies registered in the system</description>
        <in-parameters>
            <parameter name="mainCompanies" type="Boolean" default="true" />
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="searchString" default="null" />
        </in-parameters>
        <out-parameters>
            <parameter name="companies" type="List">
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="mainCompanies">
                <set field="roleTypeId" value="OrgInternal" />
                <else>
                    <set field="notRoleTypeId" value="OrgInternal" />
                </else>
            </if>
            <if condition="searchString">
                <set field="searchString" value="%$searchString%" />
            </if>
            <entity-find list="parties" offset="start" limit="limit"
                entity-name="growerp.party.CompanyPreferenceAndRole">
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="roleTypeId" from="roleTypeId"
                    ignore-if-empty="true" />
                <econdition field-name="roleTypeId" from="notRoleTypeId"
                    operator="not-equals" ignore-if-empty="true" />
                <econdition field-name="disabled" operator="not-equals" value="Y"
                    or-null="true" />
                <econditions combine="or">
                    <econdition field-name="organizationName" from="searchString"
                        operator="like" ignore-if-empty="true" ignore-case="true" />
                    <econdition field-name="partyId" from="searchString"
                        operator="like" ignore-if-empty="true" ignore-case="true" />
                </econditions>
                <order-by field-name="organizationName" />
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <set field="currency"
                    from="[
                    currencyId: party.baseCurrencyUomId,
                    description: party.uomDescription]" />
                <set field="company"
                    from="[partyId: party.partyId,
                                pseudoId: party.pseudoId ?:'',
                                name: party.organizationName,
                                role: party.roleTypeId,
                                currency: party.baseCurrencyUomId == null ? null : currency,
                                vatPerc: party.vatPerc ? party.vatPerc.toString() : null,
                                salesPerc: party.salesPerc ? party.salesPerc.toString() : null]" />
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId" />
            <parameter name="companyPseudoId" />
            <parameter name="firstName" />
            <parameter name="lastName" />
            <parameter name="companyName" />
            <parameter name="userPartyId" />
            <parameter name="role" />
            <parameter name="ownerPartyId" /><!-- required when registering company customers-->
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="searchString" default="null" />
            <parameter name="isForDropDown" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="companies" type="List">
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="url" />
                    <parameter name="role" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="currencyName" />
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="email" />
                    <parameter name="url" />
                    <parameter name="employees" type="List">
                        <parameter name="employee" type="Map">
                            <parameter name="partyId" />
                            <parameter name="email" />
                            <parameter name="firstName" />
                            <parameter name="lastName" />
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
            <parameter name="telephoneNr" />
            <parameter name="hostName" />
            <parameter name="secondaryBackend" />
            <parameter name="companyTelContactMechId" />
            <parameter name="companyEmailContactMechId" />
        </out-parameters>
        <actions>
            <set field="role" from="role?.capitalize()" />
            <if condition="searchString != null">
                <set field="search" value="%${searchString}%" />
            </if>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="!companyPartyId &amp;&amp; !searchString">
                <set field="disabled" value="N" />
            </if>
            <!-- adjust role -->
            <if condition="role">
                <if condition="role == 'Lead'">
                    <then>
                        <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                        <set field="companyRole" value="Customer" />
                    </then>
                    <else-if condition="role == 'Customer'">
                        <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
                        <set field="companyRole" from="role" />
                    </else-if>
                    <else-if condition="role != 'Company' &amp;&amp; role != 'Unknown'">
                        <set field="companyRole" from="role" />
                    </else-if>
                </if>
            </if>
            <!-- get records -->
            <entity-find offset="start" limit="limit" list="items"
                entity-name="growerp.party.OwnerCompanyDetailAndEmployee">
                <econdition field-name="ownerPartyId" />
                <econdition field-name="companyPartyId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="companyPseudoId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyEmail" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="personEmail" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <econdition field-name="companyRole" ignore-if-empty="true" />
                <econdition field-name="customerStatusId" ignore-if-empty="true" or-null="true" />
                <econditions combine="or">
                    <econdition field-name="ownerDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                    <econdition field-name="personDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                </econditions>
                <order-by field-name="companyName^,lastName^,firstName^" />
            </entity-find>
            <set field="companies" from="[]" />
            <set field="lastItem" from="null" />
            <set field="employees" from="[]" />
            <iterate list="items" entry="item">
                <!-- new item, so add last item to the list-->
                <if condition="lastItem &amp;&amp; lastItem.companyPartyId != item.companyPartyId">
                    <set field="company.employees" from="employees" />
                    <script>companies.add(company)</script>
                    <set field="employees" from="[]" />
                </if>
                <!-- first item -->
                <if condition="!lastItem || lastItem.companyPartyId != item.companyPartyId">
                    <!-- postal address -->
                    <set field="address" from="null" />
                    <if condition="item.postalContactMechId">
                        <set field="address"
                            from="[
                        addressId: item.postalContactMechId,
                        address1: item.address1,
                        address2: item.address2,
                        city: item.city,
                        postalCode: item.postalCode,
                        province: item.stateProvince,
                        provinceId: item.stateProvinceGeoId,
                        country: item.countryName,
                        countryId: item.countryId,
                        ]" />
                    </if>
                    <!-- payment method -->
                    <set field="paymentMethod" from="null" />
                    <if condition="item.paymentMethodId">
                        <set field="nrLength" from="item.cardNumber.length()" />
                        <set field="ccDescription"
                            value="${item.cardType}**********${item.cardNumber.substring(nrLength-4,nrLength)} ${item.expireDate}" />
                        <set field="paymentMethod"
                            from="[ ccPaymentMethodId: item.paymentMethodId,
                                    ccDescription: ccDescription]" />
                    </if>
                    <!-- telephone -->
                    <set field="telephoneNr" from="null" />
                    <if condition="item.telContactNumber">
                        <set field="telephoneNr"
                            value="${item.telCountryCode?:''}${item.telAreaCode?:''}${item.telContactNumber?:''}" />
                    </if>
                    <!-- currency -->
                    <set field="currency" from="null" />
                    <if condition="item.baseCurrencyUomId">
                        <set field="currency"
                            from="[
                                currencyId: item.baseCurrencyUomId,
                                description: item.curDescription]" />
                    </if>
                    <!-- image -->
                    <entity-find entity-name="mantle.party.PartyContent" list="contents">
                        <econdition field-name="partyId" from="item.companyPartyId" />
                        <econdition field-name="partyContentTypeEnumId"
                            from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                    </entity-find>
                    <if condition="contents">
                        <service-call name="growerp.100.ImageServices100.download#Image"
                            in-map="[contentLocation: contents[0].contentLocation]"
                            out-map="context" />
                        <else>
                            <set field="imageFile" from="null" />
                        </else>
                    </if>
                    <!-- hostnames -->
                    <entity-find-one entity-name="mantle.product.store.ProductStore"
                        value-field="productStore">
                        <field-map field-name="organizationPartyId" from="companyPartyId" />
                    </entity-find-one>
                    <if condition="productStore">
                        <entity-find entity-name="mantle.product.store.ProductStoreSetting"
                            list="hosts">
                            <econdition field-name="productStoreId"
                                from="productStore.productStoreId" />
                            <econdition field-name="settingTypeEnumId" value="PsstHostname" />
                            <date-filter />
                        </entity-find>
                        <if condition="hosts">
                            <set field="hostName" from="hosts[0].settingValue" />
                        </if>
                        <entity-find entity-name="mantle.product.store.ProductStoreSetting"
                            list="backends">
                            <econdition field-name="productStoreId"
                                from="productStore.productStoreId" />
                            <econdition field-name="settingTypeEnumId" value="PsstSecBackend" />
                            <date-filter />
                        </entity-find>
                        <if condition="backends">
                            <set field="backendName" from="backends[0].settingValue" />
                        </if>
                    </if>
                    <if condition="items?.size() > 0">
                        <set field="companyEmailContactMechId"
                            from="items[0].companyEmailContactMechId" />
                        <set field="companyTelContactMechId" from="items[0].companyTelContactMechId" />
                    </if>
                    <if condition="isForDropDown">
                        <set field="company"
                            from="[
                                partyId: item.companyPartyId,
                                pseudoId: item.companyPseudoId,
                                name: item.companyName,
                                paymentMethod: paymentMethod,
                                ]" />
                        <else>
                            <set field="company"
                                from="[
                                    partyId: item.companyPartyId,
                                    pseudoId: item.companyPseudoId ?:'',
                                    name: item.companyName,
                                    role: item.companyRole == 'Customer'
                                            &amp;&amp; item.customerStatusId == 'CUSTOMER_ASSIGNED'
                                            ? 'Lead': item.companyRole,
                                    email: item.companyEmail ?:'',
                                    url: item.webAddress,
                                    currency: currency,
                                    image: imageFile,
                                    address: address,
                                    vatPerc: item.vatPerc?item.vatPerc.toString():'0',
                                    salesPerc: item.salesPerc?item.salesPerc.toString():'0',
                                    paymentMethod: paymentMethod,
                                    telephoneNr: telephoneNr ?: '',
                                    hostName: hostName,
                                    secondaryBackend: backendName,
                                    ]" />
                        </else>
                    </if>
                </if>
                <if condition="item.personPartyId">
                    <set field="person"
                        from="[
                        partyId: item.personPartyId,
                        pseudoId: item.personPseudoId,
                        firstName: item.firstName,
                        lastName: item.lastName,
                        email: item.personEmail
                        ]" />
                    <script>employees.add(person)</script>
                </if>
                <set field="lastItem" from="item" />
            </iterate>
            <if condition="lastItem">
                <if condition="!isForDropDown">
                    <set field="company.employees" from="employees" />
                </if>
                <script>companies.add(company)</script>
            </if>
            <if condition="items?.size() > 0">
                <set field="companyEmailContactMechId" from="items[0].companyEmailContactMechId" />
                <set field="companyTelContactMechId" from="items[0].companyTelContactMechId" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="Company">
        <description>
            create company information
        </description>
        <in-parameters>
            <parameter name="company" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" required="true" />
                <parameter name="role" required="true" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="creditCardType" />
                    <parameter name="creditCardNumber" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="hostName" />
                <parameter name="secondaryBackend" />
            </parameter>
            <parameter name="ownerPartyId" /><!-- needed in initial registration -->
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="role" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="employees" type="List">
                    <parameter name="employee" type="Map">
                        <parameter name="partyId" />
                        <parameter name="pseudoId" />
                        <parameter name="email" />
                        <parameter name="firstName" />
                        <parameter name="lastName" />
                    </parameter>
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="hostName" />
                <parameter name="secondaryBackend" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="relComp"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="!ownerPartyId">
                <return error="true" message="Creating a company needs an ownerPartyId" />
            </if>
            <if condition="company.role == 'Lead'">
                <set field="company.role" value="Customer" />
                <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                <else-if condition="company.role == 'Customer'">
                    <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
                </else-if>
            </if>
            <if condition="!company.pseudoId || company.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'party']"
                    out-map="context" />
                <set field="company.pseudoId" from="seqNum" />
            </if>
            <service-call
                name="mantle.party.PartyServices.create#Organization"
                out-map="context"
                in-map="[organizationName: company.name,
                        pseudoId: company.pseudoId,
                        ownerPartyId: ownerPartyId,
                        roleTypeId: company.role,
                        customerStatusId: customerStatusId,
                        disabled: 'N']" />
            <!-- currency -->
            <if condition="company.currency">
                <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                    in-map="[organizationPartyId: partyId,
                                    baseCurrencyUomId: company.currency?.currencyId]" />
            </if>

            <!-- company email -->
            <if condition="company.email">
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[emailAddress: company.email,
                            partyId: partyId,
                            contactMechPurposeId:'EmailPrimary']" />
            </if>

            <!-- company webAddress -->
            <if condition="company.url">
                <service-call name="mantle.party.ContactServices.create#WebAddress"
                    in-map="[webAddress: company.url,
                            partyId: partyId,
                            contactMechPurposeId:'WebUrlPrimary']" />
            </if>

            <!-- address -->
            <if condition="company.address">
                <if condition="company.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="company.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="company.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="company.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <service-call name="mantle.party.ContactServices.create#PostalAddress"
                    in-map="[partyId: partyId, contactMechPurposeId: 'PostalPrimary', 
                            address1: company.address.address1,
                            address2: company.address.address2,
                            city: company.address.city,
                            postalCode: company.address.postalCode,
                            stateProvince: company.address.province,
                            stateProvinceGeoId: stateProvinceGeoId, 
                            countryGeoId: countryGeoId]"
                    out-map="resultAddress" />

                <!-- payment only possible if address provided -->
                <if condition="company.paymentMethod?.creditCardNumber">
                    <set field="expireDate"
                        value="${company.paymentMethod.expireMonth}/${company.paymentMethod.expireYear}" />
                    <set field="inMap"
                        from="[
                        ownerPartyId: partyId,
                        cardNumber: company.paymentMethod.creditCardNumber,
                        creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                            .condition('description', company.paymentMethod.creditCardType).one().enumId,
                        expireDate: expireDate,
                        postalContactMechId: resultAddress.contactMechId,
                        firstNameOnAccount: 'company',
                        lastNameOnAccount: company.name,
                        paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                    ]" />
                    <service-call
                        name="mantle.account.PaymentMethodServices.create#CreditCard"
                        in-map="inMap" />
                </if>
            </if>
            <!-- telephone -->
            <if condition="company.telephoneNr">
                <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                    in-map="[
                        contactMechPurposeId: 'PhonePrimary',
                        contactNumber: company.telephoneNr,
                        partyId: partyId]" />
            </if>
            <!-- hostnames -->
            <entity-find-one entity-name="mantle.product.store.ProductStore"
                value-field="productStore">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <if condition="company.hostName">
                <service-call name="create#mantle.product.store.ProductStoreSetting"
                    in-map="[productStoreId: productStore.productStoreId,
                            settingTypeEnumId: PsstHostname,
                            settingValue: company.hostName]" />
            </if>
            <if condition="company.secondaryBackend">
                <service-call name="create#mantle.product.store.ProductStoreSetting"
                    in-map="[productStoreId: productStore.productStoreId,
                            settingTypeEnumId: PsstSecBackend,
                            settingValue: company.secondaryBackend]" />
            </if>
            <!-- return created company -->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[ownerPartyId: ownerPartyId, companyPartyId: partyId]"
                out-map="context" />
            <if condition="companies">
                <set field="company" from="companies[0]" />
            </if>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="company" type="Map" required="true">
                <parameter name="partyId" required="true" />
                <parameter name="pseudoId" />
                <parameter name="name" />
                <parameter name="role" required="true" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                </parameter>
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                    <parameter name="creditCardNumber" />
                    <parameter name="creditCardType" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="hostName" />
                <parameter name="secondaryBackend" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="role" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="employees" type="List">
                    <parameter name="employee" type="Map">
                        <parameter name="partyId" />
                        <parameter name="pseudoId" />
                        <parameter name="email" />
                        <parameter name="firstName" />
                        <parameter name="lastName" />
                    </parameter>
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="hostName" />
                <parameter name="secondaryBackend" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: company.partyId]" out-map="oldValue" />
            <if condition="oldValue.companies.isEmpty()">
                <return error="true"
                    message="Company ${company.partyId} not found" />
            </if>
            <!-- update pseudoId-->
            <if condition="!company.pseudoId || company.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'party']"
                    out-map="context" />
                <set field="company.pseudoId" from="seqNum" />
            </if>
            <if condition="company.pseudoId != oldValue.companies[0]?.pseudoId">
                <service-call name="update#mantle.party.Party"
                    in-map="[partyId: company.partyId, pseudoId: company.pseudoId]" />
            </if>
            <!-- update name -->
            <if condition="company.name &amp;&amp; oldValue.companies[0]?.name !=  company.name">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.companies[0].partyId, organizationName: company.name]" />
            </if>
            <!-- update role , orgInternal cannot change-->
            <if
                condition="oldValue.companies[0].role != 'OrgInternal' &amp;&amp; company.role != oldValue.companies[0].role">
                <set field="newRole" from="company.role" />
                <if condition="company.role == 'Lead'">
                    <set field="newRole" value="Customer" />
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: company.partyId, customerStatusId: 'CUSTOMER_ASSIGNED']" />
                </if>
                <if condition="company.role == 'Customer'">
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: company.partyId, customerStatusId: CUSTOMER_QUALIFIED]" />
                </if>
                <service-call name="delete#mantle.party.PartyRole"
                    in-map="[partyId: company.partyId, roleTypeId: oldValue.companies[0].role]" />
                <service-call name="create#mantle.party.PartyRole"
                    in-map="[partyId: company.partyId, roleTypeId: newRole]" />
            </if>
            <!-- update email -->
            <if condition="company.email != oldValue.companies[0]?.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="oldValue.companies[0].partyId" />
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate mail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="company.email">
                    <service-call name="mantle.party.ContactServices.create#EmailAddress"
                        in-map="[partyId: oldValue.companies[0].partyId, 
                        contactMechPurposeId: 'EmailPrimary', emailAddress: company.email]" />
                </if>
            </if>
            <!-- update url -->
            <if condition="company.url != oldValue.companies[0]?.url">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="oldValue.companies[0].partyId" />
                    <econdition field-name="contactMechPurposeId" value="WebUrlPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate mail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="company.url">
                    <service-call name="mantle.party.ContactServices.create#WebAddress"
                        in-map="[partyId: oldValue.companies[0].partyId, 
                        contactMechPurposeId: 'WebUrlPrimary', webAddress: company.url]" />
                </if>
            </if>
            <!-- update currency -->
            <log
                message="Updating currency for company ${company.partyId} from ${oldValue.companies[0].currency?.currencyId} to ${company.currency?.currencyId}" />
            <if
                condition="oldValue.companies[0].currency?.currencyId != company.currency?.currencyId">
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="pref">
                    <field-map field-name="organizationPartyId" from="company.partyId" />
                </entity-find-one>
                <if condition="pref">
                    <service-call name="update#mantle.ledger.config.PartyAcctgPreference"
                        in-map="[organizationPartyId: company.partyId,
                            baseCurrencyUomId: company.currency?.currencyId]" />
                    <else>
                        <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                            in-map="[organizationPartyId: company.partyId,
                                    baseCurrencyUomId: company.currency?.currencyId]" />
                    </else>
                </if>
            </if>
            <!-- update image -->
            <if condition="company.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'company', id: company.partyId,
                        base64: company.image]" />
            </if>
            <!-- postal address -->
            <!-- get geoId of country and province-->
            <if condition="company.address">
                <if condition="company.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="company.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="company.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="company.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <if
                    condition="
                        company.address.address1 != oldValue.companies[0].address?.address1 ||
                        company.address.address2 != oldValue.companies[0].address?.address2 ||
                        company.address.city != oldValue.companies[0].address?.city ||
                        company.address.postalCode != oldValue.companies[0].address?.postalCode ||
                        company.address.province != oldValue.companies[0].address?.province ||
                        company.address.country != oldValue.companies[0].address?.country
                        ">
                    <!-- disable (set thruDate) all postal duplicates -->
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                        for-update="true" list="partyContactMechs">
                        <econdition field-name="partyId" from="company.partyId" />
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                        <econdition field-name="thruDate" operator="is-null" />
                    </entity-find>
                    <iterate list="partyContactMechs" entry="contMech">
                        <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                        <entity-update value-field="contMech" />
                    </iterate>
                    <if condition="company.address.address2 != '_DELETE_'">
                        <service-call name="mantle.party.ContactServices.create#PostalAddress"
                            in-map="[partyId: company.partyId, contactMechPurposeId: 'PostalPrimary', 
                                    address1: company.address.address1,
                                    address2: company.address.address2,
                                    city: company.address.city,
                                    postalCode: company.address.postalCode,
                                    stateProvince: company.address.province,
                                    stateProvinceGeoId: stateProvinceGeoId, 
                                    countryGeoId: countryGeoId]"
                            out-map="result" />
                    </if>
                </if>
            </if>
            <!-- telephone -->
            <if condition="company.telephoneNr != oldValue.companies[0].telephoneNr">
                <if condition="oldValue.companyTelContactMechId">
                    <service-call name="update#mantle.party.contact.TelecomNumber"
                        in-map="[partyId: company.partyId,
                                    contactMechId: oldValue.companyTelContactMechId,
                                    contactNumber: company.telephoneNr]" />
                    <else>
                        <if condition="company.telephoneNr">
                            <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                                in-map="[
                                    contactMechPurposeId: 'PhonePrimary',
                                    areaCode: '',
                                    countryCode: '',
                                    contactNumber: company.telephoneNr,
                                    partyId: company.partyId]" />
                        </if>
                    </else>
                </if>
            </if>
            <!-- payment methods -->
            <if condition="company.paymentMethod">
                <!-- credit card -->
                <if condition="company.paymentMethod.ccDescription == '_DELETE_'">
                    <then>
                        <service-call
                            name="update#mantle.account.method.PaymentMethod"
                            in-map="[paymentMethodId: company.paymentMethod.ccPaymentMethodId,
                                    thruDate: ec.user.nowTimestamp]" />
                    </then>
                    <else-if condition="company.paymentMethod?.creditCardType">
                        <set field="expireDate"
                            value="${company.paymentMethod.expireMonth}/${company.paymentMethod.expireYear}" />
                        <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            list="partyContactMechs">
                            <econdition field-name="partyId" from="company.partyId" />
                            <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                            <date-filter />
                        </entity-find>
                        <if condition="!partyContactMechs">
                            <return error="true" message="Need postal address for creditcard" />
                        </if>
                        <set field="inMap"
                            from="[
                            ownerPartyId: oldValue.companies[0].partyId,
                            cardNumber: company.paymentMethod.creditCardNumber,
                            creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                                .condition('description', company.paymentMethod.creditCardType).one().enumId,
                            expireDate: expireDate,
                            postalContactMechId: partyContactMechs[0].contactMechId,
                            firstNameOnAccount: 'company',
                            lastNameOnAccount: company.name,
                            paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                            ]" />
                        <entity-find entity-name="mantle.account.method.PaymentMethod"
                            list="paymentMethods">
                            <econdition field-name="ownerPartyId"
                                from="oldValue.companies[0].partyId" />
                            <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard" />
                            <date-filter />
                        </entity-find>
                        <if condition="!paymentMethods">
                            <service-call
                                name="mantle.account.PaymentMethodServices.create#CreditCard"
                                in-map="inMap" />
                            <else>
                                <entity-find-one entity-name="mantle.account.method.CreditCard"
                                    value-field="cc">
                                    <field-map field-name="paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                </entity-find-one>
                                <if
                                    condition="inMap.cardNumber != cc.cardNumber ||
                                                inMap.expireDate != cc.expireDate">
                                    <set field="inMap.paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                    <service-call
                                        name="mantle.account.PaymentMethodServices.update#CreditCard"
                                        in-map="inMap" />
                                </if>
                            </else>
                        </if>
                    </else-if>
                </if>
            </if>
            <!-- sales/vat tax percentage -->
            <if condition="company.salesPerc || company.vatPerc">
                <entity-find-one
                    entity-name="mantle.party.Party" value-field="party" for-update="true">
                    <field-map field-name="partyId" from="company.partyId" />
                </entity-find-one>
                <if condition="company.vatPerc != null">
                    <set field="party.vatPerc" from="Integer.parseInt(company.vatPerc)" />
                    <else>
                        <set field="party.vatPerc" from="null" />
                    </else>
                </if>
                <if condition="company.salesPerc != null">
                    <set field="party.salesPerc" from="Integer.parseInt(company.salesPerc)" />
                    <else>
                        <set field="party.salesPerc" from="null" />
                    </else>
                </if>
                <entity-update value-field="party" />
            </if>
            <!-- hostnames -->
            <entity-find-one entity-name="mantle.product.store.ProductStore"
                value-field="productStore">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <set field="nowDate" from="ec.user.nowTimestamp" />
            <if condition="company.hostName != oldValue.companies[0].hostName">
                <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="settings">
                    <econdition field-name="productStoreId" from="productStore.productStoreId" />
                    <econdition field-name="settingTypeEnumId" value="PsstHostname" />
                    <date-filter />
                </entity-find>
                <if condition="settings"><!-- update/delete existing -->
                    <service-call name="update#mantle.product.store.ProductStoreSetting"
                        in-map="settings[0] + [thruDate: nowDate]" />
                </if>
                <service-call name="create#mantle.product.store.ProductStoreSetting"
                    in-map="[productStoreId: productStore.productStoreId,
                            settingTypeEnumId: 'PsstHostname',
                            settingValue: company.hostName,
                            fromDate: nowDate]" />
            </if>
            <if condition="company.secondaryBackend != oldValue.companies[0].secondaryBackend">
                <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="settings">
                    <econdition field-name="productStoreId" from="productStore.productStoreId" />
                    <econdition field-name="settingTypeEnumId" value="PsstSecBackend" />
                    <date-filter />
                </entity-find>
                <if condition="settings"><!-- update/delete existing -->
                    <service-call name="update#mantle.product.store.ProductStoreSetting"
                        in-map="settings[0] + [thruDate: nowDate]" />
                </if>
                <service-call name="create#mantle.product.store.ProductStoreSetting"
                    in-map="[productStoreId: productStore.productStoreId,
                            settingTypeEnumId: 'PsstSecBackend',
                            settingValue: company.secondaryBackend,
                            fromDate: nowDate]" />
            </if>
            <!-- return updated company -->
            <service-call
                name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: company.partyId]" out-map="context" />
            <if condition="companies">
                <set field="company" from="companies[0]" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="User">
        <description>
            Get all users with related company and role
        </description>
        <in-parameters>
            <parameter name="userPartyId" /><!-- if present select a single user -->
            <parameter name="firstName" />
            <parameter name="lastName" />
            <parameter name="companyName" />
            <parameter name="role" /><!-- if present select user from specific role-->
            <parameter name="userGroupId" /><!-- select user from specific security group-->
            <parameter name="ownerPartyId" /><!-- required when registering company customers-->
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="search" default="null" />
            <parameter name="isForDropDown" type="Boolean" default-value="false" />
            <parameter name="loginOnly" type="Boolean" default-value="false" />
        </in-parameters>
        <out-parameters>
            <parameter name="users" type="List">
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="email" />
                    <parameter name="url" />
                    <parameter name="role" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="paymentMethod" type="Map">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                        <parameter name="pseudoId" />
                        <parameter name="name" />
                        <parameter name="email" />
                        <parameter name="role" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                    <parameter name="appsUsed" type="List">
                        <parameter name="partyClassificationId" />
                    </parameter>
                </parameter>
            </parameter>
            <parameter name="personToCompanyId" /><!-- used in update user for reassign of company -->
        </out-parameters>
        <actions>
            <set field="role" from="role?.capitalize()" />
            <if condition="search != null">
                <set field="search" value="%${search}%" />
            </if>
            <service-call out-map="relatedLogin"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- be able to override owner when registering new user and company -->
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relatedLogin.ownerPartyId" />
            </if>
            <set field="users" from="[]" />
            <if condition="!userPartyId &amp;&amp; !search">
                <set field="disabled" value="N" />
            </if>
            <!-- adjust role -->
            <if condition="role == 'Customer'">
                <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
            </if>
            <if condition="role == 'Lead'">
                <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                <set field="role" value="Customer" />
            </if>
            <if condition="role == 'Unknown'">
                <set field="role" from="null" />
            </if>
            <if condition="role == 'Company'">
                <set field="role" value="OrgInternal" />
            </if>
            <!-- get records -->
            <entity-find offset="start" limit="limit" list="userInfos"
                entity-name="growerp.party.OwnerPersonDetailAndCompany">
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="userPartyId" ignore-if-empty="true" />
                <econdition
                    field-name="userId" operator="is-not-null" ignore="!loginOnly" />
                <econdition
                    field-name="loginDisabled" operator="not-equals" from="Y" or-null="true"
                    ignore="!loginOnly" />
                <econditions combine="or">
                    <econdition field-name="userPseudoId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="firstName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="lastName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="emailAddress" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <econditions combine="or">
                    <econdition field-name="role" ignore-if-empty="true" />
                    <econdition field-name="companyRole" from="role" ignore-if-empty="true" />
                </econditions>
                <econdition field-name="customerStatusId" ignore-if-empty="true" or-null="true" />
                <econdition field-name="userGroupId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="ownerDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                    <econdition field-name="userDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                </econditions>
                <order-by field-name="lastName^,firstName^,companyName^" />
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <!-- adjust role -->
                <if
                    condition="userInfo.role == 'Customer' 
                        &amp;&amp; userInfo.customerStatusId == 'CUSTOMER_ASSIGNED'">
                    <set field="userInfo.role" value="Lead" />
                </if>
                <if
                    condition="userInfo.companyRole == 'Customer' &amp;&amp; userInfo.companyCustomerStatusId == 'CUSTOMER_ASSIGNED'">
                    <set field="userInfo.companyRole" value="Lead" />
                </if>
                <!-- postal address -->
                <set field="address" from="null" />
                <if condition="userInfo.postalContactMechId">
                    <set field="address"
                        from="[
                        addressId: userInfo.postalContactMechId,
                        address1: userInfo.address1,
                        address2: userInfo.address2,
                        city: userInfo.city,
                        postalCode: userInfo.postalCode,
                        province: userInfo.stateProvince,
                        provinceId: userInfo.stateProvinceGeoId,
                        country: userInfo.countryName,
                        countryId: userInfo.countryId,
                        ]" />
                    <else>
                        <set field="address" from="null" />
                    </else>
                </if>
                <!-- image -->
                <entity-find entity-name="mantle.party.PartyContent" list="contents">
                    <econdition field-name="partyId" from="userInfo.userPartyId" />
                    <econdition field-name="partyContentTypeEnumId"
                        from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context" />
                    <else>
                        <set field="imageFile" from="null" />
                    </else>
                </if>
                <!-- if somebody registered a company, then ordered from another website, admin and
                employee need to be adjusted -->
                <set field="userGroupId" from="userInfo.userGroupId" />
                <!--TODO:
                if condition="userGroupId in ['GROWERP_M_ADMIN','GROWERP_M_EMPLOYEE']">
                    <if condition="userInfo.companyRole == 'Customer'">
                        <set field="userGroupId" value="GROWERP_M_CUSTOMER"/></if>
                    <if condition="userInfo.companyRole == 'Supplier'">
                        <set field="userGroupId" value="GROWERP_M_SUPPLIER"/></if>
                </if-->
                <if condition="userInfo.paymentMethodId">
                    <set field="nrLength" from="userInfo.cardNumber.length()" />
                    <set field="ccDescription"
                        value="${userInfo.cardType}**********${userInfo.cardNumber.substring(nrLength-4,nrLength)} ${userInfo.expireDate}" />
                    <set field="paymentMethod"
                        from="[ ccPaymentMethodId: userInfo.paymentMethodId,
                                ccDescription: ccDescription]" />
                    <else>
                        <set field="paymentMethod" from="null" />
                    </else>
                </if>
                <if condition="userInfo.companyPartyId">
                    <if condition="isForDropDown">
                        <set field="company"
                            from="[
                            partyId: userInfo.companyPartyId,
                            name: userInfo.companyName,
                            ]" />
                        <else>
                            <!-- role adjustment -->
                            <if
                                condition="userInfo.companyRole == 'Customer' &amp;&amp;
                                    userInfo.companyCustomerStatusId == 'CUSTOMER_ASSIGNED'">
                                <set field="role" value="Lead" />
                                <else>
                                    <set field="role" from="userInfo.companyRole" />
                                </else>
                            </if>

                            <set field="company"
                                from="[
                                partyId: userInfo.companyPartyId,
                                pseudoId: userInfo.companyPseudoId,
                                name: userInfo.companyName,
                                role: role,
                                ]" />
                        </else>
                    </if>
                    <else>
                        <set field="company" from="null" />
                    </else>
                </if>
                <set field="telephoneNr"
                    value="${userInfo.telCountryCode?:''}${userInfo.telAreaCode?:''}${userInfo.telContactNumber?:''}" />
                <entity-find entity-name="mantle.party.PartyClassificationAndAppl"
                    list="partyClassifications">
                    <econdition field-name="partyId" from="userInfo?.userPartyId" />
                    <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
                </entity-find>
                <set field="appsUsed" from="[]" />
                <iterate list="partyClassifications" entry="pc">
                    <script>appsUsed.add(pc.partyClassificationId)</script>
                </iterate>
                <if condition="isForDropDown">
                    <set field="userOut"
                        from="[
                            partyId: userInfo?.userPartyId,
                            pseudoId: userInfo?.userPseudoId,
                            firstName: userInfo?.firstName,
                            lastName: userInfo?.lastName,
                            company: company,
                            userId: userInfo?.userId,
                            ]" />
                    <else>
                        <!-- role adjustment -->
                        <if
                            condition="userInfo.role == 'Customer' &amp;&amp;
                                    userInfo.customerStatusId == 'CUSTOMER_ASSIGNED'">
                            <set field="role" value="Lead" />
                            <else>
                                <set field="role" from="userInfo.role" />
                            </else>
                        </if>

                        <set field="userOut"
                            from="[
                                partyId: userInfo?.userPartyId,
                                pseudoId: userInfo?.userPseudoId,
                                role: role,
                                email: userInfo?.emailAddress ?: userInfo.emailAddressCm,
                                url: userInfo.webAddress,
                                emailContactMechId: userInfo.emailContactMechId,
                                firstName: userInfo?.firstName,
                                lastName: userInfo?.lastName,
                                loginDisabled: userInfo?.loginDisabled == 'Y'? true : false,
                                loginName: userInfo?.loginName,
                                fullName: userInfo?.userFullName,
                                userGroupId: userGroupId,
                                address: address,
                                paymentMethod: paymentMethod,
                                groupDescription: userInfo?.ugDescription,
                                language: userInfo?.locale ? userInfo?.locale .toString() : '',
                                image: imageFile,
                                userId: userInfo?.userId,
                                locale: userInfo?.locale ?:'',
                                telephoneNr: telephoneNr,
                                company: company,
                                appsUsed: appsUsed,
                                ]" />
                    </else>
                </if>
                <script>users.add(userOut)</script>
            </iterate>
            <if condition="userPartyId">
                <set field="personToCompanyId" from="userInfos[0]?.personToCompanyId" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user with related company to an existing owner company
        </description>
        <in-parameters>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="role" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="creditCardType" />
                    <parameter name="creditCardNumber" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="url" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                    </parameter>
                    <parameter name="currencyName" />
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                </parameter>
                <parameter name="appsUsed" type="List">
                    <parameter name="partyClassificationId" />
                </parameter>
            </parameter>
            <parameter name="password"
                default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="ownerPartyId" /><!-- only required when no user logged in after
                                                creating owner company -->
            <parameter name="classificationId" />
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="role" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="appsUsed" type="List">
                    <parameter name="partyClassificationId" />
                </parameter>
            </parameter>
            <parameter name="password" />
            <parameter name="login" type="Boolean" default-value="false" />
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="!ownerPartyId">
                <return error="true"
                    message="Owner company missing in create#user service for ${user.firstName} ${user.lastName} ${user.userGroupId}" />
            </if>
            <!-- create pseudoId when not provided -->
            <if condition="!user.pseudoId || user.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'party']"
                    out-map="context" />
                <set field="user.pseudoId" from="seqNum" />
            </if>
            <!-- role -->
            <if condition="user.role == 'Lead' || user.company?.role == 'Lead' ">
                <then>
                    <set field="user.role" value="Customer" />
                    <if condition="user.company">
                        <set field="user.company.role" value="Customer" />
                    </if>
                    <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                </then>
                <else-if condition="user.role == 'Customer' || user.company?.role == 'Customer'">
                    <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
                </else-if>
            </if>
            <!-- create account with or without login-->
            <!-- create#Account will always create a login even if username == null-->
            <set field="inMap"
                from="[ roleTypeId: user.role,
                    pseudoId: user.pseudoId,  loginAfterCreate: login,
                    firstName: user.firstName, lastName: user.lastName,
                    emailAddress: user.email,
                    username: user.loginName, newPassword: password,
                    newPasswordVerify: password, ownerPartyId: ownerPartyId]" />
            <if condition="user.loginName">
                <service-call name="mantle.party.PartyServices.create#Account"
                    in-map="inMap" out-map="userAccount" />
                <set field="userPartyId" from="userAccount.partyId" />
                <else>
                    <service-call name="create#mantle.party.Party"
                        in-map="inMap + [partyTypeEnumId:'PtyPerson']" out-map="newPartyOut" />
                    <set field="userPartyId" from="newPartyOut.partyId" />
                    <service-call name="create#mantle.party.Person"
                        in-map="inMap + [partyId: userPartyId]" />
                    <service-call name="create#mantle.party.PartyRole"
                        in-map="[partyId:userPartyId, roleTypeId: user.role]" />
                </else>
            </if>
            <if condition="customerStatusId">
                <service-call name="update#mantle.party.Party"
                    in-map="[partyId: userPartyId, customerStatusId: customerStatusId]" />
            </if>
            <if condition="user.loginDisabled">
                <service-call name="update#moqui.security.UserAccount"
                    in-map="[userId: userPartyId,
                                disabled: user.loginDisabled == true ? 'Y' : 'N']" />
            </if>
            <if condition="user.loginName">
                <!-- user security access -->
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: 'ALL_USERS', userId: userAccount.userId]" />
            </if>
            <!-- create company if required -->
            <if condition="user.company">
                <if condition="user.company.partyId">
                    <then><!-- existing company -->
                        <set field="userCompanyPartyId" from="user.company.partyId" />
                    </then>
                    <else>
                        <if condition="user.company.name">
                            <!-- create company -->
                            <service-call name="growerp.100.PartyServices100.create#Company"
                                in-map="[company: user.company, ownerPartyId: ownerPartyId,
                                    role: user.company.role]"
                                out-map="context" />
                            <set field="userCompanyPartyId" from="company.partyId" />
                        </if>
                    </else>
                </if>
            </if>
            <!-- add new user to company  -->
            <if condition="userCompanyPartyId">
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[   
                        fromPartyId: userPartyId,
                        fromRoleTypeId: 'Employee',
                        toPartyId: userCompanyPartyId,
                        toRoleTypeId: user.company.role == 'Lead'? 'Customer' : user.company.role,
                        relationshipTypeEnumId: 'PrtEmployee',
                        fromDate: ec.user.nowTimestamp
                        ]" />
            </if>
            <!-- add image -->
            <if condition="user.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userPartyId,
                        base64: user.image]" />
            </if>
            <!-- address -->
            <if condition="user.address">
                <if condition="user.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="user.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="user.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="user.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <service-call name="mantle.party.ContactServices.create#PostalAddress"
                    in-map="[partyId: userPartyId, contactMechPurposeId: 'PostalPrimary', 
                            address1: user.address.address1,
                            address2: user.address.address2,
                            city: user.address.city,
                            postalCode: user.address.postalCode,
                            stateProvince: user.address.province,
                            stateProvinceGeoId: stateProvinceGeoId, 
                            countryGeoId: countryGeoId]"
                    out-map="resultAddress" />

                <!-- payment only possible if address provided -->
                <if condition="user.paymentMethod?.creditCardNumber">
                    <set field="expireDate"
                        value="${user.paymentMethod.expireMonth}/${user.paymentMethod.expireYear}" />
                    <set field="inMap"
                        from="[
                        ownerPartyId: userPartyId,
                        cardNumber: user.paymentMethod.creditCardNumber,
                        creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                            .condition('description', user.paymentMethod.creditCardType).one().enumId,
                        expireDate: expireDate,
                        postalContactMechId: resultAddress.contactMechId,
                        firstNameOnAccount: user.firstName,
                        lastNameOnAccount: user.lastName,
                        paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                    ]" />
                    <service-call
                        name="mantle.account.PaymentMethodServices.create#CreditCard"
                        in-map="inMap" />
                </if>
            </if>
            <!-- telephone -->
            <if condition="user.telephoneNr">
                <service-call
                    name="mantle.party.ContactServices.create#TelecomNumber"
                    in-map="[
                        contactNumber: user.telephoneNr,
                        contactMechPurposeId: 'PhonePrimary',
                        partyId: userPartyId,
                            ]" />
            </if>
            <!-- email-->
            <if condition="user.email &amp;&amp; !user.loginName"><!-- email created with account-->
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[emailAddress:user.email, partyId:userPartyId,
                             contactMechPurposeId:'EmailPrimary']" />
            </if>
            <!-- webAddress -->
            <if condition="user.url">
                <service-call name="mantle.party.ContactServices.create#WebAddress"
                    in-map="[webAddress: user.url,
                            partyId: userPartyId,
                            contactMechPurposeId:'WebUrlPrimary']" />
            </if>

            <!-- send email to new user with password -->
            <if condition="user.loginName">
                <entity-find-one entity-name="moqui.basic.email.EmailServer"
                    value-field="emailExist">
                    <field-map field-name="emailServerId" value="SYSTEM" />
                </entity-find-one>
                <if
                    condition="emailExist &amp;&amp; emailExist.mailPassword != 'SMTP_PASSWORD'
                                &amp;&amp; !user.email.contains('example.com')">
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                        async="true">
                        <field-map field-name="emailTemplateId" value="WELCOME" />
                        <field-map field-name="toAddresses" from="user.email" />
                        <field-map field-name="bodyParameters"
                            from="[classification: classificationId? classificationId.substring(3) : '',
                                newPassword:password, firstName: user.firstName,
                                lastName: user.lastName]" />
                    </service-call>
                    <else>
                        <log level="warn"
                            message="====== Email not Send, ${user.loginName} password: $password email: ${user.email}" />
                    </else>
                </if>
            </if>
            <!-- appsUsed -->
            <if condition="user.appsUsed &amp;&amp; user.appsUsed.size() &gt; 0">
                <service-call name="create#mantle.party.PartyClassificationAppl"
                    in-map="[partyId: userPartyId, partyClassificationId: user.appsUsed[0]]" />
            </if>
            <!-- system support chat room -->
            <if condition="userAccount">
                <service-call name="create#growerp.general.ChatRoom"
                    in-map="[isPrivate: 'Y', isActive: 'Y',
                        ownerPartyId: ownerPartyId]"
                    out-map="context" />
                <service-call name="create#growerp.general.ChatRoomMember"
                    in-map="[chatRoomId: chatRoomId,
                                userId: userAccount.userId,
                                isActive: 'Y',
                                hasRead: 'N']" />
                <service-call name="create#growerp.general.ChatRoomMember"
                    in-map="[chatRoomId: chatRoomId,
                                userId: 'SYSTEM_SUPPORT',
                                isActive: 'N',
                                hasRead: 'Y']" />
                <service-call name="create#growerp.general.ChatMessage"
                    in-map="[chatRoomId: chatRoomId,
                            content: 'Welcome to GrowERP, if you need support, enter here in the chat your request, we will reply within 24 Hrs',
                            fromUserId: 'SYSTEM_SUPPORT']" />
            </if>

            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[ownerPartyId: ownerPartyId, userPartyId: userPartyId]"
                out-map="userInfo" />
            <set field="user" from="userInfo.users?[0]" />
        </actions>
    </service>

    <service verb="update" noun="User">
        <description>
            update user information
        </description>
        <in-parameters>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" required="true" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="role" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                    <parameter name="creditCardType" />
                    <parameter name="creditCardNumber" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
                <parameter name="appsUsed" type="List">
                    <parameter name="partyClassificationId" />
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="role" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
                <parameter name="appsUsed" type="List">
                    <parameter name="partyClassificationId" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: user.partyId]" out-map="oldValue" />
            <if condition="oldValue.users">
                <set field="oldValue.user" from="oldValue.users[0]" />
            </if>
            <!-- update person -->
            <service-call name="update#mantle.party.Person"
                in-map="[   partyId: user.partyId, 
                            firstName: user.firstName ? user.firstName : oldValue.user.firstName, 
                            lastName: user.lastName ? user.lastName : oldValue.user.lastName]" />
            <!-- update account -->
            <entity-find-one entity-name="mantle.party.PersonAndUserAccount"
                value-field="userAccount">
                <field-map field-name="partyId" from="oldValue.user.partyId" />
            </entity-find-one>
            <if condition="userAccount">
                <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                    in-map="[   partyId: user.partyId, 
                                emailAddress: user.email ?: oldValue.user.email,
                                username: user.loginName ?: oldValue.user.loginName,
                                locale: language
                            ]" />
                <else-if
                    condition="user.loginName &amp;&amp; user.email &amp;&amp; user.userGroupId">
                    <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                        in-map="[ownerPartyId: relComp.ownerPartyId, seqName: 'party']"
                        out-map="context" />
                    <service-call name="mantle.party.PartyServices.create#Account"
                        in-map="[roleTypeId: user.role, 
                                loginAfterCreate: false, pseudoId: seqNum,
                                firstName: user.firstName, lastName: user.lastName,
                                emailAddress: user.email,
                                username: user.loginName, newPassword: password,
                                newPasswordVerify: password,
                                ownerPartyId: ownerPartyId]"
                        out-map="userAccount" />
                    <if condition="user.loginDisabled">
                        <service-call name="update#moqui.security.UserAccount"
                            in-map="[userId: userAccount.userId,
                                disabled: user.loginDisabled == true ? 'Y' : 'N']" />
                    </if>
                </else-if>
            </if>
            <!-- update role , orgInternal cannot change-->
            <if
                condition="oldValue.user.role != 'OrgInternal' &amp;&amp; user.role != oldValue.user.role">
                <set field="newRole" from="user.role" />
                <if condition="user.role == 'Lead'">
                    <set field="newRole" value="Customer" />
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: user.partyId, customerStatusId: 'CUSTOMER_ASSIGNED']" />
                </if>
                <if condition="user.role == 'Customer'">
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: user.partyId, customerStatusId: CUSTOMER_QUALIFIED]" />
                </if>
                <!-- update role -->
                <service-call name="delete#mantle.party.PartyRole"
                    in-map="[partyId: user.partyId, roleTypeId: oldValue.user.role]" />
                <service-call name="create#mantle.party.PartyRole"
                    in-map="[partyId: user.partyId, roleTypeId: newRole]" />
            </if>
            <!-- update alternative email address -->
            <if condition="user.email == ''">
                <set field="user.email" from="null" />
            </if>
            <if condition="user.email != oldValue.user.email">
                <if condition="oldValue.user.emailContactMechId">
                    <!-- update -->
                    <service-call name="update#mantle.party.contact.ContactMech"
                        in-map="[contactMechId: oldValue.user.emailContactMechId,
                                infoString: user.email]" />
                    <else>
                        <!-- create -->
                        <service-call name="mantle.party.ContactServices.create#EmailAddress"
                            in-map="[partyId: user.partyId, emailAddress: user.email,
                                contactPurposeId: 'EmailPrimary']" />
                    </else>
                </if>
            </if>
            <!-- update url -->
            <if condition="user.url != oldValue.user?.url">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="oldValue.user.partyId" />
                    <econdition field-name="contactMechPurposeId" value="WebUrlPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate mail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="user.url">
                    <service-call name="mantle.party.ContactServices.create#WebAddress"
                        in-map="[partyId: oldValue.user.partyId, 
                        contactMechPurposeId: 'WebUrlPrimary', webAddress: user.url]" />
                </if>
            </if>
            <!-- update security group -->
            <if
                condition="userAccount?.userId &amp;&amp; user.userGroupId != oldValue.user.userGroupId">
                <entity-find entity-name="moqui.security.UserGroupMember"
                    list="userGroupMembers" limit="1">
                    <econdition field-name="userGroupId" from="oldValue.user.userGroupId" />
                    <econdition field-name="userId" from="oldValue.user.userId" />
                    <date-filter />
                </entity-find>
                <if condition="userGroupMembers">
                    <!-- finish existing -->
                    <service-call name="update#moqui.security.UserGroupMember"
                        in-map="userGroupMembers[0] + [thruDate: ec.user.nowTimestamp]" />
                </if>
                <!-- create new -->
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
            </if>
            <!-- update image -->
            <if condition="user.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: user.partyId,
                        base64: user.image]" />
            </if>
            <!-- related company changes if any -->
            <if condition="user.company?.partyId != oldValue.user.company?.partyId">
                <!-- delete  old relationship -->
                <if condition="oldValue.user.company?.partyId">
                    <entity-delete-by-condition entity-name="mantle.party.PartyRelationship">
                        <econdition field-name="fromPartyId" from="oldValue.user.partyId" />
                    </entity-delete-by-condition>
                </if>
                <!-- create new relationship -->
                <if condition="user.company.partyId">
                    <service-call name="create#mantle.party.PartyRelationship"
                        in-map="[fromPartyId: user.partyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: user.company.partyId,
                    toRoleTypeId: user.company.role == 'Lead'? 'Customer' : user.company.role
                    ]" />
                </if>
            </if>
            <!-- postal address -->
            <!-- get geoId of country and province-->
            <if condition="user.address">
                <if condition="user.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="user.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="user.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="user.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <if
                    condition="
                        user.address.address1 != oldValue.user.address?.address1 ||
                        user.address.address2 != oldValue.user.address?.address2 ||
                        user.address.city != oldValue.user.address?.city ||
                        user.address.postalCode != oldValue.user.address?.postalCode ||
                        user.address.province != oldValue.user.address?.province ||
                        user.address.country != oldValue.user.address?.country
                        ">
                    <!-- disable (set thruDate) all postal duplicates -->
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                        for-update="true" list="partyContactMechs">
                        <econdition field-name="partyId" from="user.partyId" />
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                        <econdition field-name="thruDate" operator="is-null" />
                    </entity-find>
                    <iterate list="partyContactMechs" entry="contMech">
                        <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                        <entity-update value-field="contMech" />
                    </iterate>
                    <if condition="user.address.address2 != '_DELETE_'">
                        <service-call name="mantle.party.ContactServices.create#PostalAddress"
                            in-map="[partyId: user.partyId, contactMechPurposeId: 'PostalPrimary', 
                                    address1: user.address.address1,
                                    address2: user.address.address2,
                                    city: user.address.city,
                                    postalCode: user.address.postalCode,
                                    stateProvince: user.address.province,
                                    stateProvinceGeoId: stateProvinceGeoId, 
                                    countryGeoId: countryGeoId]"
                            out-map="result" />
                    </if>
                </if>
            </if>
            <!-- payment methods -->
            <if condition="user.paymentMethod">
                <!-- credit card -->
                <if condition="user.paymentMethod.ccDescription == '_DELETE_'">
                    <then>
                        <service-call
                            name="update#mantle.account.method.PaymentMethod"
                            in-map="[paymentMethodId: user.paymentMethod.ccPaymentMethodId,
                                    thruDate: ec.user.nowTimestamp]" />
                    </then>
                    <else-if condition="user.paymentMethod?.creditCardType">
                        <set field="expireDate"
                            value="${user.paymentMethod.expireMonth}/${user.paymentMethod.expireYear}" />
                        <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            list="partyContactMechs">
                            <econdition field-name="partyId" from="user.partyId" />
                            <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                            <date-filter />
                        </entity-find>
                        <if condition="!partyContactMechs">
                            <return error="true" message="Need postal address for creditcard" />
                        </if>
                        <set field="inMap"
                            from="[
                            ownerPartyId: oldValue.user.partyId,
                            cardNumber: user.paymentMethod.creditCardNumber,
                            creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                                .condition('description', user.paymentMethod.creditCardType).one().enumId,
                            expireDate: expireDate,
                            postalContactMechId: partyContactMechs[0].contactMechId,
                            firstNameOnAccount: user.firstName,
                            lastNameOnAccount: user.lastName,
                            paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                            ]" />
                        <entity-find entity-name="mantle.account.method.PaymentMethod"
                            list="paymentMethods">
                            <econdition field-name="ownerPartyId"
                                from="oldValue.user.partyId" />
                            <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard" />
                            <date-filter />
                        </entity-find>
                        <if condition="!paymentMethods">
                            <service-call
                                name="mantle.account.PaymentMethodServices.create#CreditCard"
                                in-map="inMap" />
                            <else>
                                <entity-find-one entity-name="mantle.account.method.CreditCard"
                                    value-field="cc">
                                    <field-map field-name="paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                </entity-find-one>
                                <if
                                    condition="inMap.cardNumber != cc.cardNumber ||
                                                inMap.expireDate != cc.expireDate">
                                    <set field="inMap.paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                    <service-call
                                        name="mantle.account.PaymentMethodServices.update#CreditCard"
                                        in-map="inMap" />
                                </if>
                            </else>
                        </if>
                    </else-if>
                </if>
            </if>
            <!-- telephone -->
            <if condition="user.telephoneNr || user.telephoneNr != oldValue.user.telephoneNr">
                <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber"
                    list="telNos">
                    <econdition field-name="contactMechPurposeId" value="PhonePrimary" />
                    <econdition field-name="partyId" from="user.partyId" />
                    <date-filter />
                </entity-find>
                <if condition="telNos">
                    <service-call name="update#mantle.party.contact.TelecomNumber"
                        in-map="[contactMechId: telNos[0].contactMechId,
                                contactNumber: user.telephoneNr]" />
                    <else>
                        <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                            in-map="[
                                contactMechPurposeId: 'PhonePrimary',
                                contactNumber: user.telephoneNr,
                                partyId: user.partyId]" />
                    </else>
                </if>
            </if>
            <!-- update email -->
            <if condition="user.email || user.email != oldValue.user.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="user.partyId" />
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate urlmail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="user.email">
                    <service-call name="mantle.party.ContactServices.create#EmailAddress"
                        in-map="[partyId: user.partyId, 
                        contactMechPurposeId: 'EmailPrimary', emailAddress: user.email]" />
                </if>
            </if>
            <!-- update url -->
            <if condition="user.url || user.url != oldValue.user.url">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="user.partyId" />
                    <econdition field-name="contactMechPurposeId" value="WebUrlPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate urlmail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="user.url">
                    <service-call name="mantle.party.ContactServices.create#WebAddress"
                        in-map="[partyId: user.partyId, 
                        contactMechPurposeId: 'WebUrlPrimary', webAddress: user.url]" />
                </if>
            </if>
            <!-- return updated user -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: user.partyId]" out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <description>Deactivate a owner companies logged in user and optionally delete owner company too.</description>
        <in-parameters>
            <parameter name="partyId" required="true" />
            <parameter name="deleteCompanyToo" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
                <parameter name="appsUsed" type="List">
                    <parameter name="partyClassificationId" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find-one entity-name="mantle.party.Party" value-field="party">
                <field-map field-name="ownerPartyId" from="ownerPartyId" />
                <field-map field-name="partyId" from="partyId" />
            </entity-find-one>
            <if condition="!party">
                <return error="true" message="Could not find partyId: $partyId" />
            </if>
            <!-- disable user -->
            <service-call name="update#mantle.party.Party"
                in-map="[partyId: partyId, disabled: 'Y']" />
            <!-- disable account change email for re-use-->
            <entity-find entity-name="moqui.security.UserAccount"
                list="accounts" for-update="true">
                <econdition field-name="partyId" />
            </entity-find>
            <if condition="accounts">
                <entity-update
                    value-field="(accounts[0] + 
                    [disabled: 'Y',
                    username: partyId + '-' + accounts[0].username,
                    emailAddress: partyId + '-' + accounts[0].emailAddress])" />
            </if>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId]" out-map="loggedInParty" />
            <if condition="loggedInParty.users">
                <set field="loggedInParty.user" from="loggedInParty.users[0]" />
            </if>
            <!-- check if this user has an admin account and 
                if company needs deleting and deletes his own userlogin
                then can delete company too -->
            <if
                condition="loggedInParty.user?.userGroupId == 'GROWERP_M_ADMIN' 
                    &amp;&amp; deleteCompanyToo == true
                    &amp;&amp; partyId == userPartyId">
                <service-call name="update#mantle.party.Party"
                    in-map="[partyId: companyPartyId, disabled: 'Y']" />
                <!-- disable all owned parties -->
                <entity-find entity-name="mantle.party.Party" list="parties">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                </entity-find>
                <iterate list="parties" entry="party">
                    <entity-update value-field="(party + [disabled: 'Y'])" />
                    <!-- disable all owned accounts -->
                    <entity-find entity-name="moqui.security.UserAccount"
                        list="accounts" for-update="true">
                        <econdition field-name="partyId" from="party.partyId" />
                    </entity-find>
                    <if condition="accounts">
                        <entity-update
                            value-field="(accounts[0] + 
                                [disabled: 'Y',
                                username: partyId + '-' + accounts[0].username,
                                emailAddress: partyId + '-' + accounts[0].emailAddress])" />
                    </if>
                </iterate>
            </if>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="CompanyUser">
        <description>
            Get all users with no company and companies
        </description>
        <in-parameters>
            <parameter name="role" default="null" />
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="search" default="null" />
            <parameter name="partyId" />
            <parameter name="export" type="Boolean" default-value="false" />
        </in-parameters>
        <out-parameters>
            <parameter name="companiesUsers" type="List">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="partyType" />
                <parameter name="role" />
                <parameter name="email" />
                <parameter name="url" />
                <parameter name="name" />
                <parameter name="telephoneNr" />
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="paymentMethod">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="pseudoId" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="role" from="role?.capitalize()" />
            <if condition="role == 'Unknown'">
                <set field="role" from="null" />
            </if>
            <if condition="search">
                <set field="searchString" value="%$search%" />
                <set field="firstName" value="%${search.split()?[0]}%" />
                <set field="lastName"
                    value="%${search.split().size() > 1? search.split()?[1] : null}%" />
            </if>
            <!-- adjust role -->
            <if condition="role == 'Customer'">
                <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
            </if>
            <if condition="role == 'Lead'">
                <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                <set field="role" value="Customer" />
            </if>
            <if condition="role == 'Unknown'">
                <set field="role" from="null" />
            </if>
            <if condition="role == 'Company'">
                <set field="role" value="OrgInternal" />
            </if>
            <entity-find offset="start" limit="limit" list="items"
                entity-name="growerp.party.OwnerCompanyUser">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="partyId" from="partyId" ignore-if-empty="true" />
                <econdition field-name="role" ignore-if-empty="true" />
                <econdition field-name="customerStatusId" ignore-if-empty="true" or-null="true" />
                <econdition field-name="toPartyId" operator="is-null" ignore="export" />
                <econditions combine="or">
                    <econdition field-name="companyName" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="firstName" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="firstName" from="firstName" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="lastName" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="lastName" from="lastName" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="userFullName" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="pseudoId" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="email" from="searchString" ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="personCompanyPseudoId" from="searchString"
                        ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                    <econdition field-name="personCompanyName" from="searchString"
                        ignore-case="true"
                        operator="like" ignore-if-empty="true" />
                </econditions>
                <order-by field-name="name" />
            </entity-find>
            <set field="companiesUsers" from="[]" />
            <set field="employees" from="[]" />
            <iterate list="items" entry="item">
                <!-- collect employees from companies -->
                <if condition="item.employeePartyId">
                    <script>employees.add([
                        partyId: item.employeePartyId, pseudoId: item.employeePseudoId,
                        firstName: item.employeeFirstName, lastName: item.employeeLastName 
                        ])</script>
                </if>

                <!-- remove duplicates -->
                <!--if
                condition="item.partyId == lastPartyId">
                    <continue />
                </if-->
                <if condition="item.partyType == 'PtyOrganization'">
                    <set field="type" value="Company" />
                    <set field="name" value="${item.companyName}" />
                    <else>
                        <set field="type" value="User" />
                        <set field="name" value="${item.firstName} ${item.lastName}" />
                        <set field="name" from="item.userFullName ?: name" />
                    </else>
                </if>
                <!-- role adjustment -->
                <if
                    condition="item.role == 'Customer' &amp;&amp; item.customerStatusId == 'CUSTOMER_ASSIGNED'">
                    <set field="role" value="Lead" />
                    <else>
                        <set field="role" from="item.role" />
                    </else>
                </if>
                <set field="companyUser"
                    from="[
                    pseudoId: item.pseudoId, type: type, partyId: item.partyId, role: role, name: name,
                    email: item.email, url: item.webAddress]" />

                <!-- address -->
                <set
                    field="address" from="null" />
                <if condition="item.postalContactMechId">
                    <set field="address"
                        from="[addressId: item.postalContactMechId,
                            address1: item.address1, address2: item.address2,
                            city: item.city, postalCode: item.postalCode,
                            province: item.stateProvince, provinceId: item.stateProvinceGeoId,
                            country: item.countryName, countryId: item.countryId]" />
                    <set field="companyUser.address" from="address" />
                </if>
                <!-- employees -->
                <set field="employees" from="[]" />
                <if condition="employees != []">
                    <set field="companyUser.employees" from="employees" />
                </if>

                <!-- payment method -->
                <set field="paymentMethod" from="null" />
                <if condition="item.paymentMethodId">
                    <set field="nrLength" from="item.cardNumber.length()" />
                    <set field="ccDescription"
                        value="${item.cardType}**********${item.cardNumber.substring(nrLength-4,nrLength)} ${item.expireDate}" />
                    <set field="paymentMethod"
                        from="[ ccPaymentMethodId: item.paymentMethodId,
                                    ccDescription: ccDescription]" />
                    <set field="companyUser.paymentMethod" from="paymentMethod" />
                </if>
                <!-- company of the user (normally this is not shown, but the company is.-->
                <set field="personCompany" from="null" />
                <if condition="item.personCompanyPartyId">
                    <set field="companyUser.company"
                        from="[ name: item.personCompanyName,
                                pseudoId: item.personCompanyPseudoId,
                                partyId: item.personCompanyPartyId]" />
                </if>

                <!-- telephone -->
                <set field="telephoneNr" from="null" />
                <if
                    condition="item.telCountryCode || item.telAreaCode || item.telContactNumber">
                    <set field="telephoneNr"
                        value="${item.telCountryCode ?: ''} ${item.telAreaCode ?: ''} ${item.telContactNumber ?: ''}" />
                    <set field="companyUser.telephoneNr" from="telephoneNr" />
                </if>

                <script>companiesUsers.add(companyUser)</script>
                <set
                    field="lastPartyId" from="item.partyId" />
            </iterate>
        </actions>
    </service>

    <service verb="register" noun="WebsiteUser" authenticate="anonymous-all">
        <description>registration on the e-commerce webapp for a specific company just for non-employees</description>
        <in-parameters>
            <parameter name="ownerPartyId" required="true"><!-- owner company not top owner -->
                <description>Party Id of the organization</description>
            </parameter>
            <parameter name="classificationId">
                <description>The App id the user want to register for, valid entries: AppAdmin, AppHotel etc </description>
            </parameter>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" default-value="false" />
                <parameter name="loginName" default="email" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="companyPartyId" />
                <parameter name="companyName" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="companyAddress" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="country" />
                </parameter>
                <parameter name="companyPaymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
            </parameter>
            <parameter name="newPassword" />
        </in-parameters>
        <out-parameters>
            <parameter name="customerInfo" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" default-value="'N'" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="companyPartyId" />
                <parameter name="companyName" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
            </parameter>
        </out-parameters>
        <actions>
            <!-- get main company party id with ownerPartyId-->
            <entity-find-one entity-name="growerp.party.CompanyPreferenceAndRole"
                value-field="companyParty">
                <field-map field-name="partyId" from="ownerPartyId" />
                <field-map field-name="roleTypeId" value="OrgInternal" />
            </entity-find-one>
            <if condition="!companyParty">
                <return message="Not a valid companyId" />
            </if>
            <entity-find-one entity-name="mantle.party.PartyClassification"
                value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId" />
            </entity-find-one>
            <if condition="!classification">
                <return message="Not a valid classificationId: ${classificationId}" />
            </if>
            <!-- create account, not active when no login provided -->
            <set field="disabled" value="N" />
            <if condition="!user.loginName">
                <set field="disabled" value="Y" />
                <set field="loginName" from="user.email" />
                <else>
                    <set field="loginName" from="user.loginName" />
                </else>
            </if>
            <if condition="!newPassword">
                <set field="newPassword"
                    from="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            </if>
            <set field="newPasswordVerify" from="newPassword" />
            <!-- role -->
            <if
                condition="user.userGroupId == 'GROWERP_M_LEAD' ||
                        user.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer" />
                <else-if condition="user.userGroupId == 'GROWERP_M_SUPPLIER'">
                    <set field="roleTypeId" value="Supplier" />
                </else-if>
                <else>
                    <return message="Not a valid userGroupId: ${user.userGroupId}" />
                </else>
            </if>
            <!-- create account-->
            <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                in-map="[ownerPartyId: companyParty.ownerPartyId, seqName: 'party']"
                out-map="context" />

            <service-call name="mantle.party.PartyServices.create#Account"
                in-map="context + [roleTypeId: roleTypeId, loginAfterCreate: false,
                            pseudoId: seqNum,
                            firstName: user.firstName, lastName: user.lastName,
                            username: loginName, roleTypeId: roleTypeId,
                            ownerPartyId: companyParty.ownerPartyId,
                            emailAddress: user.email, disabled: disabled]"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId" />
            <!-- provide security -->
            <service-call name="create#moqui.security.UserGroupMember"
                in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
            <!-- only send email when login name provided -->
            <if condition="user.email">
                <entity-find-one entity-name="moqui.basic.email.EmailServer"
                    value-field="emailExist">
                    <field-map field-name="emailServerId" value="SYSTEM" />
                </entity-find-one>
                <if condition="emailExist &amp;&amp; emailExist.mailPassword != 'SMTP_PASSWORD'">
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                        async="true">
                        <field-map field-name="emailTemplateId" value="WELCOME" />
                        <field-map field-name="toAddresses" from="user.email" />
                        <field-map field-name="bodyParameters"
                            from="[classification: classificationId.substring(3),
                                    newPassword:newPassword, firstName: user.firstName,
                                    lastName: user.lastName]" />
                    </service-call>
                    <else>
                        <log level="warn"
                            message="====== Email not configured, ${user.loginName} password: $newPassword" />
                    </else>
                </if>
            </if>
            <!-- return all user info -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[ownerPartyId: companyParty.partyId,userPartyId: userAccount.partyId]"
                out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="customerInfo" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="register" noun="User" authenticate="anonymous-all">
        <description>Register a new user on the system externally, when 
                    no existing main company and admin is provided will 
                    -- also create a root owner party
                    -- and give the role of administrator
                    -- always send password and logout.
                when this user logs in, company info is requested </description>
        <in-parameters>
            <parameter name="classificationId" />
            <parameter name="firstName" required="true" />
            <parameter name="lastName" required="true" />
            <parameter name="email" required="true" />
            <parameter name="companyPartyId" /><!-- if empty create new owner when admin -->
            <parameter name="newPassword"
                default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <!-- if userGroup == admin group, root company will be created,   
                when not, owner (main) company partyId should already exist -->
            <parameter name="userGroupId" />
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate" type="Map">
                <parameter name="ownerPartyId" />
                <parameter name="classificationId" />
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="url" />
                    <parameter name="loginName" />
                    <parameter name="userGroup" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="userGroupId" />
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- check input parameters because anonymous access -->
            <if condition="companyPartyId">
                <!-- check if a 'main' company -->
                <entity-find-one entity-name="growerp.party.CompanyPreferenceAndRole"
                    value-field="party">
                    <field-map field-name="partyId" from="companyPartyId" />
                    <field-map field-name="roleTypeId" value="OrgInternal" />
                </entity-find-one>
                <if condition="!party">
                    <return error="true" message="Not a valid companyPartyId: $companyPartyId" />
                </if>
                <!-- get related owner -->
                <entity-find entity-name="mantle.party.Party" list="parties">
                    <econdition field-name="partyId" from="companyPartyId" />
                </entity-find>
                <if condition="parties">
                    <set field="ownerPartyId" from="parties[0].ownerPartyId" />
                </if>
            </if>
            <!-- check classification -->
            <entity-find-one entity-name="mantle.party.PartyClassification"
                value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId" />
            </entity-find-one>
            <if condition="!classification">
                <return message="Not a valid classificationId: ${classificationId}" />
            </if>
            <if condition="!companyPartyId &amp;&amp; userGroupId == 'GROWERP_M_ADMIN'">
                <then>
                    <!--  check if new system; if yes: create GrowERP root-->
                    <entity-find entity-name="moqui.entity.SequenceValueItem"
                        list="systemExist" limit="1">
                        <econdition field-name="seqName" value="GROWERP-party" />
                    </entity-find>
                    <if condition="systemExist">
                        <!-- create root to disable first, when logged in will be activated -->
                        <service-call name="create#mantle.party.Party"
                            in-map="[partyTypeEnumId: 'PtyOwner', disabled: 'Y']"
                            out-map="owner" />
                        <set field="ownerPartyId" from="owner.partyId" />
                        <else>
                            <!-- party already created in growerp setup data-->
                            <set field="ownerPartyId" value="GROWERP" />
                        </else>
                    </if>
                    <!-- create user / temp main company -->
                    <set field="user"
                        from="[ userGroupId: 'GROWERP_M_ADMIN',
                                role: 'OrgInternal',
                                email: email,
                                firstName: firstName,
                                lastName: lastName,
                                loginName: email,
                                company: [name: 'main Organization',
                                          role: 'OrgInternal',
                                          email: email]]" />
                    <service-call name="growerp.100.PartyServices100.create#User"
                        in-map="[user: user, 
                                password: newPassword, ownerPartyId: ownerPartyId,
                                classificationId: classificationId]"
                        out-map="context" />
                    <!-- create event -->
                    <service-call name="growerp.100.ActivityServices100.create#Event"
                        in-map="[partyId: user.partyId, userGroupId: 'GROWERP_M_SYSTEM',
                                name: 'New admin &amp; root user']" />
                </then>
                <else-if condition="companyPartyId">
                    <!-- new user registration of a user within an existing owner-->
                    <!-- createUser -->
                    <set field="company" from="[partyId: companyPartyId]" />
                    <service-call name="growerp.100.PartyServices100.create#User"
                        in-map="[user: [firstName: firstName, lastName: lastName,
                        email: email, role: 'Customer', userGroupId: 'GROWERP_M_OTHER',
                        loginName: email, company:company], password: newPassword, ownerPartyId: ownerPartyId,
                        classificationId: classificationId]"
                        out-map="context" />
                </else-if>
                <else>
                    <return />
                </else>
            </if>
            <!-- add to mailing list -->
            <service-call name="growerp.100.BirdSendServices100.registerAdd#UserToGroup"
                in-map="email: email, firstName: firstName,
                            lastName: lastName" />

            <set field="authenticate"
                from="[ ownerPartyId: ownerPartyId,
                        user: user,                       
                        classificationId: classificationId,
                    ]" />
        </actions>
    </service>
    <service verb="setup" noun="MainOrganization">
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="userPartyId" required="true" />
            <parameter name="companyPartyId" />
            <parameter name="classificationId" required="true" />
            <parameter name="hostName" />
        </in-parameters>
        <out-parameters>
            <parameter name="productStore" />
            <parameter name="partyClassification" />
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.Organization" value-field="company">
                <field-map field-name="partyId" from="companyPartyId" />
            </entity-find-one>
            <entity-find-one entity-name="mantle.facility.Facility" value-field="facility">
                <field-map field-name="facilityId" value="DEFAULT_WH" />
            </entity-find-one>
            <service-call name="create#mantle.facility.Facility"
                in-map="facility + [
                        pseudoId: null,
                        facilityId: null,
                        ownerPartyId: companyPartyId,
                        facilityName: company.organizationName + ' Inventory']"
                out-map="context" />

            <!-- create top resource for this company  linkedto
                        wikiSpace and productStore to organizationPartyId-->
            <service-call name="create#moqui.resource.DbResource"
                in-map="[isFile: 'N']"
                out-map="topResource" />
            <service-call name="update#moqui.resource.DbResource"
                in-map="[resourceId: topResource.resourceId,
                                filename: topResource.resourceId]" />

            <!-- create wiki space -->
            <entity-find-one entity-name="moqui.resource.wiki.WikiSpace" value-field="wikiSpace">
                <field-map field-name="wikiSpaceId" value="DEFAULT_WS" />
            </entity-find-one>
            <service-call name="create#moqui.resource.wiki.WikiSpace"
                in-map="wikiSpace + [wikiSpaceId: null,
                    rootPageLocation: wikiSpace.rootPageLocation.replace('DEFAULT_ROOT', topResource.resourceId)]"
                out-map="context" />

            <!-- wikipages and connect to data resource wikipageId = dbResourceId not use for
                now-->
            <entity-find entity-name="moqui.resource.wiki.WikiPage" list="pages">
                <econdition field-name="wikiSpaceId" value="DEFAULT_WS" />
            </entity-find>
            <iterate list="pages" entry="page">
                <service-call name="create#moqui.resource.wiki.WikiPage"
                    in-map="page + [wikiSpaceId: wikiSpaceId,
                                wikiPageId: null]" />
            </iterate>

            <!-- get currency -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                value-field="aPref">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <!-- create productStore from default -->
            <entity-find-one entity-name="mantle.product.store.ProductStore"
                value-field="defProductStore">
                <field-map field-name="productStoreId" value="POPC_DEFAULT" />
            </entity-find-one>
            <!-- create map for productStore -->
            <set field="inMap"
                from="defProductStore + [
                    productStoreId: null,
                    organizationPartyId: companyPartyId,
                    inventoryFacilityId: facilityId,
                    storeName: company.organizationName,
                    defaultCurrencyUomId: aPref.baseCurrencyUomId,
                    wikiSpaceId: wikiSpaceId,
                    ]" />
            <if condition="classificationId == 'AppAdmin'">
                <set field="inMap"
                    from="inMap + [
                    requireInventory: 'N',
                    reservationOrderEnumId:'AsResOrdNoRes',
                    ]" />
            </if>
            <if condition="classificationId == 'AppHotel'">
                <set field="inMap"
                    from="inMap + [
                    requireInventory: 'N',
                    reservationOrderEnumId:'AsResOrdNoRes',
                    ]" />
            </if>
            <service-call name="create#mantle.product.store.ProductStore"
                out-map="context" in-map="inMap" />
            <!-- store shipping options -->
            <entity-find entity-name="mantle.product.store.ProductStoreShipOption"
                list="options">
                <econdition field-name="productStoreId" value="POPC_DEFAULT" />
            </entity-find>
            <iterate list="options" entry="option">
                <service-call name="create#mantle.product.store.ProductStoreShipOption"
                    in-map="option + [productStoreId: productStoreId]" />
            </iterate>

            <!-- store gateway -->
            <entity-find entity-name="mantle.product.store.ProductStorePaymentGateway"
                list="gateways">
                <econdition field-name="productStoreId" value="POPC_DEFAULT" />
            </entity-find>
            <iterate list="gateways" entry="gateway">
                <service-call name="create#mantle.product.store.ProductStorePaymentGateway"
                    in-map="[productStoreId: productStoreId,
                        paymentInstrumentEnumId: gateway.paymentInstrumentEnumId,
                        paymentGatewayConfigId: gateway.paymentGatewayConfigId]" />
            </iterate>

            <!-- disable autoapprove sales orders for now because not generating shipping note -->
            <!--entity-delete-by-condition
            entity-name="moqui.service.job.ServiceJob">
                <econdition field-name="jobName" value="autoApprove_OrdersDelayed" />
            </entity-delete-by-condition>
            <service-call
            name="create#mantle.product.store.ProductStoreSetting"
                in-map="productStoreId: productStoreId, settingTypeEnumId: 'PsstOrdApproveNewCust',
                settingValue: false" />
            <service-call name="create#mantle.product.store.ProductStoreSetting"
                in-map="productStoreId: productStoreId, settingTypeEnumId: 'PsstOrdApproveAddrMissing',
                settingValue: false" />
            <service-call name="create#mantle.product.store.ProductStoreSetting"
                in-map="productStoreId: productStoreId, settingTypeEnumId: 'PsstOrdApproveAddrNotValid',
                settingValue: false" />
            <service-call
            name="create#mantle.product.store.ProductStoreSetting"
                in-map="productStoreId: productStoreId, settingTypeEnumId: 'PsstOrdApprovePayMethNameDiff',
                settingValue: false" /-->

            <!-- update website settings-->
            <if condition="hostName == '10.0.2.2' || hostName == '127.0.0.1'">
                <set field="hostName" value="localhost" />
            </if>
            <if condition="hostName == 'localhost'">
                <set field="hostName" value="localhost:8080" />
            </if>
            <if condition="hostName.indexOf('.', hostName.indexOf('.') + 1) != -1"><!-- two
                    dots? -->
                <set field="hostName" from="hostName.substring(hostName.indexOf('.')+1)" />
            </if>
            <set field="hostName" value="${productStoreId}.${hostName}" />
            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="stores">
                <econdition field-name="productStoreId" value="POPC_DEFAULT" />
            </entity-find>
            <iterate list="stores" entry="store">
                <service-call name="create#mantle.product.store.ProductStoreSetting"
                    in-map="store + [ productStoreId: productStoreId,
                        settingValue: store.settingValue.replace('DEFAULT_ROOT',
                            topResource.resourceId).replace('localhost', hostName)]" />
            </iterate>

            <!-- create ecommerce website categories and root for popreststore -->
            <entity-find entity-name="mantle.product.category.ProductCategory"
                list="catgs">
                <econdition field-name="ownerPartyId" value="_NA_" />
            </entity-find>
            <!-- translate categoryId to store type and root catg-->
            <set field="typesList"
                from="[
                    'PopcAllProducts': ['PsctSearch','PsctPurchaseAllow','PsctViewAllow'],
                    'PopcDeals': ['PsctPromotions'],
                    'PopcNew': ['PsctNewProducts'],
                    'PopcFeatured': ['PsctFeatured'],
                    'PopcHome': ['PsctHomePage'],
                    'PopcBrowseRoot': ['PsctBrowseRoot'],
                    ]" />
            <iterate list="catgs" entry="catg">
                <!-- only do lowercase categoryId's connected to productStore-->
                <if condition="catg.productCategoryId == catg.productCategoryId.toUpperCase()">
                    <continue />
                </if>
                <if condition="catg.productCategoryId == 'PopcAllProducts'">
                    <set field="productCategoryTypeEnumId" value="PctRoot" /><!-- rootCatg -->
                    <else>
                        <set field="productCategoryTypeEnumId" value="PctCatalog" />
                    </else>
                </if>
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: 'system', seqName: 'category']"
                    out-map="context" />
                <service-call name="create#mantle.product.category.ProductCategory"
                    out-map="context"
                    in-map="catg + [pseudoId: seqNum,
                            productCategoryId: null,
                            ownerPartyId: ownerPartyId,
                            productCategoryTypeEnumId: productCategoryTypeEnumId,
                            ]" />
                <if condition="productCategoryTypeEnumId == 'PctRoot'">
                    <set field="rootProductCategoryId" from="productCategoryId" />
                </if>
                <set field="types" from="typesList[catg.productCategoryId]" />
                <!-- connect to product store -->
                <iterate list="types" entry="type">
                    <service-call name="create#mantle.product.store.ProductStoreCategory"
                        in-map="[productStoreId: productStoreId,
                            productCategoryId: productCategoryId,
                            storeCategoryTypeEnumId: type ]" />
                </iterate>
            </iterate>
            <!-- DBResources just 2 dependent levels-->
            <entity-find entity-name="moqui.resource.DbResource" list="resources1">
                <econdition field-name="parentResourceId" value="DEFAULT_ROOT" />
            </entity-find>
            <iterate list="resources1" entry="resource1">
                <service-call name="create#moqui.resource.DbResource"
                    in-map="resource1 + [resourceId: null,
                                parentResourceId: topResource.resourceId]"
                    out-map="newResource1" />
                <if condition="resource1.isFile == 'Y'">
                    <entity-find-one entity-name="moqui.resource.DbResourceFile"
                        value-field="rFile">
                        <field-map field-name="resourceId" from="resource1.resourceId" />
                    </entity-find-one>
                    <service-call name="create#moqui.resource.DbResourceFile"
                        in-map="rFile + [resourceId: newResource1.resourceId]" />
                    <entity-find entity-name="moqui.resource.DbResourceFileHistory"
                        list="histories">
                        <econdition field-name="resourceId" from="resource1.resourceId" />
                    </entity-find>
                    <iterate list="histories" entry="history">
                        <service-call name="create#moqui.resource.DbResourceFileHistory"
                            in-map="history + [resourceId: newResource1.resourceId]" />
                    </iterate>
                </if>
                <entity-find entity-name="moqui.resource.DbResource" list="resources2">
                    <econdition field-name="parentResourceId" from="resource1.resourceId" />
                </entity-find>
                <iterate list="resources2" entry="resource2">
                    <service-call name="create#moqui.resource.DbResource"
                        in-map="resource2 + [resourceId: null, 
                                    parentResourceId: newResource1.resourceId]"
                        out-map="newResource2" />
                    <if condition="resource2.isFile == 'Y'">
                        <entity-find-one entity-name="moqui.resource.DbResourceFile"
                            value-field="rFile">
                            <field-map field-name="resourceId" from="resource2.resourceId" />
                        </entity-find-one>
                        <service-call name="create#moqui.resource.DbResourceFile"
                            in-map="rFile + [resourceId: newResource2.resourceId]" />
                        <entity-find entity-name="moqui.resource.DbResourceFileHistory"
                            list="histories">
                            <econdition field-name="resourceId" from="resource2.resourceId" />
                        </entity-find>
                        <iterate list="histories" entry="history">
                            <service-call name="create#moqui.resource.DbResourceFileHistory"
                                in-map="history + [resourceId: newResource2.resourceId]" />
                        </iterate>
                    </if>
                </iterate>
            </iterate>

            <!-- productStore images -->
            <entity-find entity-name="growerp.store.ProductStoreContent" list="storeImages">
                <econdition field-name="productStoreId" value="POPC_DEFAULT" />
            </entity-find>
            <iterate list="storeImages" entry="image">
                <service-call name="create#growerp.store.ProductStoreContent"
                    in-map="image + [productStoreContentId: null, productStoreId: productStoreId]" />
            </iterate>

            <!-- search function -->
            <!--service-call
                name="org.moqui.impl.EntityServices.clone#DataDocument"
                    in-map="[dataDocumentId: 'MantleProduct', newDataDocumentId: 'P' + productStoreId,
                                newIndexName: 'i' + productStoreId]" />
                <service-call name="create#moqui.entity.document.DataDocumentCondition"
                    in-map="[dataDocumentId: 'P' + productStoreId, conditionSeqId: '01',
                        fieldNameAlias: 'productStoreId', fieldValue: productStoreId, postQuery: 'Y']" />
                <service-call name="create#moqui.entity.feed.DataFeedDocument"
                    in-map="[dataFeedId: 'PopCommerceSearch', dataDocumentId: 'P' + productStoreId]" /-->

            <!-- add to productStore-->
            <!--service-call
                name="update#mantle.product.store.ProductStore"
                    in-map="productStoreId: productStoreId, productDataDocumentId: 'P' + productStoreId" /-->
            <!-- index documents (copied from -->
            <!--entity-find
                entity-name="moqui.entity.feed.DataFeedDocument" list="dfDocList"
                    cache="false">
                    <econdition field-name="dataFeedId" value="PopCommerceSearch" />
                    <econdition field-name="dataDocumentId" value="P$productStoreId" />
                </entity-find>

                <if condition="!dfDocList">
                    <return error="true"
                        message="No DataDocuments found for DataFeed ID ${dataFeedId}${dataDocumentId ? ' and DataDocument
                ID ' + dataDocumentId : ''}" />
                </if>

                <set field="documentsIndexed" from="0" /-->
            <!--script><![CDATA[
                    import org.moqui.context.ExecutionContext
                    import java.util.concurrent.Future

                    ExecutionContext ec = context.ec
                    def elasticClient = ec.factory.elastic.getClient(clusterName)
                    if (elasticClient == null) {
                        ec.message.addMessage("No Elastic Client found for cluster name ${clusterName}, not indexing
                documents", "danger")
                        return
                    }
                    String feedReceiveServiceName = df.feedReceiveServiceName ?:
                'org.moqui.search.SearchServices.index#DataDocuments'

                    for (Map dfDoc in dfDocList) {
                        // make sure the index exists
                        Map dataDocument = ec.entity.fastFindOne("moqui.entity.document.DataDocument", true, false,
                dfDoc.dataDocumentId)
                        if (dataDocument?.indexName) elasticClient.checkCreateDataDocumentIndexes((String)
                dataDocument.indexName)

                        int docListSize = ec.entity.entityDataDocument.feedDataDocuments(dfDoc.dataDocumentId, null,
                                fromUpdateStamp, thruUpdatedStamp, feedReceiveServiceName, batchSize)
                        documentsIndexed += docListSize
                    }
                ]]></script-->

            <!--message>Indexed
            ${documentsIndexed} documents for feed ${dataFeedId} in ${System.currentTimeMillis() -
            startTime}ms</message-->
        </actions>
    </service>

    <service verb="setup" noun="SpecificApp">
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="userPartyId" required="true" />
            <parameter name="companyPartyId" />
            <parameter name="classificationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="partyClassification" />
        </out-parameters>
        <actions>
            <!-- check for specific classification application-->
            <entity-find-one entity-name="mantle.party.PartyClassificationAndAppl"
                value-field="partyClassification">
                <field-map field-name="partyId" from="userPartyId" />
                <field-map field-name="partyClassificationId" from="classificationId" />
                <field-map field-name="classificationTypeEnumId" value="PcltMobileApp" />
            </entity-find-one>

            <!-- hotel app not using categories but need one for products -->
            <if condition="!partyClassification">
                <if condition="classificationId == 'AppHotel'">
                    <entity-find entity-name="mantle.product.category.ProductCategory"
                        list="rootList">
                        <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                        <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    </entity-find>
                    <if condition="!rootList">
                        <return error="true"
                            message="Root category not found for ownerPartyId: $ownerPartyId" />
                    </if>
                    <set field="rootProductCategoryId" from="rootList[0].productCategoryId" />
                    <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                        in-map="[ownerPartyId: 'system', seqName: 'category']"
                        out-map="context" />
                    <service-call name="create#mantle.product.category.ProductCategory"
                        in-map="[categoryName: 'rooms', pseudoId: seqNum,
                            description: 'Dummy category to connect the room types',
                            productCategoryTypeEnumId: 'PctCatalog',
                            ownerPartyId: ownerPartyId]"
                        out-map="context" />
                    <service-call
                        name="create#mantle.product.category.ProductCategoryRollup"
                        in-map="[parentProductCategoryId: rootProductCategoryId,
                            productCategoryId: productCategoryId]" />
                </if>

                <!-- any other specific app setup here -->

            </if>
        </actions>
    </service>

    <!-- internal service used in register to run async-->
    <service verb="load" noun="DemoData" transaction-timeout="3600">
        <description>
        General setup of demo data independent of specfic app demo data which is 
        done in the setup#specific service
        </description>
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="companyPartyId" required="true" />
            <parameter name="userPartyId" required="true" />
            <parameter name="currencyId" />
            <parameter name="classificationId" />
            <parameter name="counterMax" default="1" type="Integer" />
        </in-parameters>
        <actions>
            <!-- get single productStore/website for main company -->
            <entity-find-one entity-name="mantle.product.store.ProductStore"
                value-field="productStore">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <if condition="!productStore">
                <return error="true"
                    message="Could not find a product store for company: ${companyPartyId}" />
            </if>
            <set field="productStoreId" from="productStore.productStoreId" />
            <set field="facilityId" from="productStore.inventoryFacilityId" />

            <!-- get root (browse) category -->
            <entity-find entity-name="mantle.product.store.ProductStoreCategory"
                list="browseRootList">
                <econdition field-name="storeCategoryTypeEnumId" value="PsctBrowseRoot" />
                <econdition field-name="productStoreId" from="productStoreId" />
            </entity-find>
            <if condition="!browseRootList">
                <return error="true"
                    message="Root browse category not found for productStoreId: $productStoreId of companyId: $companyPartyId" />
            </if>
            <set field="browseRootProductCategoryId" from="browseRootList[0].productCategoryId" />
            <!-- root category -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!rootList">
                <return error="true"
                    message="Root category not found for ownerPartyId: $ownerPartyId" />
            </if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId" />

            <set field="companyCount" from="companyPartyId.substring(3,6)" />

            <set field="users"
                from="[
                [ firstName: 'James-a', lastName: 'Smith', emailAddress: 'james@example.com',
                    locale: 'EN', username: '@@james', userGroupId: 'GROWERP_M_ADMIN' ,
                    image: 'demoFaces/1_m.jpg', role: 'OrgInternal',
                    address: [address1: 'history lane 1',postalCode: '12345',
                            city: 'Bangkok', country: 'Thailand']],
                [ firstName: 'John-e', lastName: 'Williams', emailAddress: 'john@example.com',
                    locale: 'EN', username: '@@john', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/2_m.jpg' ,role: 'OrgInternal',
                    address: [address1: 'history lane 2',postalCode: '12345',
                            city: 'Bangkok', country: 'Netherlands']],
                [ firstName: 'Robert-c', lastName: 'Johnson', emailAddress: 'robert@example.com',
                    locale: 'EN', username: '@@robert', role: 'Customer',
                    image: 'demoFaces/3_m.jpg', companyName: 'Trust Fund-c',
                    address: [address1: 'history lane 1',postalCode: '12345',
                            city: 'Bangkok', country: 'Thailand']],
                [ firstName: 'Michael-l', lastName: 'Brown',
                    locale: 'EN', username: '@@michael', role: 'Lead',
                    image: 'demoFaces/4_m.jpg', companyName: 'Academic Advantage-l'],
                [ firstName: 'William-s', lastName: 'Jones',
                    locale: 'EN', username: '@@william', role: 'Supplier',
                    image: 'demoFaces/5_m.jpg', companyName: 'Gables Tutoring And Test Prep-s',
                    address: [address1: 'history lane 5',postalCode: '12345',
                            city: 'Bangkok', country: 'Belgium']],
                [ firstName: 'David-a', lastName: 'Miller', emailAddress: 'david@example.com',
                    locale: 'EN', image: 'demoFaces/6_m.jpg', role: 'OrgInternal'],
                [ firstName: 'Mary-e', lastName: 'Davis', emailAddress: 'Mary@example.com',
                    locale: 'EN', image: 'demoFaces/1_f.jpg',  role: 'OrgInternal' ],
                [ firstName: 'Linda-c', lastName: 'Garcia',  role: 'Customer',
                    locale: 'EN', image: 'demoFaces/2_f.jpg'],
                [ firstName: 'Barbara-l', lastName: 'Rodriguez', role: 'Lead',
                    locale: 'EN', image: 'demoFaces/3_f.jpg', companyName: 'TestMasters-l'],
                [ firstName: 'Maria-s', lastName: 'Wilson',  role: 'Supplier',
                    locale: 'EN', image: 'demoFaces/4_f.jpg', companyName: 'Wavelength Suppliers-s'],
            ]" />

            <set field="opportunities"
                from="[
                [ opportunityName: 'The best opportunity', description: 'the best oppr description',
                    nextStep: 'not sure yet', estAmount: 1000, estProbability: 33,
                    opportunityStageId: 'Prospecting'],
                [ opportunityName: 'The second best opportunity', description: 'the secondbest oppr description',
                    nextStep: 'not sure yet', estAmount: 5000, estProbability: 66,
                    opportunityStageId: 'Proposal']
            ]" />

            <set field="nowDate" from="ec.user.nowTimestamp" />
            <set field="counter" value="0" type="Integer" />
            <while condition="counter++ &lt; counterMax">

                <!-- admin products  and categories -->
                <!-- product/categories for admin are taken from the poprest store and are stored
                under the owner _NA_
                    at initial load time -->
                <!-- uppercase categories are demo, lowercase category id's should be connected to
                the current rootcategory -->

                <!-- copy demo categories -->
                <set field="catgTrans" from="[:]" />
                <set field="prodTrans" from="[:]" />
                <entity-find entity-name="mantle.product.category.ProductCategory"
                    list="categories">
                    <econdition field-name="ownerPartyId" value="_NA_" />
                </entity-find>
                <set field="sequenceNum" value="1" type="Integer" />
                <iterate list="categories" entry="category">
                    <if
                        condition="category.productCategoryId.toUpperCase() != category.productCategoryId">
                        <continue />
                    </if>
                    <!-- create category -->
                    <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                        in-map="[ownerPartyId: ownerPartyId, seqName: 'category']"
                        out-map="context" />
                    <service-call name="create#mantle.product.category.ProductCategory"
                        in-map="category + [pseudoId: seqNum, productCategoryId: null,
                                                ownerPartyId: ownerPartyId]"
                        out-map="context" />
                    <set field="catgTrans[category.productCategoryId]" from="productCategoryId" />
                    <!-- connect to root -->
                    <service-call
                        name="create#mantle.product.category.ProductCategoryRollup"
                        in-map="[parentProductCategoryId: rootProductCategoryId,
                                    productCategoryId: productCategoryId]" />
                    <!-- and ecommerce browseRoot -->
                    <service-call
                        name="create#mantle.product.category.ProductCategoryRollup"
                        in-map="[parentProductCategoryId: browseRootProductCategoryId,
                                    productCategoryId: productCategoryId,
                                    sequenceNum: sequenceNum++]" />
                </iterate>
                <!-- create translation table for categories-->
                <entity-find entity-name="mantle.product.category.ProductCategory"
                    list="categories">
                    <econdition field-name="ownerPartyId" value="_NA_" />
                </entity-find>
                <iterate list="categories" entry="category">
                    <entity-find entity-name="mantle.product.category.ProductCategory"
                        list="localProductCategories">
                        <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        <econdition field-name="categoryName" from="category.categoryName" />
                    </entity-find>
                    <set field="catgTrans[category.productCategoryId]"
                        from="localProductCategories[0].productCategoryId" />
                </iterate>
                <!-- create product -->
                <if condition="classificationId == 'AppHotel'">
                    <set field="productType" value="PtFixedAssetUse" />
                </if>
                <entity-find entity-name="mantle.product.Product" list="products">
                    <econdition field-name="ownerPartyId" value="_NA_" />
                    <econdition field-name="productTypeEnumId" from="productType"
                        ignore-if-empty="true" />
                </entity-find>
                <!-- get currency -->
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="aPref">
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                </entity-find-one>
                <iterate list="products" entry="product">
                    <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                        in-map="[ownerPartyId: ownerPartyId, seqName: 'product']"
                        out-map="context" />
                    <service-call name="create#mantle.product.Product"
                        in-map="product + [productId: null, pseudoId: seqNum,
                                    ownerPartyId: ownerPartyId]"
                        out-map="context" />
                    <set field="prodTrans[product.productId]" from="productId" />
                    <!-- content -->
                    <entity-find entity-name="mantle.product.ProductContent"
                        list="prodContents">
                        <econdition field-name="productId" from="product.productId" />
                    </entity-find>
                    <iterate list="prodContents" entry="prodContent">
                        <service-call name="create#mantle.product.ProductContent"
                            in-map="prodContent + [productContentId: null, productId: productId]" />
                    </iterate>
                    <!-- price adjust currency -->
                    <entity-find entity-name="mantle.product.ProductPrice" list="prodPrices">
                        <econdition field-name="productId" from="product.productId" />
                    </entity-find>
                    <iterate list="prodPrices" entry="prodPrice">
                        <service-call name="create#mantle.product.ProductPrice"
                            in-map="prodPrice + [ priceUomId: currencyId, 
                                        productId: productId, productPriceId: null]" />
                    </iterate>
                    <!-- attach product to categories -->
                    <entity-find entity-name="mantle.product.category.ProductCategoryMember"
                        list="members">
                        <econdition field-name="productId" from="product.productId" />
                    </entity-find>
                    <iterate list="members" entry="member">
                        <set field="newProductId" from="prodTrans[product.productId]" />
                        <set field="newCategoryId" from="catgTrans[member.productCategoryId]" />
                        <service-call
                            name="create#mantle.product.category.ProductCategoryMember"
                            in-map="member + [productId: newProductId,
                                            productCategoryId: newCategoryId]" />
                    </iterate>
                    <!-- create related assets -->
                    <entity-find entity-name="mantle.product.asset.Asset" list="assets">
                        <econdition field-name="productId" from="product.productId" />
                        <econdition field-name="ownerPartyId" value="_NA_" />
                    </entity-find>
                    <iterate list="assets" entry="asset">
                        <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                            in-map="[ownerPartyId: ownerPartyId, seqName: 'asset']"
                            out-map="context" />
                        <service-call name="create#mantle.product.asset.Asset"
                            in-map="[asset + [assetId: null, assetPseudoId: seqNum,
                                            productId: productId,
                                            ownerPartyId: companyPartyId,
                                            facilityId: facilityId,
                                            ]]"
                            out-map="context" />
                        <entity-find entity-name="mantle.product.asset.AssetDetail"
                            list="assetDetails">
                            <econdition field-name="assetId" from="asset.assetId" />
                        </entity-find>
                        <service-call name="create#mantle.product.asset.AssetDetail"
                            in-map="[assetDetails[0] + [assetDetailId: null, assetId: assetId]]" />
                    </iterate>
                </iterate>

                <set field="dbLeads" from="[]" />
                <set field="dbEmployees" from="[]" />
                <iterate list="users" entry="us">
                    <if condition="us.companyName">
                        <set field="company"
                            from="[name: us.companyName, role: us.role, address: us.address]" />
                    </if>
                    <set field="userIn"
                        from="[
                            pseudoId: lastname,
                            firstName: us.firstName,
                            lastName: us.lastName + counter,
                            email: us.emailAddress? us.emailAddress.substring(0,us.emailAddress.indexOf('@')) + counter + companyCount + us.emailAddress.substring(us.emailAddress.indexOf('@')) : null,
                            locale: 'EN',
                            loginName: us.userGroupId? us.username + counter + companyCount : null,
                            userGroupId: us.userGroupId ? us.userGroupId : null,
                            role: us.role,
                            company: company ,
                            address: us.address,
                            appsUsed: [classificationId],
                        ]" />
                    <service-call name="growerp.100.PartyServices100.create#User"
                        in-map="[user: userIn, ownerPartyId: ownerPartyId,
                                classificationId: classificationId]"
                        out-map="outMap" />
                    <script>
                            if(us.role == 'OrgInternal') dbEmployees.add(outMap)
                            if(us.role == 'Lead') dbLeads.add(outMap)
                        </script>
                </iterate>
                <!-- opportunities -->
                <set field="index" value="0" type="Integer" />
                <iterate list="opportunities" entry="opp">
                    <set field="employeeUser"
                        from="[partyId: index%2 == 0
                            ? dbEmployees[0].user.partyId : dbEmployees[1].user.partyId]" />
                    <set field="leadUser"
                        from="[partyId: index%2 == 0
                            ? dbLeads[0].user.partyId : dbLeads[1].user.partyId]" />
                    <set field="oppIn"
                        from="[
                            opportunityName: opp.opportunityName,
                            description: opp.description,
                            nextStep: opp.nextStep,
                            estAmount: opp.estAmount,
                            estProbability: opp.estProbability,
                            opportunityStageId: opp.opportunityStageId,
                            ownerPartyId: companyPartyId,
                            employeeUser: employeeUser,
                            leadUser: leadUser
                        ]" />
                    <service-call name="growerp.100.CrmServices100.create#Opportunity"
                        in-map="[opportunity: oppIn]" out-map="context" />
                    <set field="index" from="index + 1" />
                </iterate>

                <!-- create facility locations if not exist yet-->
                <entity-find entity-name="mantle.facility.FacilityLocation" list="locations">
                    <econdition field-name="facilityId" from="facilityId" />
                </entity-find>
                <if condition="!locations">
                    <entity-find entity-name="mantle.facility.FacilityLocation" list="locs">
                        <econdition field-name="facilityId" value="DEFAULT_WH" />
                    </entity-find>

                    <iterate list="locs" entry="loc">
                        <service-call name="create#mantle.facility.FacilityLocation"
                            in-map="loc + [facilityId: facilityId]" />
                    </iterate>
                </if>


                <!-- orders -->
                <set field="ordersAdmin"
                    from="[
                    [ quantity: 5, price: 22.1, orderName: 'first generated order', productName: 'Hoodie'],
                    [ quantity: 2, price: 20.1, orderName: 'first generated order', productName: 'Baseball'],
                    [ quantity: 4, price: 29.11, orderName: 'first generated order', productName: '32GB'],
                    [ quantity: 3, price: 12.1, orderName: 'second generated order', productName: 'Coffee'],
                    [ quantity: 1, price: 0.00, orderName: 'third generated order service',
                        productName: 'GrowERP demo movie', itemType: 'ItemServiceProduct'],
                    ]" />
                <!-- set time at mid day noon -->
                <set field="nowDate" from="ec.user.nowTimestamp" />
                <set field="nowDate"
                    from="ec.l10n.parseTimestamp(ec.l10n.format(nowDate, 'yyyy-MM-dd') + ' 12:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')" />
                <set field="ordersHotel"
                    from="[
                    [ productName: 'Single bed room', quantity: 1,
                        rentalFromDate: nowDate.plus(1), 
                        rentalThruDate: nowDate.plus(3), 
                        price: 90, orderName: 'first generated Hotel order'],
                    [ productName: 'Single bed room', quantity: 3,
                        rentalFromDate: nowDate.plus(4),
                        rentalThruDate: nowDate.plus(6), 
                        orderName: 'second generated Hotel order'],                    
                    [ productName: 'Standard room', quantity: 1,
                        rentalFromDate: nowDate.plus(17), quantity: 1,
                        rentalThruDate: nowDate.plus(18), 
                        price: 110, orderName: 'third generated Hotel order'],
                    [ productName: 'Deluxe room', quantity: 1,
                        rentalFromDate: nowDate.plus(20), quantity: 1,
                        rentalThruDate: nowDate.plus(21), 
                        price: 77, orderName: 'fourth generated Hotel order'],
                    [ productName: 'Deluxe room', quantity: 1, 
                        rentalFromDate: nowDate.plus(12), quantity: 1,
                        rentalThruDate: nowDate.plus(14), 
                            orderName: 'fifth generated Hotel order'],
                    ]" />

                <if condition="classificationId == 'AppAdmin'">
                    <set field="ordersIn" from="ordersAdmin" />
                </if>
                <if condition="classificationId == 'AppHotel'">
                    <set field="ordersIn" from="ordersHotel" />
                </if>
                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="customers">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyRole" value="Customer" />
                    <econdition field-name="customerStatusId" value="CUSTOMER_QUALIFIED" />
                </entity-find>
                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="suppliers">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyRole" value="Supplier" />
                </entity-find>

                <set field="index" type="Integer" value="0" />

                <iterate list="ordersIn" entry="order">
                    <entity-find entity-name="growerp.mobile.product.ProductAndCategoryAndPrices"
                        list="products" limit="1">
                        <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        <econdition field-name="productName" operator="like"
                            value="%${order.productName}%" />
                    </entity-find>

                    <set field="items" from="[]" />
                    <if condition="classificationId == 'AppHotel'">
                        <then>
                            <while condition="order.quantity--">
                                <set field="item"
                                    from="[
                                    itemType: [itemTypeId: 'ItemRental'],
                                    product: [productId: products[0].productId],
                                    price: order.price,
                                    rentalFromDate: order.rentalFromDate.toString(),
                                    rentalThruDate: order.rentalThruDate.toString(),
                                ]" />
                                <script>items.add(item)</script>
                            </while>
                        </then>
                        <else>
                            <set field="itemTypeId"
                                from="order.itemType ?: 'ItemProduct'" />
                            <set field="item"
                                from="[
                                    product: [productId: products[0].productId],
                                    itemType: [itemTypeId: itemTypeId],
                                    description: order.productName,
                                    unitAmount: order.price ?: products[0].price,
                                    quantity: order.quantity,
                                ]" />
                            <script>items.add(item)</script>
                        </else>
                    </if>
                    <set field="finDoc"
                        from="[
                            statusId: 'FinDocCreated',
                            docType: 'order',
                            sales: true,
                            currencyUomId: aPref.baseCurrencyUomId,
                            productStoreId: productStore.productStoreId,
                            otherCompany: [partyId: customers[index%2].companyPartyId],
                            items: items]" />
                    <service-call
                        name="growerp.100.FinDocServices100.create#FinDoc"
                        in-map="[finDoc: finDoc, classificationId: classificationId]"
                        out-map="context" />
                    <set field="index" from="index + 1" />
                </iterate>

                <!-- activities -->
                <set field="activities"
                    from="[
                    [ activityType: 'todo', activityName: 'The first activity' ],
                    [ activityType: 'todo', activityName: 'The second activity' ],
                    [ activityType: 'todo', activityName: 'The third activity' ],
                    [ activityType: 'todo', activityName: 'The fourth activity' ],
                    [ activityType: 'todo', activityName: 'The fifth activity' ]
                    ]" />

                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="employees">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyPartyId" from="companyPartyId" />
                    <econdition field-name="companyRole" value="OrgInternal" />
                </entity-find>
                <set field="index" value="0" type="Integer" />
                <iterate list="activities" entry="activity">
                    <!-- add activity -->
                    <set field="activityIn"
                        from="[activityType: activity.activityType,
                                activityName: activity.activityName,
                                originator: [partyId: userPartyId],
                                assignee: [partyId: userPartyId],
                                statusId: 'planning',
                    ]" />
                    <service-call name="growerp.100.ActivityServices100.createActivity"
                        in-map="[activity: activityIn]" out-map="context" />
                    <!-- time entry -->
                    <set field="teIn"
                        from="[
                            activityId: activity.activityId,
                            partyId: employees[0].personPartyId,
                            hours: index,
                            date: nowDate.plus(1),
                        ]" />
                    <service-call name="growerp.100.ActivityServices100.create#TimeEntry"
                        in-map="[timeEntry: teIn]" out-map="context" />
                    <set field="teIn"
                        from="[
                            activityId: activity.activityId,
                            partyId: ec.user.userAccount.partyId,
                            hours: index,
                            date: nowDate.plus(3),
                        ]" />
                    <service-call name="growerp.100.ActivityServices100.create#TimeEntry"
                        in-map="[timeEntry: teIn]" out-map="context" />
                    <set field="index" from="index + 1" />
                </iterate>
            </while>
        </actions>
    </service>

</services>
 