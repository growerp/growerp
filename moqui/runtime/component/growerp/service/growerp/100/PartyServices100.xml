<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="check" noun="Email">
        <description>Check if a particular email address exists of a party</description>
        <in-parameters>
            <parameter name="email" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ok" type="Boolean" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo"
                list="partyInfoList" distinct="true">
                <econdition field-name="infoString" from="email" ignore-case="true" />
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress" />
                <date-filter />
                <select-field field-name="partyId" />
                <select-field field-name="infoString" />
                <order-by field-name="fromDate DESC" />
            </entity-find>
            <set field="partyIds" from="[] as Set" />
            <!-- check if active -->
            <iterate list="partyInfoList" entry="partyInfo">
                <entity-find-count entity-name="mantle.party.Party" count-field="isDisabled">
                    <econdition field-name="partyId" from="partyInfo.partyId" />
                    <econdition field-name="disabled" value="Y" ignore-case="true" />
                </entity-find-count>
                <if condition="isDisabled==0">
                    <set field="partyIds" from="partyIds + [partyInfo.partyId]" />
                </if>
            </iterate>
            <if condition="!partyIds.isEmpty()">
                <set field="ok" value="true" type="Boolean" />
                <else>
                    <set field="ok" value="false" type="Boolean" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="check" noun="Company">
        <description>Check if a particular company (irrespective of owner) exists</description>
        <in-parameters>
            <parameter name="partyId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ok" />
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                <econdition field-name="partyId" from="partyId" />
            </entity-find>
            <if condition="parties">
                <set field="ok" value="ok" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="Companies">
        <description>Get a list of companies registered in the system</description>
        <in-parameters>
            <parameter name="mainCompanies" type="Boolean" default="true" />
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="filter" default="null" />
            <parameter name="searchString" default="null" />
        </in-parameters>
        <out-parameters>
            <parameter name="companies" type="List">
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="mainCompanies">
                <set field="roleTypeId" value="OrgInternal" />
                <else>
                    <set field="notRoleTypeId" value="OrgInternal" />
                </else>
            </if>
            <if condition="filter != null"><!-- only used when logged in -->
                <set field="filter" value="%${filter}%" />
                <set field="ownerPartyId" from="null" />
            </if>
            <entity-find list="parties" offset="start" limit="limit"
                entity-name="growerp.party.CompanyPreferenceAndRole">
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="organizationName" operator="like"
                    from="filter" ignore-if-empty="true" ignore-case="true" />
                <econdition field-name="roleTypeId" from="roleTypeId"
                    ignore-if-empty="true" />
                <econdition field-name="roleTypeId" from="notRoleTypeId"
                    operator="not-equals" ignore-if-empty="true" />
                <econdition field-name="disabled" operator="not-equals" value="Y"
                    or-null="true" />
                <econditions combine="or">
                    <econdition field-name="organizationName" from="searchString"
                        ignore-if-empty="true" ignore-case="true" />
                    <econdition field-name="partyId" from="searchString"
                        ignore-if-empty="true" />
                </econditions>
                <order-by field-name="organizationName" />
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <set field="currency"
                    from="[
                    currencyId: party.baseCurrencyUomId,
                    description: party.uomDescription]" />
                <set field="company"
                    from="[partyId: party.partyId,
                                pseudoId: party.pseudoId ?:'',
                                name: party.organizationName,
                                role: party.roleTypeId,
                                currency: party.baseCurrencyUomId == null ? null : currency,
                                vatPerc: party.vatPerc ? party.vatPerc.toString() : null,
                                salesPerc: party.salesPerc ? party.salesPerc.toString() : null]" />
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId" />
            <parameter name="firstName" />
            <parameter name="lastName" />
            <parameter name="companyName" />
            <parameter name="userPartyId" />
            <parameter name="role" />
            <parameter name="ownerPartyId" /><!-- required when registering company customers-->
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="filter" default="null" />
            <parameter name="searchString" default="null" />
            <parameter name="isForDropDown" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="companies" type="List">
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="currencyName" />
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="email" />
                    <parameter name="employees" type="List">
                        <parameter name="employee" type="Map">
                            <parameter name="partyId" />
                            <parameter name="email" />
                            <parameter name="firstName" />
                            <parameter name="lastName" />
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
            <parameter name="companyTelContactMechId" />
            <parameter name="companyEmailContactMechId" />
        </out-parameters>
        <actions>
            <set field="role" from="role?.capitalize()" />
            <if condition="filter != null">
                <set field="filter" value="%${filter}%" />
            </if>
            <if condition="searchString != null">
                <set field="search" value="%${searchString}%" />
            </if>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="!companyPartyId &amp;&amp; !searchString">
                <set field="disabled" value="N" />
            </if>
            <!-- adjust role -->
            <if condition="role">
                <if condition="role == 'Lead'">
                    <then>
                        <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                        <set field="companyRole" value="Customer" />
                    </then>
                    <else-if condition="role == 'Customer'">
                        <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
                        <set field="companyRole" from="role" />
                    </else-if>
                    <else-if condition="role != 'Company'">
                        <set field="companyRole" from="role" />
                    </else-if>
                </if>
            </if>
            <!-- get records -->
            <entity-find offset="start" limit="limit" list="items"
                entity-name="growerp.party.OwnerCompanyDetailAndEmployee">
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="companyPartyId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="companyPartyId" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true" />
                    <econdition field-name="lastName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true" />
                    <econdition field-name="firstName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true" />
                    <econdition field-name="companyName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true" />
                </econditions>
                <econditions combine="or">
                    <econdition field-name="companyPartyId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyEmail" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="personEmail" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <econdition field-name="companyRole" ignore-if-empty="true" />
                <econdition field-name="customerStatusId" ignore-if-empty="true" or-null="true" />
                <econditions combine="or">
                    <econdition field-name="ownerDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                    <econdition field-name="personDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                </econditions>
                <order-by field-name="companyName^,lastName^,firstName^" />
            </entity-find>
            <set field="companies" from="[]" />
            <set field="lastItem" from="null" />
            <set field="employees" from="[]" />
            <iterate list="items" entry="item">
                <!-- new item, so add last item to the list-->
                <if condition="lastItem &amp;&amp; lastItem.companyPartyId != item.companyPartyId">
                    <set field="company.employees" from="employees" />
                    <script>companies.add(company)</script>
                    <set field="employees" from="[]" />
                </if>
                <!-- first item -->
                <if condition="!lastItem || lastItem.companyPartyId != item.companyPartyId">
                    <if condition="item.postalContactMechId">
                        <set field="address"
                            from="[
                        addressId: item.postalContactMechId,
                        address1: item.address1,
                        address2: item.address2,
                        city: item.city,
                        postalCode: item.postalCode,
                        province: item.stateProvince,
                        provinceId: item.stateProvinceGeoId,
                        country: item.countryName,
                        countryId: item.countryId,
                        ]" />
                        <else>
                            <set field="address" from="null" />
                        </else>
                    </if>

                    <set field="paymentMethod" from="null" />
                    <if condition="item.paymentMethodId">
                        <set field="nrLength" from="item.cardNumber.length()" />
                        <set field="ccDescription"
                            value="${item.cardType}**********${item.cardNumber.substring(nrLength-4,nrLength)} ${item.expireDate}" />
                        <set field="paymentMethod"
                            from="[ ccPaymentMethodId: item.paymentMethodId,
                                    ccDescription: ccDescription]" />
                        <else>
                            <set field="paymentMethod" from="null" />
                        </else>
                    </if>
                    <set field="telephoneNr" from="null" />
                    <if condition="item.telContactNumber">
                        <set field="telephoneNr"
                            value="${item.telCountryCode?:''}${item.telAreaCode?:''}${item.telContactNumber?:''}" />
                    </if>
                    <set field="currency" from="null" />
                    <if condition="item.baseCurrencyUomId">
                        <set field="currency"
                            from="[
                                currencyId: item.baseCurrencyUomId,
                                description: item.curDescription]" />
                    </if>
                    <!-- image -->
                    <entity-find entity-name="mantle.party.PartyContent" list="contents">
                        <econdition field-name="partyId" from="item.companyPartyId" />
                        <econdition field-name="partyContentTypeEnumId"
                            from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                    </entity-find>
                    <if condition="contents">
                        <service-call name="growerp.100.ImageServices100.download#Image"
                            in-map="[contentLocation: contents[0].contentLocation]"
                            out-map="context" />
                        <else>
                            <set field="imageFile" from="null" />
                        </else>
                    </if>
                    <if condition="isForDropDown">
                        <set field="company"
                            from="[
                                partyId: item.companyPartyId,
                                pseudoId: item.companyPseudoId,
                                name: item.companyName,
                                ]" />
                        <else>
                            <set field="company"
                                from="[
                                    partyId: item.companyPartyId,
                                    pseudoId: item.companyPseudoId ?:'',
                                    name: item.companyName,
                                    role: item.companyRole == 'Customer' &amp;&amp; item.customerStatusId == 'CUSTOMER_ASSIGNED'? 'Lead': item.companyRole,
                                    email: item.companyEmail ?:'',
                                    currency: currency,
                                    image: imageFile,
                                    address: address,
                                    vatPerc: item.vatPerc?item.vatPerc.toString():'0',
                                    salesPerc: item.salesPerc?item.salesPerc.toString():'0',
                                    paymentMethod: paymentMethod,
                                    telephoneNr: telephoneNr ?: ''
                                    ]" />
                        </else>
                    </if>
                </if>
                <if condition="item.personPartyId">
                    <set field="person"
                        from="[
                        partyId: item.personPartyId,
                        firstName: item.firstName,
                        lastName: item.lastName,
                        email: item.personEmail
                        ]" />
                    <script>employees.add(person)</script>
                </if>
                <set field="lastItem" from="item" />
            </iterate>
            <if condition="lastItem">
                <if condition="!isForDropDown">
                    <set field="company.employees" from="employees" />
                </if>
                <script>companies.add(company)</script>
            </if>
            <if condition="items?.size() > 0">
                <set field="companyEmailContactMechId" from="items[0].companyEmailContactMechId" />
                <set field="companyTelContactMechId" from="items[0].companyTelContactMechId" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="Company">
        <description>
            create company information
        </description>
        <in-parameters>
            <parameter name="company" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" required="true" />
                <parameter name="role" required="true" />
                <parameter name="email" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="creditCardType" />
                    <parameter name="creditCardNumber" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="telephoneNr" />
            </parameter>
            <parameter name="ownerPartyId" /><!-- needed in initial registration -->
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="name" />
                <parameter name="email" />
                <parameter name="role" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="employees" type="List">
                    <parameter name="employee" type="Map">
                        <parameter name="partyId" />
                        <parameter name="email" />
                        <parameter name="firstName" />
                        <parameter name="lastName" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="relComp"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="!company.pseudoId">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[companyPartyId: relComp.ownerPartyId, seqName: 'company']" />
                <set field="company.pseudoId" from="seqNum" />
            </if>
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="company.role == 'Lead'">
                <set field="company.role" value="Customer" />
                <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                <else-if condition="company.role == 'Customer'">
                    <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
                </else-if>
            </if>
            <service-call
                name="mantle.party.PartyServices.create#Organization"
                out-map="context"
                in-map="[organizationName: company.name,
                        pseudoId: company.pseudoId,
                        ownerPartyId: ownerPartyId,
                        roleTypeId: company.role,
                        customerStatusId: customerStatusId,
                        disabled: 'N']" />
            <!-- company to owner relationship -->
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[fromPartyId: partyId, 
                    fromRoleTypeId: company.role,
                    relationshipTypeEnumId: 'PrtOrgRollup',
                    fromDate: ec.user.nowTimestamp,
                    toPartyId: ownerPartyId,
                    toRoleTypeId: 'Owner']" />

            <!-- currency -->
            <if condition="company.currency">
                <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                    in-map="[organizationPartyId: partyId,
                                    baseCurrencyUomId: company.currency?.currencyId]" />
            </if>

            <!-- company email -->
            <if condition="company.email">
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[emailAddress: company.email,
                            partyId: partyId,
                            contactMechPurposeId:'EmailPrimary']" />
            </if>

            <!-- address -->
            <if condition="company.address">
                <if condition="company.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="company.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="company.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="company.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <service-call name="mantle.party.ContactServices.create#PostalAddress"
                    in-map="[partyId: partyId, contactMechPurposeId: 'PostalPrimary', 
                            address1: company.address.address1,
                            address2: company.address.address2,
                            city: company.address.city,
                            postalCode: company.address.postalCode,
                            stateProvince: company.address.province,
                            stateProvinceGeoId: stateProvinceGeoId, 
                            countryGeoId: countryGeoId]"
                    out-map="resultAddress" />

                <!-- payment only possible if address provided -->
                <if condition="company.paymentMethod?.creditCardNumber">
                    <set field="expireDate"
                        value="${company.paymentMethod.expireMonth}/${company.paymentMethod.expireYear}" />
                    <set field="inMap"
                        from="[
                        ownerPartyId: partyId,
                        cardNumber: company.paymentMethod.creditCardNumber,
                        creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                            .condition('description', company.paymentMethod.creditCardType).one().enumId,
                        expireDate: expireDate,
                        postalContactMechId: resultAddress.contactMechId,
                        firstNameOnAccount: 'company',
                        lastNameOnAccount: company.name,
                        paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                    ]" />
                    <service-call
                        name="mantle.account.PaymentMethodServices.create#CreditCard"
                        in-map="inMap" />
                </if>
            </if>
            <!-- telephone -->
            <if condition="company.telephoneNr">
                <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                    in-map="[
                        contactMechPurposeId: 'PhonePrimary',
                        contactNumber: company.telephoneNr,
                        partyId: partyId]" />
            </if>

            <!-- return created company -->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[ownerPartyId: ownerPartyId, companyPartyId: partyId]"
                out-map="context" />
            <if condition="companies">
                <set field="company" from="companies[0]" />
            </if>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="company" type="Map" required="true">
                <parameter name="partyId" required="true" />
                <parameter name="name" />
                <parameter name="role" required="true" />
                <parameter name="email" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                </parameter>
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                    <parameter name="creditCardNumber" />
                    <parameter name="creditCardType" />
                    <parameter name="expireMonth" />
                    <parameter name="expireYear" />
                </parameter>
                <parameter name="telephoneNr" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map">
                <parameter name="partyId" />
                <parameter name="name" />
                <parameter name="email" />
                <parameter name="role" />
                <parameter name="currency" type="Map">
                    <parameter name="currencyId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="currencyName" />
                <parameter name="vatPerc">
                    <description>Percentage used for VAT if applicable</description>
                </parameter>
                <parameter name="salesPerc">
                    <description>Percentage used for sales tax</description>
                </parameter>
                <parameter name="address" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="provinceId" />
                    <parameter name="country" />
                    <parameter name="countryId" />
                </parameter>
                <parameter name="image" />
                <parameter name="paymentMethod">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
                <parameter name="telephoneNr" />
                <parameter name="employees" type="List">
                    <parameter name="employee" type="Map">
                        <parameter name="partyId" />
                        <parameter name="email" />
                        <parameter name="firstName" />
                        <parameter name="lastName" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: company.partyId]" out-map="oldValue" />
            <if condition="oldValue.companies.isEmpty()">
                <return error="true"
                    message="Company ${company.partyId} not found" />
            </if>
            <!-- update pseudoId-->
            <if condition="company.pseudoId != oldValue.companies[0]?.pseudoId">
                <service-call name="update#mantle.party.Party"
                    in-map="[partyId: company.partyId, pseudoId: company.pseudoId]" />
            </if>
            <!-- update name -->
            <if condition="company.name &amp;&amp; oldValue.companies[0]?.name !=  company.name">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.companies[0].partyId, organizationName: company.name]" />
            </if>
            <!-- update role , orgInternal cannot change-->
            <if
                condition="oldValue.companies[0].role != 'OrgInternal' &amp;&amp; company.role != oldValue.companies[0].role">
                <set field="newRole" from="company.role" />
                <if condition="company.role == 'Lead'">
                    <set field="newRole" value="Customer" />
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: company.partyId, customerStatusId: 'CUSTOMER_ASSIGNED']" />
                </if>
                <if condition="company.role == 'Customer'">
                    <service-call name="update#mantle.party.Party"
                        in-map="[partyId: company.partyId, customerStatusId: CUSTOMER_QUALIFIED]" />
                </if>
                <service-call name="delete#mantle.party.PartyRole"
                    in-map="[partyId: company.partyId, roleTypeId: oldValue.companies[0].role]" />
                <service-call name="create#mantle.party.PartyRole"
                    in-map="[partyId: company.partyId, roleTypeId: newRole]" />
            </if>
            <!-- update email -->
            <if condition="company.email != oldValue.companies[0]?.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    for-update="true" list="partyContactMechs">
                    <econdition field-name="partyId" from="oldValue.companies[0].partyId" />
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary" />
                    <date-filter />
                </entity-find>
                <!-- deactivate all duplicate mail addresses -->
                <iterate list="partyContactMechs" entry="contMech">
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="contMech" />
                </iterate>
                <if condition="company.email">
                    <service-call name="mantle.party.ContactServices.create#EmailAddress"
                        in-map="[partyId: oldValue.companies[0].partyId, 
                        contactMechPurposeId: 'EmailPrimary', emailAddress: company.email]" />
                </if>
            </if>
            <!-- update currency -->
            <if
                condition="oldValue.companies[0].currency?.currencyId != company.currency?.currencyId">
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="pref">
                    <field-map field-name="organizationPartyId" from="company.partyId" />
                </entity-find-one>
                <if condition="pref">
                    <service-call name="update#mantle.ledger.config.PartyAcctgPreference"
                        in-map="[organizationPartyId: company.partyId,
                            baseCurrencyUomId: company.currency?.currencyId]" />
                    <else>
                        <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                            in-map="[organizationPartyId: company.partyId,
                                    baseCurrencyUomId: company.currency?.currencyId]" />
                    </else>
                </if>
            </if>
            <!-- update image -->
            <if condition="company.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'company', id: company.partyId,
                        base64: company.image]" />
            </if>
            <!-- postal address -->
            <!-- get geoId of country and province-->
            <if condition="company.address">
                <if condition="company.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="company.address.country" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId" />
                    </if>
                </if>
                <if condition="company.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="company.address.province" />
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE" />
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId" />
                    </if>
                </if>
                <if
                    condition="
                        company.address.address1 != oldValue.companies[0].address?.address1 ||
                        company.address.address2 != oldValue.companies[0].address?.address2 ||
                        company.address.city != oldValue.companies[0].address?.city ||
                        company.address.postalCode != oldValue.companies[0].address?.postalCode ||
                        company.address.province != oldValue.companies[0].address?.province ||
                        company.address.country != oldValue.companies[0].address?.country
                        ">
                    <!-- disable (set thruDate) all postal duplicates -->
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                        for-update="true" list="partyContactMechs">
                        <econdition field-name="partyId" from="company.partyId" />
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                        <econdition field-name="thruDate" operator="is-null" />
                    </entity-find>
                    <iterate list="partyContactMechs" entry="contMech">
                        <set field="contMech.thruDate" from="ec.user.nowTimestamp" />
                        <entity-update value-field="contMech" />
                    </iterate>
                    <if condition="company.address.address2 != '_DELETE_'">
                        <service-call name="mantle.party.ContactServices.create#PostalAddress"
                            in-map="[partyId: company.partyId, contactMechPurposeId: 'PostalPrimary', 
                                    address1: company.address.address1,
                                    address2: company.address.address2,
                                    city: company.address.city,
                                    postalCode: company.address.postalCode,
                                    stateProvince: company.address.province,
                                    stateProvinceGeoId: stateProvinceGeoId, 
                                    countryGeoId: countryGeoId]"
                            out-map="result" />
                    </if>
                </if>
            </if>
            <!-- telephone -->
            <if condition="company.telephoneNr != oldValue.companies[0].telephoneNr">
                <if condition="oldValue.companyTelContactMechId">
                    <service-call name="update#mantle.party.contact.TelecomNumber"
                        in-map="[partyId: company.partyId,
                                    contactMechId: oldValue.companyTelContactMechId,
                                    contactNumber: company.telephoneNr]" />
                    <else>
                        <if condition="company.telephoneNr">
                            <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                                in-map="[
                                    contactMechPurposeId: 'PhonePrimary',
                                    areaCode: '',
                                    countryCode: '',
                                    contactNumber: company.telephoneNr,
                                    partyId: company.partyId]" />
                        </if>
                    </else>
                </if>
            </if>
            <!-- payment methods -->
            <if condition="company.paymentMethod">
                <!-- credit card -->
                <if condition="company.paymentMethod.ccDescription == '_DELETE_'">
                    <then>
                        <service-call
                            name="update#mantle.account.method.PaymentMethod"
                            in-map="[paymentMethodId: company.paymentMethod.ccPaymentMethodId,
                                    thruDate: ec.user.nowTimestamp]" />
                    </then>
                    <else-if condition="company.paymentMethod?.creditCardType">
                        <set field="expireDate"
                            value="${company.paymentMethod.expireMonth}/${company.paymentMethod.expireYear}" />
                        <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            list="partyContactMechs">
                            <econdition field-name="partyId" from="company.partyId" />
                            <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                            <date-filter />
                        </entity-find>
                        <if condition="!partyContactMechs">
                            <return error="true" message="Need postal address for creditcard" />
                        </if>
                        <set field="inMap"
                            from="[
                            ownerPartyId: oldValue.companies[0].partyId,
                            cardNumber: company.paymentMethod.creditCardNumber,
                            creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                                .condition('description', company.paymentMethod.creditCardType).one().enumId,
                            expireDate: expireDate,
                            postalContactMechId: partyContactMechs[0].contactMechId,
                            firstNameOnAccount: 'company',
                            lastNameOnAccount: company.name,
                            paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                            ]" />
                        <entity-find entity-name="mantle.account.method.PaymentMethod"
                            list="paymentMethods">
                            <econdition field-name="ownerPartyId"
                                from="oldValue.companies[0].partyId" />
                            <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard" />
                            <date-filter />
                        </entity-find>
                        <if condition="!paymentMethods">
                            <service-call
                                name="mantle.account.PaymentMethodServices.create#CreditCard"
                                in-map="inMap" />
                            <else>
                                <entity-find-one entity-name="mantle.account.method.CreditCard"
                                    value-field="cc">
                                    <field-map field-name="paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                </entity-find-one>
                                <if
                                    condition="inMap.cardNumber != cc.cardNumber ||
                                                inMap.expireDate != cc.expireDate">
                                    <set field="inMap.paymentMethodId"
                                        from="paymentMethods[0].paymentMethodId" />
                                    <service-call
                                        name="mantle.account.PaymentMethodServices.update#CreditCard"
                                        in-map="inMap" />
                                </if>
                            </else>
                        </if>
                    </else-if>
                </if>
            </if>
            <!-- sales/vat tax percentage -->
            <if condition="company.salesPerc || company.vatPerc">
                <entity-find-one
                    entity-name="mantle.party.Party" value-field="party" for-update="true">
                    <field-map field-name="partyId" from="company.partyId" />
                </entity-find-one>
                <if condition="company.vatPerc != null">
                    <set field="party.vatPerc" from="Integer.parseInt(company.vatPerc)" />
                    <else>
                        <set field="party.vatPerc" from="null" />
                    </else>
                </if>
                <if condition="company.salesPerc != null">
                    <set field="party.salesPerc" from="Integer.parseInt(company.salesPerc)" />
                    <else>
                        <set field="party.salesPerc" from="null" />
                    </else>
                </if>
                <entity-update value-field="party" />
            </if>
            <!-- return updated company -->
            <service-call
                name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: company.partyId]" out-map="context" />
            <if condition="companies">
                <set field="company" from="companies[0]" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="User">
        <description>
            Get all users with related company and role
        </description>
        <in-parameters>
            <parameter name="userPartyId" /><!-- if present select a single user -->
            <parameter name="firstName" />
            <parameter name="lastName" />
            <parameter name="companyName" />
            <parameter name="role" /><!-- if present select user from specific role-->
            <parameter name="userGroupId" /><!-- if present select user from specific security
            group-->
            <parameter name="ownerPartyId" /><!-- required when registering company customers-->
            <parameter name="start" type="Integer" default-value="0" />
            <parameter name="limit" type="Integer" default-value="20" />
            <parameter name="search" default="null" />
            <parameter name="isForDropDown" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="users" type="List">
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                        <parameter name="name" />
                        <parameter name="email" />
                        <parameter name="role" />
                        <parameter name="paymentMethod">
                            <parameter name="ccPaymentMethodId" />
                            <parameter name="ccDescription" />
                        </parameter>
                    </parameter>
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                </parameter>
            </parameter>
            <parameter name="personToCompanyId" /><!-- used in update user for reassign of company -->
        </out-parameters>
        <actions>
            <set field="role" from="role?.capitalize()" />
            <if condition="search != null">
                <set field="search" value="%${search}%" />
            </if>
            <service-call out-map="relatedLogin"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- be able to override owner when registering new user and company -->
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relatedLogin.ownerPartyId" />
            </if>
            <set field="users" from="[]" />
            <if condition="!userPartyId &amp;&amp; !search">
                <set field="disabled" value="N" />
            </if>
            <!-- adjust role -->
            <set field="companyRole" from="role" />
            <if condition="role == 'Customer'">
                <set field="customerStatusId" value="CUSTOMER_QUALIFIED" />
            </if>
            <if condition="role == 'Lead'">
                <set field="customerStatusId" value="CUSTOMER_ASSIGNED" />
                <set field="companyRole" value="Customer" />
            </if>
            <if condition="role == 'Unknown'">
                <set field="companyRole" from="null" />
            </if>
            <if condition="role == 'Company'">
                <set field="companyRole" value="OrgInternal" />
            </if>
            <!-- get records -->
            <entity-find offset="start" limit="limit" list="userInfos"
                entity-name="growerp.party.OwnerPersonDetailAndCompany">
                <econdition field-name="companyPartyId" operator="is-null"
                    ignore="role != 'Unknown'" />
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="userPartyId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="userPartyId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="firstName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="lastName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="companyName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="emailAddress" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <econdition field-name="companyRole" ignore-if-empty="true" />
                <econdition field-name="customerStatusId" ignore-if-empty="true" or-null="true" />
                <econdition field-name="userGroupId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="ownerDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                    <econdition field-name="userDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true" />
                </econditions>
                <order-by field-name="lastName^,firstName^,companyName^" />
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <!-- adjust role -->
                <if
                    condition="userInfo.companyRole == 'Customer' &amp;&amp; userInfo.customerStatusId == 'CUSTOMER_ASSIGNED'">
                    <set field="userInfo.companyRole" value="Lead" />
                </if>
                <!-- image -->
                <entity-find entity-name="mantle.party.PartyContent" list="contents">
                    <econdition field-name="partyId" from="userInfo.userPartyId" />
                    <econdition field-name="partyContentTypeEnumId"
                        from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context" />
                    <else>
                        <set field="imageFile" from="null" />
                    </else>
                </if>
                <!-- if somebody registered a company, then ordered from another website, admin and
                employee need to be adjusted -->
                <set field="userGroupId" from="userInfo.userGroupId" />
                <!--TODO:
                if condition="userGroupId in ['GROWERP_M_ADMIN','GROWERP_M_EMPLOYEE']">
                    <if condition="userInfo.companyRole == 'Customer'">
                        <set field="userGroupId" value="GROWERP_M_CUSTOMER"/></if>
                    <if condition="userInfo.companyRole == 'Supplier'">
                        <set field="userGroupId" value="GROWERP_M_SUPPLIER"/></if>
                </if-->
                <set field="paymentMethod" from="null" />
                <if condition="userInfo.paymentMethodId">
                    <set field="nrLength" from="userInfo.cardNumber.length()" />
                    <set field="ccDescription"
                        value="${userInfo.cardType}**********${userInfo.cardNumber.substring(nrLength-4,nrLength)} ${userInfo.expireDate}" />
                    <set field="paymentMethod"
                        from="[ ccPaymentMethodId: userInfo.paymentMethodId,
                                ccDescription: ccDescription]" />
                </if>
                <if condition="isForDropDown">
                    <set field="company"
                        from="[
                            partyId: userInfo.companyPartyId,
                            name: userInfo.companyName,
                            ]" />
                    <else>
                        <set field="company"
                            from="[
                            partyId: userInfo.companyPartyId,
                            pseudoId: userInfo.companyPseudoId,
                            name: userInfo.companyName,
                                role: userInfo.companyRole,
                                paymentMethod: paymentMethod,
                                ]" />
                    </else>
                </if>
                <set field="telephoneNr"
                    value="${userInfo.telCountryCode?:''}${userInfo.telAreaCode?:''}${userInfo.telContactNumber?:''}" />
                <if condition="isForDropDown">
                    <set field="userOut"
                        from="[
                            pseudoId: userInfo?.userPseudoId,
                            firstName: userInfo?.firstName,
                            lastName: userInfo?.lastName,
                            company: company,
                            ]" />
                    <else>
                        <set field="userOut"
                            from="[
                                partyId: userInfo?.userPartyId,
                                pseudoId: userInfo?.userPseudoId,
                                email: userInfo?.emailAddress ?: userInfo.emailAddressCm,
                                emailContactMechId: userInfo.emailContactMechId,
                                firstName: userInfo?.firstName,
                                lastName: userInfo?.lastName,
                                loginDisabled: userInfo?.loginDisabled == 'Y'? true : false,
                                loginName: userInfo?.loginName,
                                userGroupId: userGroupId,
                                groupDescription: userInfo?.ugDescription,
                                language: userInfo?.locale ? userInfo?.locale .toString() : '',
                                image: imageFile,
                                userId: userInfo?.userId,
                                locale: userInfo?.locale ?:'',
                                telephoneNr: telephoneNr,
                                company: company,
                                ]" />
                    </else>
                </if>
                <script>users.add(userOut)</script>
            </iterate>
            <if condition="userPartyId">
                <set field="personToCompanyId" from="userInfos[0]?.personToCompanyId" />
            </if>
        </actions>
    </service>

    <!-- in/out parameters not updated with the new companyMap, needs also changes in website! -->
    <service verb="register" noun="User" authenticate="anonymous-all">
        <description>registration on the e-commerce webapp for a specific company just for non-employees</description>
        <in-parameters>
            <parameter name="ownerPartyId" required="true">
                <description>Party Id of the organization</description>
            </parameter>
            <parameter name="classificationId">
                <description>The App id the user want to register for, valid entries: AppAdmin, AppHotel etc </description>
            </parameter>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" default-value="false" />
                <parameter name="loginName" default="email" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="companyPartyId" />
                <parameter name="companyName" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="companyAddress" type="Map">
                    <parameter name="addressId" />
                    <parameter name="address1" />
                    <parameter name="address2" />
                    <parameter name="city" />
                    <parameter name="postalCode" />
                    <parameter name="province" />
                    <parameter name="country" />
                </parameter>
                <parameter name="companyPaymentMethod" type="Map">
                    <parameter name="ccPaymentMethodId" />
                    <parameter name="ccDescription" />
                </parameter>
            </parameter>
            <parameter name="newPassword" />
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" default-value="'N'" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- check input parameters because anonymous access -->
            <entity-find-one entity-name="growerp.party.CompanyPreferenceAndRole"
                value-field="party">
                <field-map field-name="partyId" from="ownerPartyId" />
                <field-map field-name="roleTypeId" value="OrgInternal" />
            </entity-find-one>
            <if condition="!party">
                <return message="Not a valid ownerId" />
            </if>
            <entity-find-one entity-name="mantle.party.PartyClassification"
                value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId" />
            </entity-find-one>
            <if condition="!classification">
                <return message="Not a valid classificationId: ${classificationId}" />
            </if>
            <if condition="!user.companyName &amp;&amp; !user.companyPartyId">
                <return error="true"
                    message="Company name required for new lead, customer or supplier" />
            </if>
            <!-- create account, not active when no login provided -->
            <set field="disabled" value="N" />
            <if condition="!user.loginName">
                <set field="disabled" value="Y" />
                <set field="loginName" from="user.email" />
                <else>
                    <set field="loginName" from="user.loginName" />
                </else>
            </if>
            <if condition="!newPassword">
                <set field="newPassword"
                    from="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            </if>
            <set field="newPasswordVerify" from="newPassword" />
            <!-- owner for customers is done in partyRelationship -->
            <service-call name="mantle.party.PartyServices.create#Account"
                in-map="context + [roleTypeId: roleTypeId, loginAfterCreate: false,
                        firstName: user.firstName, lastName: user.lastName,
                        username: loginName,
                        ownerPartyId: user.userGroupId == 'GROWERP_M_CUSTOMER' ?
                            null : ownerPartyId,
                        emailAddress: user.email, disabled: disabled]"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId" />

            <if condition="user.userGroupId == 'GROWERP_M_CUSTOMER'">
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[   fromPartyId: userAccount.partyId,
                            fromRoleTypeId: 'Customer',
                            toPartyId: ownerPartyId,
                            toRoleTypeId: 'Owner',
                            relationshipTypeEnumId: 'PrtCustomer',
                            fromDate: ec.user.nowTimestamp
                            ]" />
            </if>

            <!-- roles -->
            <if
                condition="user.userGroupId == 'GROWERP_M_LEAD' ||
                    user.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer" />
                <else-if condition="user.userGroupId == 'GROWERP_M_SUPPLIER'">
                    <set field="roleTypeId" value="Supplier" />
                </else-if>
                <else>
                    <return message="Not a valid userGroupId: ${user.userGroupId}" />
                </else>
            </if>
            <!-- company -->
            <if condition="user.companyPartyId">
                <!-- existing company -->
                <entity-find-one entity-name="mantle.party.Party" value-field="checkParty">
                    <field-map field-name="partyId" from="user.companyPartyId" />
                </entity-find-one>
                <if condition="!checkParty">
                    <return error="true" message="could not find company ${user.companyPartyId}" />
                </if>
                <set field="companyPartyId" from="user.companyPartyId" />
                <else>
                    <!-- new company -->
                    <service-call out-map="comp"
                        name="mantle.party.PartyServices.create#Organization"
                        in-map="[organizationName: user.companyName,
                                ownerPartyId: user.userGroupId == 'GROWERP_M_CUSTOMER'
                                    ? null : ownerPartyId, roleTypeId: roleTypeId,
                                disabled: 'N']" />
                    <set field="companyPartyId" from="comp.partyId" />
                </else>
            </if>
            <!-- company party relationship -->
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: companyPartyId, toRoleTypeId: roleTypeId]" />
            <!-- provide security -->
            <service-call name="create#moqui.security.UserGroupMember"
                in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
            <!-- only send email when login name provided -->
            <if condition="user.email">
                <entity-find-one entity-name="moqui.basic.email.EmailServer"
                    value-field="emailExist">
                    <field-map field-name="emailServerId" value="SYSTEM" />
                </entity-find-one>
                <if condition="emailExist &amp;&amp; emailExist.mailPassword != 'SMTP_PASSWORD'">
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                        async="true">
                        <field-map field-name="emailTemplateId" value="WELCOME" />
                        <field-map field-name="toAddresses" from="user.email" />
                        <field-map field-name="bodyParameters"
                            from="[classification: classificationId.substring(3),
                                newPassword:newPassword, firstName: user.firstName,
                                lastName: user.lastName]" />
                    </service-call>
                    <else>
                        <log level="warn"
                            message="====== Email not configured, ${user.LoginName} password: $newPassword" />
                    </else>
                </if>
                <!-- add to mailing list -->
                <service-call name="growerp.100.BirdSendServices100.registerAdd#UserToGroup"
                    in-map="email: user.email, firstName: user.firstName,
                            lastName: user.lastName" />
            </if>
            <!-- return all user info -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[ownerPartyId: ownerPartyId,userPartyId: userPartyId]"
                out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user with related company to an existing owner company
        </description>
        <in-parameters>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map" required="true">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                    </parameter>
                    <parameter name="currencyName" />
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod" type="Map">
                        <parameter name="creditCardType" />
                        <parameter name="creditCardNumber" />
                        <parameter name="expireMonth" />
                        <parameter name="expireYear" />
                    </parameter>
                    <parameter name="telephoneNr" />
                </parameter>
            </parameter>
            <parameter name="password"
                default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="ownerPartyId" /><!-- only required when no user logged in after
            creating owner company -->
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="pseudoId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                </parameter>
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
            </parameter>
            <parameter name="password" />
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <if condition="relComp.companyPartyId &amp;&amp; !user.pseudoId">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[companyPartyId: relComp.companyPartyId, seqName: 'user']" />
                <set field="user.pseudoId" from="seqNum" />
            </if>

            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="relComp.ownerPartyId" />
            </if>
            <if condition="!ownerPartyId">
                <return error="true"
                    message="Owner company missing in create#user service for ${user.firstName} ${user.lastName} ${user.userGroupId}" />
            </if>
            <!-- create account-->
            <if condition="user.loginName">
                <then>
                    <service-call name="mantle.party.PartyServices.create#Account"
                        in-map="[roleTypeId: user.company.role == 
                                    'Lead'? 'Customer' : user.company.role, 
                                pseudoId: user.pseudoId,
                                loginAfterCreate: false,
                                firstName: user.firstName, lastName: user.lastName,
                                emailAddress: user.email,
                                username: user.loginName, newPassword: password,
                                newPasswordVerify: password,
                                ownerPartyId: ownerPartyId]"
                        out-map="userAccount" />
                    <if condition="user.loginDisabled">
                        <service-call name="update#moqui.security.UserAccount"
                            in-map="[userId: userAccount.userId,
                                disabled: user.loginDisabled == true ? 'Y' : 'N']" />
                    </if>
                    <!-- user security access -->
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: 'ALL_USERS', userId: userAccount.userId]" />
                    <set field="userPartyId" from="userAccount.partyId" />
                </then>
                <else>
                    <!-- create without account -->
                    <service-call name="create#mantle.party.Party"
                        in-map="[partyTypeEnumId:'PtyPerson',
                                pseudoId: user.pseudoId,
                                ownerPartyId: ownerPartyId]"
                        out-map="newPartyOut" />
                    <set field="userPartyId" from="newPartyOut.partyId" />
                    <service-call name="create#mantle.party.Person"
                        in-map="[partyId: userPartyId,firstName: user.firstName,
                                lastName: user.lastName,]" />
                    <!-- user email -->
                    <if condition="user.email">
                        <service-call name="mantle.party.ContactServices.create#EmailAddress"
                            in-map="[emailAddress:user.email,
                                    partyId: userPartyId,
                                    contactMechPurposeId:'EmailPrimary']" />
                    </if>
                </else>
            </if>
            <!-- create company if required -->
            <if condition="!user.company.partyId &amp;&amp; user.company.name">
                <service-call name="growerp.100.PartyServices100.create#Company"
                    in-map="[company: user.company, ownerPartyId: ownerPartyId]"
                    out-map="context" />
                <set field="companyPartyId" from="company.partyId" />
                <else><!-- existing company or orgInternal-->
                    <if condition="user.company.role == 'OrgInternal'">
                        <set field="companyPartyId" from="relComp.companyPartyId" />
                        <else>
                            <if condition="user.company.partyId">
                                <set field="companyPartyId" from="user.company.partyId" />
                                <else>
                                    <return error="true"
                                        message="No related company for user: ${user.firstName} ${user.lastName}!" />
                                </else>
                            </if>
                        </else>
                    </if>
                </else>
            </if>
            <!-- add new user to company  -->
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[   
                        fromPartyId: userPartyId,
                        fromRoleTypeId: 'Employee',
                        toPartyId: companyPartyId,
                        toRoleTypeId: user.company.role == 'Lead'? 'Customer' : user.company.role,
                        relationshipTypeEnumId: 'PrtEmployee',
                        fromDate: ec.user.nowTimestamp
                        ]" />
            <!-- add image -->
            <if condition="user.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userPartyId,
                        base64: user.image]" />
            </if>
            <!-- telephone -->
            <if condition="user.telephoneNr">
                <service-call
                    name="mantle.party.ContactServices.create#TelecomNumber"
                    in-map="[
                        contactNumber: user.telephoneNr,
                        contactMechPurposeId: 'PhonePrimary',
                        partyId: userPartyId,
                            ]" />
            </if>
            <entity-find entity-name="OwnerPersonDetailAndCompany" list="results">
                <econdition field-name="userPartyId" from="userPartyId" />
            </entity-find>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[ownerPartyId: ownerPartyId, userPartyId: userPartyId]" out-map="userInfo" />
            <set field="user" from="userInfo.users?[0]" />
        </actions>
    </service>

    <service verb="update" noun="User">
        <description>
            update user information
        </description>
        <in-parameters>
            <parameter name="user" type="Map" required="true">
                <parameter name="partyId" required="true" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: user.partyId]" out-map="oldValue" />
            <if condition="oldValue.users">
                <set field="oldValue.user" from="oldValue.users[0]" />
            </if>
            <!-- update person -->
            <service-call name="update#mantle.party.Person"
                in-map="[   partyId: user.partyId, 
                            firstName: user.firstName ? user.firstName : oldValue.user.firstName, 
                            lastName: user.lastName ? user.lastName : oldValue.user.lastName]" />
            <!-- update account -->
            <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="pAccount">
                <field-map field-name="partyId" from="oldValue.user.partyId" />
            </entity-find-one>
            <if condition="pAccount">
                <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                    in-map="[   partyId: user.partyId, 
                                emailAddress: user.email ?: oldValue.user.email,
                                username: user.loginName ?: oldValue.user.loginName,
                                locale: language
                            ]" />
                <else-if
                    condition="user.loginName &amp;&amp; user.email &amp;&amp; user.userGroupId">
                    <service-call name="mantle.party.PartyServices.create#Account"
                        in-map="[roleTypeId: user.company.role == 
                                    'Lead'? 'Customer' : user.company.role, 
                                loginAfterCreate: false,
                                firstName: user.firstName, lastName: user.lastName,
                                emailAddress: user.email,
                                username: user.loginName, newPassword: password,
                                newPasswordVerify: password,
                                ownerPartyId: ownerPartyId]"
                        out-map="userAccount" />
                    <if condition="user.loginDisabled">
                        <service-call name="update#moqui.security.UserAccount"
                            in-map="[userId: userAccount.userId,
                                disabled: user.loginDisabled == true ? 'Y' : 'N']" />
                    </if>
                    <!-- user security access -->
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: user.userGroupId, userId: userAccount.userId]" />
                    <set field="userPartyId" from="userAccount.partyId" />

                </else-if>
            </if>
            <!-- update alternative email address -->
            <if condition="user.email == ''">
                <set field="user.email" from="null" />
            </if>
            <if condition="user.email != oldValue.user.email">
                <if condition="oldValue.user.emailContactMechId">
                    <!-- update -->
                    <service-call name="update#mantle.party.contact.ContactMech"
                        in-map="[contactMechId: oldValue.user.emailContactMechId,
                                infoString: user.email]" />
                    <else>
                        <!-- create -->
                        <service-call name="mantle.party.ContactServices.create#EmailAddress"
                            in-map="[partyId: user.partyId, emailAddress: user.email,
                                contactPurposeId: 'EmailPrimary']" />
                    </else>
                </if>
            </if>
            <!--check
            for new login account-->
            <if condition="user.loginName &amp;&amp; !oldValue.user.loginName">
                <then>
                    <if condition="!user.userGroupId">
                        <return error="true"
                            message="userGroupId not supplied for login: $user.loginName" />
                    </if>
                    <if condition="!user.email">
                        <return error="true"
                            message="Login account needs an email address!" />
                    </if>
                    <service-call name="create#moqui.security.UserAccount"
                        in-map="[
                            partyId: user.partyId,
                            userFullName: user.firstName + ' ' + user.lastName,
                            emailAddress: user.email, disabled: 'N',
                            username: user.loginName]"
                        out-map="userAccount" />
                    <set field="oldValue.user.userId" from="userAccount.userId" />
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: user.userGroupId,
                                userId: oldValue.user.userId,
                                fromDate: ec.user.nowTimestamp]" />
                </then>
                <else-if condition="oldValue.user.userId">
                    <!-- update existing user account -->
                    <if
                        condition="user.userGroupId &amp;&amp;
                            user.userGroupId != oldValue.user.userGroupId">
                        <!-- change of security -->
                        <if condition="oldValue.user.userGroupId == 'GROWERP_M_ADMIN'">
                            <!-- check if only a single admin: cannot change -->
                            <entity-find entity-name="growerp.party.OwnerPersonDetailAndCompany"
                                list="admins">
                                <econdition field-name="userGroupId" value="GROWERP_M_ADMIN" />
                                <econdition field-name="companyPartyId"
                                    from="relComp.companyPartyId" />
                                <date-filter from-field-name="ugMemFromDate"
                                    thru-field-name="ugMemThruDate" />
                            </entity-find>
                            <if condition="admins.size() == 1">
                                <return error="true"
                                    message="You need at least a single Admin in your company: cannot remove this one!" />
                            </if>
                        </if>
                        <!-- deactivate old security if present -->
                        <entity-find entity-name="moqui.security.UserGroupMember"
                            list="groupMembers" for-update="true">
                            <econdition field-name="userGroupId" from="oldValue.user.userGroupId" />
                            <econdition field-name="userId" from="oldValue.user.userId" />
                        </entity-find>
                        <if condition="groupMembers">
                            <set field="groupMembers[0].thruDate" from="ec.user.nowTimestamp" />
                            <entity-update value-field="groupMembers[0]" />
                        </if>
                        <service-call name="create#moqui.security.UserGroupMember"
                            in-map="[userGroupId: user.userGroupId, userId: oldValue.user.userId, fromDate: ec.user.nowTimestamp]" />
                    </if>
                    <set field="loginDisabled" value="N" />
                    <if condition="user.loginDisabled == true">
                        <set field="loginDisabled" value="Y" />
                    </if>
                    <if
                        condition="user.firstName != oldValue.user.firstName ||
                            user.lastName != oldValue.user.lastName ||
                            user.email != oldValue.user.email ||
                            user.loginName != oldValue.user.loginName ||
                            loginDisabled != oldValue.user.loginDisabled">
                        <!-- update user account data -->
                        <service-call name="update#moqui.security.UserAccount"
                            in-map="[
                                userId: user.userId,
                                userFullName: user.firstName + ' ' + user.lastName,
                                emailAddress: user.email,
                                username: user.loginName,
                                disabled: loginDisabled]" />
                    </if>
                </else-if>
            </if>
            <!-- update image -->
            <if condition="user.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: user.partyId,
                        base64: user.image]" />
            </if>
            <!-- check company -->
            <if condition="!user.company.partyId &amp;&amp; !user.company.name">
                <return error="true" message="New or existing company required!" />
            </if>
            <!-- related company changes -->
            <if condition="user.company.partyId != oldValue.user.company.partyId">
                <!-- delete  old relationship -->
                <entity-delete-by-condition entity-name="mantle.party.PartyRelationship">
                    <econdition field-name="fromPartyId" from="oldValue.user.partyId" />
                </entity-delete-by-condition>
                <!-- create new relationship -->
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: user.partyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: user.company.partyId,
                    toRoleTypeId: user.company.role == 'Lead'? 'Customer' : user.company.role
                    ]" />
            </if>
            <!-- telephone -->
            <if condition="user.telephoneNr || user.telephoneNr != oldValue.user.telephoneNr">
                <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber"
                    list="telNos">
                    <econdition field-name="contactMechPurposeId" value="PhonePrimary" />
                    <econdition field-name="partyId" from="user.partyId" />
                    <date-filter />
                </entity-find>
                <if condition="telNos">
                    <service-call name="update#mantle.party.contact.TelecomNumber"
                        in-map="[contactMechId: telNos[0].contactMechId,
                                contactNumber: user.telephoneNr]" />
                    <else>
                        <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                            in-map="[
                                contactMechPurposeId: 'PhonePrimary',
                                contactNumber: user.telephoneNr,
                                partyId: user.partyId]" />
                    </else>
                </if>
            </if>
            <!-- return updated user -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: user.partyId]" out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <description>Deactivate a owner companies logged in user and optionally delete owner company too.</description>
        <in-parameters>
            <parameter name="partyId" required="true" />
            <parameter name="deleteCompanyToo" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map">
                <parameter name="partyId" />
                <parameter name="email" />
                <parameter name="firstName" />
                <parameter name="lastName" />
                <parameter name="loginDisabled" type="Boolean" />
                <parameter name="loginName" />
                <parameter name="userGroupId" />
                <parameter name="groupDescription" />
                <parameter name="language" />
                <parameter name="image" />
                <parameter name="userId" />
                <parameter name="locale" />
                <parameter name="telephoneNr" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find-one entity-name="mantle.party.Party" value-field="party">
                <field-map field-name="ownerPartyId" from="ownerPartyId" />
                <field-map field-name="partyId" from="partyId" />
            </entity-find-one>
            <if condition="!party">
                <return error="true" message="Could not find partyId: $partyId" />
            </if>
            <!-- disable user -->
            <service-call name="update#mantle.party.Party"
                in-map="[partyId: partyId, disabled: 'Y']" />
            <!-- disable account change email for re-use-->
            <entity-find entity-name="moqui.security.UserAccount"
                list="accounts" for-update="true">
                <econdition field-name="partyId" />
            </entity-find>
            <entity-update
                value-field="(accounts[0] + 
                    [disabled: 'Y',
                    username: partyId + '-' + accounts[0].username,
                    emailAddress: partyId + '-' + accounts[0].emailAddress])" />
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId]" out-map="loggedInParty" />
            <if condition="loggedInParty.users">
                <set field="loggedInParty.user" from="loggedInParty.users[0]" />
            </if>
            <!-- check if this user has an admin account and 
                if company needs deleting and deletes his own userlogin
                then can delete company too -->
            <if
                condition="loggedInParty.user.userGroupId == 'GROWERP_M_ADMIN' 
                    &amp;&amp; deleteCompanyToo == true
                    &amp;&amp; partyId == userPartyId">
                <service-call name="update#mantle.party.Party"
                    in-map="[partyId: companyPartyId, disabled: 'Y']" />
                <!-- disable all owned parties -->
                <entity-find entity-name="mantle.party.Party" list="parties">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                </entity-find>
                <iterate list="parties" entry="party">
                    <entity-update value-field="(party + [disabled: 'Y'])" />
                    <!-- disable all owned accounts -->
                    <entity-find entity-name="moqui.security.UserAccount"
                        list="accounts" for-update="true">
                        <econdition field-name="partyId" from="party.partyId" />
                    </entity-find>
                    <if condition="accounts">
                        <entity-update
                            value-field="(accounts[0] + 
                                [disabled: 'Y',
                                username: partyId + '-' + accounts[0].username,
                                emailAddress: partyId + '-' + accounts[0].emailAddress])" />
                    </if>
                </iterate>
            </if>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>Register a new accounting/ownercompany with an admin user</description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true" />
            <parameter name="middleName" />
            <parameter name="lastName" required="true" />
            <parameter name="emailAddress" required="true">
                <text-email />
            </parameter>
            <parameter name="username" default="emailAddress" />
            <parameter name="newPassword" />
            <parameter name="newPasswordVerify" default="newPassword" />
            <parameter name="locale" />
            <!-- company information -->
            <parameter name="companyEmailAddress" required="true" />
            <parameter name="companyName" required="true" />
            <parameter name="currencyId" required="true" />
            <parameter name="classificationId" required="true" /> <!-- allocate company to
            application name -->
            <!-- default setup -->
            <parameter name="productionEnvironment" default-value="false" /><!-- string bolean -->
            <parameter name="demoData" default-value="true" /><!-- string bolean -->
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate" type="Map">
                <parameter name="ownerPartyId" />
                <parameter name="classificationId" />
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="employees" type="List">
                        <parameter name="employee" type="Map">
                            <parameter name="partyId" />
                            <parameter name="email" />
                            <parameter name="firstName" />
                            <parameter name="lastName" />
                        </parameter>
                    </parameter>
                </parameter>
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- create root party -->
            <service-call name="create#mantle.party.Party"
                in-map="[partyTypeEnumId: 'PtyOwner',
                        disabled: 'N']"
                out-map="owner" />
            <!-- create admin user -->
            <set field="company"
                from="[name: companyName,
                                        role: 'OrgInternal',
                                        email: companyEmailAddress]" />
            <set field="user"
                from="[
                    userGroupId: 'GROWERP_M_ADMIN',
                    email: emailAddress,
                    firstName: firstName,
                    lastName: lastName,
                    loginName: emailAddress,
                    company: company,
                    ]" />

            <!-- will create admin and company and link to owner; 
                return results in the map user and return password-->
            <!-- client can set password by providing newPassword -->
            <service-call name="growerp.100.PartyServices100.create#User"
                in-map="[user: user, password: newPassword,
                    ownerPartyId: owner.partyId]"
                out-map="context" />
            <!-- initialize accounting with defaults -->
            <service-call name="growerp.100.AccountingServices100.init#PartyAccountingConfiguration"
                in-map="[sourcePartyId: 'DefaultSettings',
                        organizationPartyId: user.company.partyId, baseCurrencyUomId: currencyId]" />
            <!-- login -->
            <script>ec.user.internalLoginUser(username)</script>
            <!-- create productStore and other setup data.-->
            <service-call name="growerp.100.PartyServices100.verifyAndGet#ProductStore"
                in-map="[ownerPartyId: owner.partyId, userPartyId: user.partyId,
                        demoData: demoData == 'true'? true : false,
                        companyPartyId: user.company.partyId, classificationId: classificationId]" />
            <!--sendemail -->
            <if condition="user.loginName">
                <entity-find-one entity-name="moqui.basic.email.EmailServer"
                    value-field="emailExist">
                    <field-map field-name="emailServerId" value="SYSTEM" />
                </entity-find-one>
                <if condition="emailExist &amp;&amp; emailExist.mailPassword != 'SMTP_PASSWORD'">
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                        async="true">
                        <field-map field-name="emailTemplateId" value="WELCOME" />
                        <field-map field-name="toAddresses" from="emailAddress" />
                        <field-map field-name="bodyParameters"
                            from="[classification: classificationId.substring(3),
                                newPassword: password, firstName: firstName,
                                lastName: lastName]" />
                    </service-call>
                    <else>
                        <log level="warn"
                            message="====== Email not configured, ${user.loginName} password: $password" />
                    </else>
                </if>
                <!-- add to mailing list -->
                <service-call name="growerp.100.BirdSendServices100.registerAdd#UserToGroup"
                    in-map="email: emailAddress, firstName: firstName,
                        lastName: lastName" />
            </if>
            <set field="authenticate" from="[:]" />
            <!-- return company Data -->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: user.company.partyId]"
                out-map="getCompany" />
            <if condition="getCompany.companies">
                <set field="authenticate.company" from="getCompany.companies[0]" />
            </if>
            <!-- return user data -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="userPartyId: user.partyId"
                out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="authenticate.user" from="userInfo.users[0]" />
            </if>
            <!-- owner -->
            <set field="authenticate.ownerPartyId" from="owner.partyId" />
            <set field="authenticate.classificationId" from="classificationId" />
        </actions>
    </service>
    <service verb="verifyAndGet" noun="ProductStore">
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="userPartyId" required="true" />
            <parameter name="companyPartyId" required="true" />
            <parameter name="classificationId" required="true" />
            <parameter name="demoData" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="productStore" />
            <parameter name="partyClassification" />
        </out-parameters>
        <actions>
            <!-- verify classification -->
            <entity-find-one entity-name="mantle.party.PartyClassification"
                value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId" />
            </entity-find-one>
            <if condition="!classification">
                <return error="true" message="classificationId: $classificationId invalid" />
            </if>
            <!-- verify party classification application-->
            <entity-find-one entity-name="mantle.party.PartyClassificationAndAppl"
                value-field="partyClassification">
                <field-map field-name="partyId" from="ownerPartyId" />
                <field-map field-name="partyClassificationId" from="classificationId" />
                <field-map field-name="classificationTypeEnumId" value="PcltMobileApp" />
            </entity-find-one>
            <set field="demoData" from="demoData ?: false" />
            <set field="newOwner" value="true" type="Boolean" />
            <if condition="partyClassification">
                <!-- already exist -->
                <!-- we just have a single productstore and a single website -->
                <entity-find-one entity-name="mantle.product.store.ProductStore"
                    value-field="productStore">
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                </entity-find-one>
                <return />
                <else>
                    <!-- check if existing classification has demo data when yes then also create
                    for new app -->
                    <entity-find entity-name="mantle.party.PartyClassificationAndAppl" limit="1"
                        list="partyClassifications">
                        <econdition field-name="partyId" from="ownerPartyId" />
                        <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
                    </entity-find>
                    <if condition="partyClassifications">
                        <set field="newOwner" value="false" type="Boolean" />
                        <!-- check if first product of demo data exist -->
                        <if condition="partyClassifications[0].partyClassificationId == 'AppAdmin'">
                            <set field="productName" value="Hoodie" />
                        </if>
                        <if condition="partyClassifications[0].partyClassificationId == 'AppHotel'">
                            <set field="productName" value="Single Room" />
                        </if>
                        <entity-find entity-name="mantle.product.Product" list="products" limit="1">
                            <econdition field-name="productName" from="productName" />
                            <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        </entity-find>
                        <if condition="products">
                            <set field="demoData" value="true" />
                        </if>
                    </if>
                    <service-call name="create#mantle.party.PartyClassificationAppl"
                        in-map="[partyId: ownerPartyId, partyClassificationId: classificationId,
                            classificationTypeEnumId: 'PcltMobileApp']" />
                </else>
            </if>
            <if condition="newOwner">
                <entity-find-one entity-name="mantle.party.Organization" value-field="company">
                    <field-map field-name="partyId" from="companyPartyId" />
                </entity-find-one>
                <entity-find-one entity-name="mantle.facility.Facility" value-field="facility">
                    <field-map field-name="facilityId" value="DEFAULT_WH" />
                </entity-find-one>
                <service-call name="create#mantle.facility.Facility"
                    in-map="facility + [
                        pseudoId: null,
                        facilityId: null,
                        ownerPartyId: companyPartyId,
                        facilityName: company.organizationName + ' Inventory']"
                    out-map="context" />

                <!-- create top resource for this company  linkedto
                        wikiSpace and productStore to organizationPartyId-->
                <service-call name="create#moqui.resource.DbResource"
                    in-map="[isFile: 'N']"
                    out-map="topResource" />
                <service-call name="update#moqui.resource.DbResource"
                    in-map="[resourceId: topResource.resourceId,
                                filename: topResource.resourceId]" />

                <!-- create wiki space -->
                <entity-find-one entity-name="moqui.resource.wiki.WikiSpace" value-field="wikiSpace">
                    <field-map field-name="wikiSpaceId" value="DEFAULT_WS" />
                </entity-find-one>
                <service-call name="create#moqui.resource.wiki.WikiSpace"
                    in-map="wikiSpace + [wikiSpaceId: null,
                    rootPageLocation: wikiSpace.rootPageLocation.replace('DEFAULT_ROOT', topResource.resourceId)]"
                    out-map="context" />

                <!-- wikipages and connect to data resource wikipageId = dbResourceId not use for
                now-->
                <entity-find entity-name="moqui.resource.wiki.WikiPage" list="pages">
                    <econdition field-name="wikiSpaceId" value="DEFAULT_WS" />
                </entity-find>
                <iterate list="pages" entry="page">
                    <service-call name="create#moqui.resource.wiki.WikiPage"
                        in-map="page + [wikiSpaceId: wikiSpaceId,
                                wikiPageId: null]" />
                </iterate>

                <!-- get currency -->
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="aPref">
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                </entity-find-one>
                <!-- create productStore from default -->
                <entity-find-one entity-name="mantle.product.store.ProductStore"
                    value-field="defProductStore">
                    <field-map field-name="productStoreId" value="POPC_DEFAULT" />
                </entity-find-one>
                <!-- create map for productStore -->
                <set field="inMap"
                    from="defProductStore + [
                    productStoreId: null,
                    organizationPartyId: companyPartyId,
                    inventoryFacilityId: facilityId,
                    storeName: company.organizationName,
                    defaultCurrencyUomId: aPref.baseCurrencyUomId,
                    wikiSpaceId: wikiSpaceId,
                    ]" />
                <if condition="classificationId == 'AppAdmin'">
                    <set field="inMap"
                        from="inMap + [
                    requireInventory: 'N',
                    reservationOrderEnumId:'AsResOrdNoRes',
                    ]" />
                </if>
                <if condition="classificationId == 'AppHotel'">
                    <set field="inMap"
                        from="inMap + [
                    requireInventory: 'N',
                    reservationOrderEnumId:'AsResOrdNoRes',
                    ]" />
                </if>
                <service-call name="create#mantle.product.store.ProductStore"
                    out-map="context" in-map="inMap" />
                <!-- store shipping options -->
                <entity-find entity-name="mantle.product.store.ProductStoreShipOption"
                    list="options">
                    <econdition field-name="productStoreId" value="POPC_DEFAULT" />
                </entity-find>
                <iterate list="options" entry="option">
                    <service-call name="create#mantle.product.store.ProductStoreShipOption"
                        in-map="option + [productStoreId: productStoreId]" />
                </iterate>

                <!-- update website settings-->
                <set field="hostName" from="ec.web.getHostName(false)" />
                <if condition="hostName == '10.0.2.2' || hostname == '127.0.0.1'">
                    <set field="hostName" value="localhost" />
                </if>
                <if condition="hostName == 'localhost'">
                    <set field="hostName" value="localhost:8080" />
                </if>
                <if condition="hostName.indexOf('.', hostName.indexOf('.') + 1) != -1"><!-- two
                    dots? -->
                    <set field="hostName" from="hostName.substring(hostName.indexOf('.')+1)" />
                </if>
                <set field="hostName" value="${productStoreId}.${hostName}" />
                <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="stores">
                    <econdition field-name="productStoreId" value="POPC_DEFAULT" />
                </entity-find>
                <iterate list="stores" entry="store">
                    <service-call name="create#mantle.product.store.ProductStoreSetting"
                        in-map="store + [ productStoreId: productStoreId,
                        settingValue: store.settingValue.replace('DEFAULT_ROOT',
                            topResource.resourceId).replace('localhost', hostName)]" />
                </iterate>

                <!-- create ecommerce website categories and root for popreststore -->
                <entity-find entity-name="mantle.product.category.ProductCategory"
                    list="catgs">
                    <econdition field-name="ownerPartyId" value="_NA_" />
                </entity-find>
                <!-- translate categoryId to store type and root catg-->
                <set field="typesList"
                    from="[
                    'PopcAllProducts': ['PsctSearch','PsctPurchaseAllow','PsctViewAllow'],
                    'PopcDeals': ['PsctPromotions'],
                    'PopcNew': ['PsctNewProducts'],
                    'PopcFeatured': ['PsctFeatured'],
                    'PopcHome': ['PsctHomePage'],
                    'PopcBrowseRoot': ['PsctBrowseRoot'],
                    ]" />
                <iterate list="catgs" entry="catg">
                    <!-- only do lowercase categoryId's connected to productStore-->
                    <if condition="catg.productCategoryId == catg.productCategoryId.toUpperCase()">
                        <continue />
                    </if>
                    <if condition="catg.productCategoryId == 'PopcAllProducts'">
                        <set field="productCategoryTypeEnumId" value="PctRoot" /><!-- rootCatg -->
                        <else>
                            <set field="productCategoryTypeEnumId" value="PctCatalog" />
                        </else>
                    </if>
                    <service-call name="create#mantle.product.category.ProductCategory"
                        out-map="context"
                        in-map="catg + [
                            productCategoryId: null, pseudoId: null,
                            ownerPartyId: ownerPartyId,
                            productCategoryTypeEnumId: productCategoryTypeEnumId,
                            ]" />
                    <if condition="productCategoryTypeEnumId == 'PctRoot'">
                        <set field="rootProductCategoryId" from="productCategoryId" />
                    </if>
                    <set field="types" from="typesList[catg.productCategoryId]" />
                    <!-- connect to product store -->
                    <iterate list="types" entry="type">
                        <service-call name="create#mantle.product.store.ProductStoreCategory"
                            in-map="[productStoreId: productStoreId,
                            productCategoryId: productCategoryId,
                            storeCategoryTypeEnumId: type ]" />
                    </iterate>
                </iterate>
                <!-- DBResources just 2 dependent levels-->
                <entity-find entity-name="moqui.resource.DbResource" list="resources1">
                    <econdition field-name="parentResourceId" value="DEFAULT_ROOT" />
                </entity-find>
                <iterate list="resources1" entry="resource1">
                    <service-call name="create#moqui.resource.DbResource"
                        in-map="resource1 + [resourceId: null,
                                parentResourceId: topResource.resourceId]"
                        out-map="newResource1" />
                    <if condition="resource1.isFile == 'Y'">
                        <entity-find-one entity-name="moqui.resource.DbResourceFile"
                            value-field="rFile">
                            <field-map field-name="resourceId" from="resource1.resourceId" />
                        </entity-find-one>
                        <service-call name="create#moqui.resource.DbResourceFile"
                            in-map="rFile + [resourceId: newResource1.resourceId]" />
                        <entity-find entity-name="moqui.resource.DbResourceFileHistory"
                            list="histories">
                            <econdition field-name="resourceId" from="resource1.resourceId" />
                        </entity-find>
                        <iterate list="histories" entry="history">
                            <service-call name="create#moqui.resource.DbResourceFileHistory"
                                in-map="history + [resourceId: newResource1.resourceId]" />
                        </iterate>
                    </if>
                    <entity-find entity-name="moqui.resource.DbResource" list="resources2">
                        <econdition field-name="parentResourceId" from="resource1.resourceId" />
                    </entity-find>
                    <iterate list="resources2" entry="resource2">
                        <service-call name="create#moqui.resource.DbResource"
                            in-map="resource2 + [resourceId: null, 
                                    parentResourceId: newResource1.resourceId]"
                            out-map="newResource2" />
                        <if condition="resource2.isFile == 'Y'">
                            <entity-find-one entity-name="moqui.resource.DbResourceFile"
                                value-field="rFile">
                                <field-map field-name="resourceId" from="resource2.resourceId" />
                            </entity-find-one>
                            <service-call name="create#moqui.resource.DbResourceFile"
                                in-map="rFile + [resourceId: newResource2.resourceId]" />
                            <entity-find entity-name="moqui.resource.DbResourceFileHistory"
                                list="histories">
                                <econdition field-name="resourceId" from="resource2.resourceId" />
                            </entity-find>
                            <iterate list="histories" entry="history">
                                <service-call name="create#moqui.resource.DbResourceFileHistory"
                                    in-map="history + [resourceId: newResource2.resourceId]" />
                            </iterate>
                        </if>
                    </iterate>
                </iterate>

                <!-- productStore images -->
                <entity-find entity-name="growerp.store.ProductStoreContent" list="storeImages">
                    <econdition field-name="productStoreId" value="POPC_DEFAULT" />
                </entity-find>
                <iterate list="storeImages" entry="image">
                    <service-call name="create#growerp.store.ProductStoreContent"
                        in-map="image + [productStoreContentId: null, productStoreId: productStoreId]" />
                </iterate>

                <!-- search function -->
                <!--service-call
                name="org.moqui.impl.EntityServices.clone#DataDocument"
                    in-map="[dataDocumentId: 'MantleProduct', newDataDocumentId: 'P' + productStoreId,
                                newIndexName: 'i' + productStoreId]" />
                <service-call name="create#moqui.entity.document.DataDocumentCondition"
                    in-map="[dataDocumentId: 'P' + productStoreId, conditionSeqId: '01',
                        fieldNameAlias: 'productStoreId', fieldValue: productStoreId, postQuery: 'Y']" />
                <service-call name="create#moqui.entity.feed.DataFeedDocument"
                    in-map="[dataFeedId: 'PopCommerceSearch', dataDocumentId: 'P' + productStoreId]" /-->

                <!-- add to productStore-->
                <!--service-call
                name="update#mantle.product.store.ProductStore"
                    in-map="productStoreId: productStoreId, productDataDocumentId: 'P' + productStoreId" /-->
                <!-- index documents (copied from -->
                <!--entity-find
                entity-name="moqui.entity.feed.DataFeedDocument" list="dfDocList"
                    cache="false">
                    <econdition field-name="dataFeedId" value="PopCommerceSearch" />
                    <econdition field-name="dataDocumentId" value="P$productStoreId" />
                </entity-find>

                <if condition="!dfDocList">
                    <return error="true"
                        message="No DataDocuments found for DataFeed ID ${dataFeedId}${dataDocumentId ? ' and DataDocument
                ID ' + dataDocumentId : ''}" />
                </if>

                <set field="documentsIndexed" from="0" /-->
                <!--script><![CDATA[
                    import org.moqui.context.ExecutionContext
                    import java.util.concurrent.Future

                    ExecutionContext ec = context.ec
                    def elasticClient = ec.factory.elastic.getClient(clusterName)
                    if (elasticClient == null) {
                        ec.message.addMessage("No Elastic Client found for cluster name ${clusterName}, not indexing
                documents", "danger")
                        return
                    }
                    String feedReceiveServiceName = df.feedReceiveServiceName ?:
                'org.moqui.search.SearchServices.index#DataDocuments'

                    for (Map dfDoc in dfDocList) {
                        // make sure the index exists
                        Map dataDocument = ec.entity.fastFindOne("moqui.entity.document.DataDocument", true, false,
                dfDoc.dataDocumentId)
                        if (dataDocument?.indexName) elasticClient.checkCreateDataDocumentIndexes((String)
                dataDocument.indexName)

                        int docListSize = ec.entity.entityDataDocument.feedDataDocuments(dfDoc.dataDocumentId, null,
                                fromUpdateStamp, thruUpdatedStamp, feedReceiveServiceName, batchSize)
                        documentsIndexed += docListSize
                    }
                ]]></script-->
            </if>

            <!--message>Indexed
            ${documentsIndexed} documents for feed ${dataFeedId} in ${System.currentTimeMillis() -
            startTime}ms</message-->
            <!-- hotel app not using categories but need one for products -->
            <if condition="classificationId == 'AppHotel'">
                <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                    <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                </entity-find>
                <if condition="!rootList">
                    <return error="true"
                        message="Root category not found for ownerPartyId: $ownerPartyId" />
                </if>
                <set field="rootProductCategoryId" from="rootList[0].productCategoryId" />
                <service-call name="create#mantle.product.category.ProductCategory"
                    in-map="[categoryName: 'rooms',
                        description: 'Dummy category to connect the room types',
                        productCategoryTypeEnumId: 'PctCatalog',
                        ownerPartyId: ownerPartyId]"
                    out-map="context" />
                <service-call
                    name="create#mantle.product.category.ProductCategoryRollup"
                    in-map="[parentProductCategoryId: rootProductCategoryId,
                            productCategoryId: productCategoryId]" />
            </if>
            <if condition="demoData">
                <service-call name="growerp.100.PartyServices100.load#DemoData"
                    in-map="[ownerPartyId: ownerPartyId,
                        companyPartyId: companyPartyId,
                        currencyId: currencyId,
                        classificationId: classificationId,
                        userPartyId: userPartyId]" />
            </if>
            <!-- return the created product store -->
            <entity-find-one entity-name="mantle.product.store.ProductStore"
                value-field="productStore">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
        </actions>
    </service>

    <!--internal
    service used in register to run async-->
    <service verb="load" noun="DemoData" transaction-timeout="3600">
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="companyPartyId" required="true" />
            <parameter name="userPartyId" required="true" />
            <parameter name="currencyId" />
            <parameter name="classificationId" />
            <parameter name="counterMax" default="1" type="Integer" />
        </in-parameters>
        <actions>
            <log
                message="creating demo data for app: $classificationId for owner: $ownerPartyId and company: $companyPartyId" />
            <!-- get single productStore/website for main company -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId" />
            <set field="facilityId" from="stores[0].inventoryFacilityId" />

            <!-- get root (browse) category -->
            <entity-find entity-name="mantle.product.store.ProductStoreCategory"
                list="browseRootList">
                <econdition field-name="storeCategoryTypeEnumId" value="PsctBrowseRoot" />
                <econdition field-name="productStoreId" from="productStoreId" />
            </entity-find>
            <if condition="!browseRootList">
                <return error="true"
                    message="Root browse category not found for companyId: $companyPartyId" />
            </if>
            <set field="browseRootProductCategoryId" from="browseRootList[0].productCategoryId" />
            <!-- root category -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!rootList">
                <return error="true"
                    message="Root category not found for ownerPartyId: $ownerPartyId" />
            </if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId" />

            <set field="companyCount" from="companyPartyId.substring(3,6)" />

            <set field="users"
                from="[
                [ firstName: 'James-a', lastName: 'Smith', emailAddress: 'james@example.com',
                    locale: 'EN', username: '@@james', userGroupId: 'GROWERP_M_ADMIN' ,
                    image: 'demoFaces/1_m.jpg', role: 'OrgInternal'],
                [ firstName: 'John-e', lastName: 'Williams', emailAddress: 'john@example.com',
                    locale: 'EN', username: '@@john', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/2_m.jpg' ,role: 'OrgInternal'],
                [ firstName: 'Robert-c', lastName: 'Johnson', emailAddress: 'robert@example.com',
                    locale: 'EN', username: '@@robert', role: 'Customer',
                    image: 'demoFaces/3_m.jpg', companyName: 'Trust Fund-c'],
                [ firstName: 'Michael-l', lastName: 'Brown',
                    locale: 'EN', username: '@@michael', role: 'Lead',
                    image: 'demoFaces/4_m.jpg', companyName: 'Academic Advantage-l'],
                [ firstName: 'William-s', lastName: 'Jones',
                    locale: 'EN', username: '@@william', role: 'Supplier',
                    image: 'demoFaces/5_m.jpg', companyName: 'Gables Tutoring And Test Prep-s'],

                [ firstName: 'David-a', lastName: 'Miller', emailAddress: 'david@example.com',
                    locale: 'EN', image: 'demoFaces/6_m.jpg', role: 'OrgInternal'],
                [ firstName: 'Mary-e', lastName: 'Davis', emailAddress: 'Mary@example.com',
                    locale: 'EN', image: 'demoFaces/1_f.jpg',  role: 'OrgInternal' ],
                [ firstName: 'Linda-c', lastName: 'Garcia',  role: 'Customer',
                    locale: 'EN', image: 'demoFaces/2_f.jpg', companyName: 'Miami Learning Center-c'],
                [ firstName: 'Barbara-l', lastName: 'Rodriguez', role: 'Lead',
                    locale: 'EN', image: 'demoFaces/3_f.jpg', companyName: 'TestMasters-l'],
                [ firstName: 'Maria-s', lastName: 'Wilson',  role: 'Supplier',
                    locale: 'EN', image: 'demoFaces/4_f.jpg', companyName: 'Wavelength Suppliers-s'],
            ]" />

            <set field="opportunities"
                from="[
                [ opportunityName: 'The best opportunity', description: 'the best oppr description',
                    nextStep: 'not sure yet', estAmount: 1000, estProbability: 33,
                    opportunityStageId: 'Prospecting'],
                [ opportunityName: 'The second best opportunity', description: 'the secondbest oppr description',
                    nextStep: 'not sure yet', estAmount: 5000, estProbability: 66,
                    opportunityStageId: 'Proposal']
            ]" />

            <set field="tasks"
                from="[
                    [ taskType: 'todo', taskName: 'The first task' ],
                    [ taskType: 'todo', taskName: 'The second task' ],
                    [ taskType: 'todo', taskName: 'The third task' ],
                    [ taskType: 'todo', taskName: 'The fourth task' ],
                    [ taskType: 'todo', taskName: 'The fifth task' ]
            ]" />

            <script><![CDATA[
                var jsonData1 = '{"elements":[{"positionDx":133.09437144886374,"positionDy":167.47327769886346,"size.width":119.0,"size.height":100.0,"text":"sales?","textColor":4278190080,"fontFamily":null,"textSize":24.0,"textIsBold":false,"id":"7983a5a9-3613-47ea-80ae-7949d2de4db1","kind":1,"handlers":[1,0,3,2],"handlerSize":15.0,"backgroundColor":4294967295,"borderColor":4280391411,"borderThickness":3.0,"elevation":4.0,"next":[{"destElementId":"dd764264-142c-4863-b523-104c12c718d0","arrowParams":{"thickness":1.7,"color":4278190080,"startArrowPositionX":-1.0,"startArrowPositionY":0.0,"endArrowPositionX":0.0,"endArrowPositionY":-1.0}},{"destElementId":"c8e99403-c6c2-464e-8752-3b93355a4a49","arrowParams":{"thickness":1.7,"color":4278190080,"startArrowPositionX":1.0,"startArrowPositionY":0.0,"endArrowPositionX":0.0,"endArrowPositionY":-1.0}}]},{"positionDx":45.281161221590985,"positionDy":321.09810014204567,"size.width":132.0,"size.height":101.0,"text":"Sales Order","textColor":4278190080,"fontFamily":null,"textSize":24.0,"textIsBold":false,"id":"dd764264-142c-4863-b523-104c12c718d0","kind":0,"handlers":[1,0,3,2],"handlerSize":15.0,"backgroundColor":4294967295,"borderColor":4280391411,"borderThickness":3.0,"elevation":4.0,"next":[{"destElementId":"b9e96209-d9cf-4719-9173-7e5c1c10ca5f","arrowParams":{"thickness":1.7,"color":4278190080,"startArrowPositionX":0.0,"startArrowPositionY":1.0,"endArrowPositionX":0.0,"endArrowPositionY":-1.0}}]},{"positionDx":222.91060014204578,"positionDy":316.5632990056819,"size.width":119.0,"size.height":102.0,"text":"Purchase order","textColor":4278190080,"fontFamily":null,"textSize":24.0,"textIsBold":false,"id":"c8e99403-c6c2-464e-8752-3b93355a4a49","kind":0,"handlers":[1,0,3,2],"handlerSize":15.0,"backgroundColor":4294967295,"borderColor":4280391411,"borderThickness":3.0,"elevation":4.0,"next":[{"destElementId":"b9e96209-d9cf-4719-9173-7e5c1c10ca5f","arrowParams":{"thickness":1.7,"color":4278190080,"startArrowPositionX":0.0,"startArrowPositionY":1.0,"endArrowPositionX":0.0,"endArrowPositionY":-1.0}}]},{"positionDx":142.27565696022754,"positionDy":58.117009943181586,"size.width":100.0,"size.height":50.0,"text":"Start","textColor":4278190080,"fontFamily":null,"textSize":24.0,"textIsBold":false,"id":"b98c034f-892b-4fb2-85aa-fca829bf3e39","kind":3,"handlers":[1,0,3,2],"handlerSize":15.0,"backgroundColor":4294967295,"borderColor":4280391411,"borderThickness":3.0,"elevation":4.0,"next":[{"destElementId":"7983a5a9-3613-47ea-80ae-7949d2de4db1","arrowParams":{"thickness":1.7,"color":4278190080,"startArrowPositionX":0.0,"startArrowPositionY":1.0,"endArrowPositionX":0.0,"endArrowPositionY":-1.0}}]},{"positionDx":133.9100674715911,"positionDy":515.928622159091,"size.width":100.0,"size.height":50.0,"text":"End","textColor":4278190080,"fontFamily":null,"textSize":24.0,"textIsBold":false,"id":"b9e96209-d9cf-4719-9173-7e5c1c10ca5f","kind":3,"handlers":[1,0,3,2],"handlerSize":15.0,"backgroundColor":4294967295,"borderColor":4280391411,"borderThickness":3.0,"elevation":4.0,"next":[]}]}']]></script>
            <set field="workflows"
                from="[
                    [ taskType: 'workflowTemplate', taskName: 'Enter a sales/purchase order', jsonImage: jsonData1,
                        workflowTasks: [
                        [flowElementId: '7983a5a9-3613-47ea-80ae-7949d2de4db1', routing: 'selectScreen,Sales,Purchase'],
                        [flowElementId: 'dd764264-142c-4863-b523-104c12c718d0', routing: 'salesOrderEntry'],
                        [flowElementId: 'c8e99403-c6c2-464e-8752-3b93355a4a49', routing: 'purchaseOrderEntry'],
                        [flowElementId: 'b98c034f-892b-4fb2-85aa-fca829bf3e39', routing: 'textScreen,Start screen'],
                        [flowElementId: 'b9e96209-d9cf-4719-9173-7e5c1c10ca5f', routing: 'textScreen,End screen'],
                        ]
                    ]]" />

            <set field="nowDate" from="ec.user.nowTimestamp" />
            <set field="counter" value="0" type="Integer" />
            <while condition="counter++ &lt; counterMax">

                <!-- admin products  and categories -->
                <!-- product/categories for admin are taken from the poprest store and are stored
                under the owner _NA_
                    at initial load time -->
                <!-- uppercase categories are demo, lowercase category id's should be connected to
                the current rootcategory -->

                <!-- copy demo categories -->
                <set field="catgTrans" from="[:]" />
                <set field="prodTrans" from="[:]" />
                <if condition="classificationId == 'AppAdmin'">
                    <entity-find entity-name="mantle.product.category.ProductCategory"
                        list="categories">
                        <econdition field-name="ownerPartyId" value="_NA_" />
                    </entity-find>
                    <set field="sequenceNum" value="1" type="Integer" />
                    <iterate list="categories" entry="category">
                        <if
                            condition="category.productCategoryId.toUpperCase() != category.productCategoryId">
                            <continue />
                        </if>
                        <!-- create category -->
                        <service-call name="create#mantle.product.category.ProductCategory"
                            in-map="category + [productCategoryId: null, pseudoId: null,
                                                ownerPartyId: ownerPartyId]"
                            out-map="context" />
                        <set field="catgTrans[category.productCategoryId]" from="productCategoryId" />
                        <!-- connect to root -->
                        <service-call
                            name="create#mantle.product.category.ProductCategoryRollup"
                            in-map="[parentProductCategoryId: rootProductCategoryId,
                                    productCategoryId: productCategoryId]" />
                        <!-- and ecommerce browseRoot -->
                        <service-call
                            name="create#mantle.product.category.ProductCategoryRollup"
                            in-map="[parentProductCategoryId: browseRootProductCategoryId,
                                    productCategoryId: productCategoryId,
                                    sequenceNum: sequenceNum++]" />
                    </iterate>
                    <!-- create translation table for categories-->
                    <entity-find entity-name="mantle.product.category.ProductCategory"
                        list="categories">
                        <econdition field-name="ownerPartyId" value="_NA_" />
                    </entity-find>
                    <iterate list="categories" entry="category">
                        <entity-find entity-name="mantle.product.category.ProductCategory"
                            list="localProductCategories">
                            <econdition field-name="ownerPartyId" from="ownerPartyId" />
                            <econdition field-name="categoryName" from="category.categoryName" />
                        </entity-find>
                        <set field="catgTrans[category.productCategoryId]"
                            from="localProductCategories[0].productCategoryId" />
                    </iterate>
                    <!-- create product -->
                    <entity-find entity-name="mantle.product.Product" list="products">
                        <econdition field-name="ownerPartyId" value="_NA_" />
                        <econdition field-name="productTypeEnumId" value="PtAsset" />
                    </entity-find>
                    <iterate list="products" entry="product">
                        <service-call name="create#mantle.product.Product"
                            in-map="product + [productId: null, pseudoId: null,
                                    ownerPartyId: ownerPartyId,
                                    pseudoId: null]"
                            out-map="context" />
                        <set field="prodTrans[product.productId]" from="productId" />
                        <!-- content -->
                        <entity-find entity-name="mantle.product.ProductContent"
                            list="prodContents">
                            <econdition field-name="productId" from="product.productId" />
                        </entity-find>
                        <iterate list="prodContents" entry="prodContent">
                            <service-call name="create#mantle.product.ProductContent"
                                in-map="prodContent + [productContentId: null, productId: productId]" />
                        </iterate>
                        <!-- price adjust currency -->
                        <entity-find entity-name="mantle.product.ProductPrice" list="prodPrices">
                            <econdition field-name="productId" from="product.productId" />
                        </entity-find>
                        <iterate list="prodPrices" entry="prodPrice">
                            <service-call name="create#mantle.product.ProductPrice"
                                in-map="prodPrice + [ priceUomId: currencyId, 
                                        productId: productId, productPriceId: null]" />
                        </iterate>
                        <!-- attach product to categories -->
                        <entity-find entity-name="mantle.product.category.ProductCategoryMember"
                            list="members">
                            <econdition field-name="productId" from="product.productId" />
                        </entity-find>
                        <iterate list="members" entry="member">
                            <set field="newProductId" from="prodTrans[product.productId]" />
                            <set field="newCategoryId" from="catgTrans[member.productCategoryId]" />
                            <service-call
                                name="create#mantle.product.category.ProductCategoryMember"
                                in-map="member + [productId: newProductId,
                                            productCategoryId: newCategoryId]" />
                        </iterate>
                        <!-- related assets -->
                        <entity-find entity-name="mantle.product.asset.Asset" list="assets">
                            <econdition field-name="productId" from="product.productId" />
                        </entity-find>
                        <iterate list="assets" entry="asset">
                            <service-call name="create#mantle.product.asset.Asset"
                                in-map="asset + [   assetId: null, 
                                                    productId: productId,
                                                    assetName: 'unusedItem',
                                                    facilityId: facilityId,
                                                    ownerPartyId: companyPartyId,
                                                    acquireCostUomId: currencyId]"
                                out-map="context" />
                            <entity-find entity-name="mantle.product.asset.AssetDetail"
                                list="detailList">
                                <econdition field-name="assetId" from="asset.assetId" />
                            </entity-find>
                            <service-call name="create#mantle.product.asset.AssetDetail"
                                in-map="detailList[0] + [assetDetailId: null, assetId: assetId]" />
                        </iterate>
                    </iterate>
                </if>

                <!-- hotel products -->
                <set field="productsHotel"
                    from="[
                    [ productName: 'Single Room', description:'The Single bed room',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 50, image: 'demoRooms/room1', categoryName: 'rooms'],
                    [ productName: 'Standard Room', description:'The Standard room',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 80, image: 'demoRooms/room2', categoryName: 'rooms'],
                    [ productName: 'Deluxe Room', description:'The Deluxe room offering',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 170, image: 'demoRooms/room3', categoryName: 'rooms'],
                    [ productName: 'Suite', description:'The Suite',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 360, image: 'demoRooms/room4', categoryName: 'rooms'],
                    [ productName: 'Appartment', description:'The living,  two bedroom appartment',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 460, image: 'demoRooms/room5', categoryName: 'rooms'],
                ]" />

                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="aPref">
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                </entity-find-one>

                <if condition="classificationId == 'AppHotel'">
                    <set field="productsIn" from="productsHotel" />
                </if>
                <!-- for hotel just create a one count list -->
                <if condition="classificationId == 'AppHotel' &amp;&amp; counter == 1">
                    <iterate list="productsIn" entry="el">
                        <entity-find entity-name="mantle.product.category.ProductCategory"
                            list="categories">
                            <econdition field-name="categoryName" from="el.categoryName" />
                            <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        </entity-find>
                        <if condition="categories">
                            <set field="productCategoryId" from="categories[0].productCategoryId" />
                            <else>
                                <return error="true"
                                    message="No category ${el.categoryName} found for product: ${el.productName}" />
                            </else>
                        </if>
                        <service-call name="create#mantle.product.Product"
                            in-map="[
                            productTypeEnumId: el.productTypeId,
                            assetClassEnumId: el.assetClassId,
                            assetTypeEnumId: el.assetTypeId,
                            productName: el.productName + (classificationId != 'AppHotel'? counter : ''),
                            description: el.description,
                            ownerPartyId: ownerPartyId,
                            ]"
                            out-map="context" />
                        <service-call
                            name="create#mantle.product.category.ProductCategoryMember"
                            in-map="[productId: productId, productCategoryId: productCategoryId, fromDate: fromDate]" />
                        <service-call name="create#mantle.product.ProductPrice"
                            in-map="[productId: productId, priceTypeEnumId: 'PptList',
                            priceUomId: currencyId, price: el.price,
                            fromDate: ec.user.nowTimestamp,
                            pricePurposeEnumId: 'PppPurchase']" />
                        <service-call name="create#ProductContent"
                            in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageSmall',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Small.png']" />
                        <service-call name="create#ProductContent"
                            in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageMedium',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Medium.png']" />
                    </iterate>

                    <!-- assets -->
                    <set field="assetsHotel"
                        from="[
                        [ assetName: 'Room 01', productName: 'Single Room', ],
                        [ assetName: 'Room 02', productName: 'Single Room'],
                        [ assetName: 'Room 03', productName: 'Single Room'],
                        [ assetName: 'Room 04', productName: 'Standard Room'],                
                        [ assetName: 'Room 05', productName: 'Standard Room'],                
                        [ assetName: 'Room 06', productName: 'Standard Room'],                
                        [ assetName: 'Room 07', productName: 'Deluxe Room'],                
                        [ assetName: 'Room 08', productName: 'Deluxe Room'],                
                        [ assetName: 'Room 09', productName: 'Suite'],                
                        [ assetName: 'Room 10', productName: 'Suite'],                
                        [ assetName: 'Room 11', productName: 'Appartment'],                
                        ]" />
                    <set field="assetsAdmin"
                        from="[
                        [ assetName: '01', productName: 'wiskey'],
                        [ assetName: '02', productName: 'wiskey'],
                        [ assetName: '03', productName: 'wiskey'],
                        [ assetName: '04', productName: 'macaroni'],
                        [ assetName: '05', productName: 'macaroni'],
                        [ assetName: '06', productName: 'macaroni'],
                        [ assetName: '07', productName: 'hamburger'],
                        [ assetName: '08', productName: 'hamburger'],
                        [ assetName: '09', productName: 'cola'],           
                        [ assetName: '10', productName: 'cola'],
                        ]" />
                    <if condition="classificationId == 'AppHotel'">
                        <set field="assetsIn" from="assetsHotel" />
                    </if>
                    <if condition="classificationId == 'AppAdmin'">
                        <set field="assetsIn" from="assetsAdmin" />
                    </if>

                    <!-- find warehouse -->
                    <entity-find entity-name="mantle.facility.Facility" limit="1" list="facilities">
                        <econdition field-name="ownerPartyId" from="companyPartyId" />
                    </entity-find>
                    <set field="facilityId" from="facilities[0].facilityId" />

                    <set field="xLoc" value="0" type="Integer" />
                    <iterate list="assetsIn" entry="asset">
                        <entity-find entity-name="mantle.product.Product" list="products">
                            <econdition field-name="ownerPartyId" from="ownerPartyId" />
                            <econdition field-name="productName"
                                from="asset.productName + (classificationId != 'AppHotel'? counter : '')" />
                        </entity-find>
                        <if condition="products">
                            <set field="product" from="products[0]" />
                            <else>
                                <continue />
                            </else>
                        </if>
                        <!-- create location -->
                        <service-call name="create#mantle.facility.FacilityLocation"
                            in-map="[facilityId: facilityId,
                                        description: 'loc' + xLoc++]"
                            out-map="context" />

                        <!-- do not put fixed asset in inventory we do not want the normal reserve
                        process to work -->
                        <service-call name="create#mantle.product.asset.Asset" out-map="context"
                            in-map="
                            productId: product.productId,
                            classEnumId: product.assetClassEnumId,
                            hasQuantity: 'N',
                            quantityOnHandTotal: 1,
                            assetTypeEnumId: product.assetTypeEnumId,
                            assetName: asset.assetName,
                            ownerPartyId: companyPartyId,
                            statusId: 'AstAvailable',
                            facilityId: product.assetTypeEnumId != 'AstTpFixed'? facilityId : null,
                            locationSeqId: product.assetTypeEnumId != 'AstTpFixed'?  locationSeqId : null
                            " />
                        <service-call name="create#mantle.product.asset.AssetDetail"
                            in-map="[assetId: assetId]" />
                    </iterate>
                </if>

                <!-- users only load with the first app -->
                <entity-find-count entity-name="mantle.party.PartyClassificationAndAppl"
                    count-field="partyClassifications">
                    <econdition field-name="partyId" from="ownerPartyId" />
                    <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
                </entity-find-count>
                <if condition="partyClassifications == 1">
                    <set field="dbLeads" from="[]" />
                    <set field="dbEmployees" from="[]" />
                    <iterate list="users" entry="us">
                        <if condition="us.companyName">
                            <set field="company" from="[name: us.companyName, role: us.role]" />
                            <else>
                                <set field="company" from="[partyId: companyPartyId]" />
                            </else>
                        </if>
                        <set field="userIn"
                            from="[
                            firstName: us.firstName,
                            lastName: us.lastName + counter,
                            email: us.emailAddress? us.emailAddress.substring(0,us.emailAddress.indexOf('@')) + counter + companyCount + us.emailAddress.substring(us.emailAddress.indexOf('@')) : null,
                            locale: 'EN',
                            loginName: us.userGroupId? us.username + counter + companyCount : null,
                            userGroupId: us.userGroupId ? us.userGroupId : null,
                            company: company ,
                        ]" />

                        <service-call name="growerp.100.PartyServices100.create#User"
                            in-map="[user: userIn]" out-map="outMap" />
                        <script>
                            if(us.role == 'OrgInternal') dbEmployees.add(outMap)
                            if(us.role == 'Lead') dbLeads.add(outMap)
                        </script>
                    </iterate>
                    <!-- opportunities -->
                    <set field="index" value="0" type="Integer" />
                    <iterate list="opportunities" entry="opp">
                        <set field="employeeUser"
                            from="[partyId: index%2 == 0
                            ? dbEmployees[0].user.partyId : dbEmployees[1].user.partyId]" />
                        <set field="leadUser"
                            from="[partyId: index%2 == 0
                            ? dbLeads[0].user.partyId : dbLeads[1].user.partyId]" />
                        <set field="oppIn"
                            from="[
                            opportunityName: opp.opportunityName,
                            description: opp.description,
                            nextStep: opp.nextStep,
                            estAmount: opp.estAmount,
                            estProbability: opp.estProbability,
                            opportunityStageId: opp.opportunityStageId,
                            ownerPartyId: companyPartyId,
                            employeeUser: employeeUser,
                            leadUser: leadUser
                        ]" />
                        <service-call name="growerp.100.CrmServices100.create#Opportunity"
                            in-map="[opportunity: oppIn]" out-map="context" />
                        <set field="index" from="index + 1" />
                    </iterate>
                </if>

                <!-- create facility locations if not exist yet-->
                <entity-find entity-name="mantle.facility.FacilityLocation" list="locations">
                    <econdition field-name="facilityId" from="facilityId" />
                </entity-find>
                <if condition="!locations">
                    <entity-find entity-name="mantle.facility.FacilityLocation" list="locs">
                        <econdition field-name="facilityId" value="DEFAULT_WH" />
                    </entity-find>

                    <iterate list="locs" entry="loc">
                        <service-call name="create#mantle.facility.FacilityLocation"
                            in-map="loc + [facilityId: facilityId]" />
                    </iterate>
                </if>


                <!-- orders -->
                <set field="ordersAdmin"
                    from="[
                    [ quantity: 5, price: 22.1, orderName: 'first generated order', productName: 'Hoodie'],
                    [ quantity: 2, price: 20.1, orderName: 'first generated order', productName: 'Baseball'],
                    [ quantity: 4, price: 29.11, orderName: 'first generated order', productName: '32GB'],
                    [ quantity: 3, price: 12.1, orderName: 'second generated order', productName: 'Coffee'],
                    ]" />
                <!-- set time at mid day noon -->
                <set field="nowDate" from="ec.user.nowTimestamp" />
                <set field="nowDate"
                    from="ec.l10n.parseTimestamp(ec.l10n.format(nowDate, 'yyyy-MM-dd') + ' 12:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')" />
                <set field="ordersHotel"
                    from="[
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(5), 
                        rentalThruDate: nowDate.plus(8), 
                        price: 90, orderName: 'first generated Hotel order'],
                    [ productName: 'Single Room', quantity: 2,
                        rentalFromDate: nowDate.plus(10),
                        rentalThruDate: nowDate.plus(15), 
                        orderName: 'second generated Hotel order'],                    
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(17), quantity: 1,
                        rentalThruDate: nowDate.plus(18), 
                        price: 110, orderName: 'third generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1,
                        rentalFromDate: nowDate.plus(20), quantity: 1,
                        rentalThruDate: nowDate.plus(21), 
                        price: 77, orderName: 'fourth generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1, 
                        rentalFromDate: nowDate.plus(12), quantity: 1,
                        rentalThruDate: nowDate.plus(14), 
                            orderName: 'fifth generated Hotel order'],
                    [ productName: 'Suite', quantity: 1,
                        rentalFromDate: nowDate.plus(4), quantity: 1,
                        rentalThruDate: nowDate.plus(11), 
                        orderName: 'fifth generated Hotel order'],
                    [ productName: 'Appartment', quantity: 1,
                        rentalFromDate: nowDate.plus(1), quantity: 1,
                        rentalThruDate: nowDate.plus(3), 
                        orderName: 'fifth generated Hotel order'],
                    [ productName: 'Appartment', quantity: 1,
                        rentalFromDate: nowDate.plus(4), quantity: 1,
                        rentalThruDate: nowDate.plus(7), 
                        orderName: 'fifth generated Hotel order'],
                    ]" />

                <if condition="classificationId == 'AppAdmin'">
                    <set field="ordersIn" from="ordersAdmin" />
                </if>
                <if condition="classificationId == 'AppHotel'">
                    <set field="ordersIn" from="ordersHotel" />
                </if>
                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="customers">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyRole" value="Customer" />
                    <econdition field-name="customerStatusId" value="CUSTOMER_QUALIFIED" />
                </entity-find>
                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="suppliers">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyRole" value="Supplier" />
                </entity-find>
                <set field="index" type="Integer" value="0" />
                <iterate list="ordersIn" entry="order">
                    <!-- check if exists -->
                    <entity-find entity-name="mantle.order.OrderHeader" list="orders">
                        <econdition field-name="orderName" from="order.orderName" />
                    </entity-find>
                    <if condition="orders">
                        <!--exist
                        it so use orderId -->
                        <set field="orderId" from="orders.orderId" />
                        <else>
                            <!-- not exist so create -->
                            <service-call name="mantle.order.OrderServices.create#Order"
                                in-map="[
                                    statusId: 'OrderOpen',
                                    currencyUomId: aPref.baseCurrencyUomId,
                                    productStoreId: stores[0].productStoreId,
                                    placedDate: ec.user.nowTimestamp,
                                    customerPartyId: customers[index%2].companyPartyId,
                                    vendorPartyId: companyPartyId,
                                ]"
                                out-map="context" />
                            <if condition="customers[index%2].personPartyId">
                                <service-call name="create#mantle.order.OrderPartParty"
                                    in-map="[orderId: orderId, orderPartSeqId: orderPartSeqId,
                                    partyId: customers[index%2].personPartyId,
                                    roleTypeId: 'CustomerContactPerson']" />
                            </if>
                        </else>
                    </if>
                    <entity-find entity-name="growerp.mobile.product.ProductAndCategoryAndPrices"
                        list="products" limit="1">
                        <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        <econdition field-name="productName" operator="like"
                            value="%${order.productName}%" />
                    </entity-find>
                    <service-call
                        name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [productId: products[0].productId,
                                            itemTypeEnumId: classificationId == 'AppAdmin'
                                                ? 'ItemProduct': 'ItemRental',
                                            description: order.productName,
                                            unitAmount: order.price ?: products[0].price,
                                            requiredByDate: order.reservationDate,
                                            quantity: order.quantity]"
                        out-map="context" />
                    <if condition="classificationId == 'AppHotel'">
                        <while condition="order.quantity--">
                            <service-call name="create#growerp.product.AssetRental"
                                in-map="[ productId: products[0].productId,
                                orderId: orderId, orderItemSeqId: orderItemSeqId,
                                rentalFromDate: order.rentalFromDate, rentalThruDate: order.rentalThruDate
                                ]"
                            />
                        </while>
                    </if>
                    <set field="order.orderId" from="orderId" />
                    <service-call in-map="[order: [orderId: orderId, statusId:'OrderPlaced']]"
                        name="growerp.100.FinDocServices100.update#Order" />
                    <set field="index" from="index + 1" />
                </iterate>

                <!-- tasks -->
                <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                    list="employees">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="companyPartyId" from="companyPartyId" />
                    <econdition field-name="companyRole" value="OrgInternal" />
                </entity-find>
                <set field="index" value="0" type="Integer" />
                <iterate list="tasks" entry="task">
                    <!-- add task -->
                    <set field="taskIn"
                        from="[taskType: task.taskType,
                        name: task.name,
                        statusId: 'planning',
                    ]" />
                    <service-call name="growerp.100.TaskServices100.create#Task"
                        in-map="[task: taskIn]" out-map="context" />
                    <!-- time entry -->
                    <set field="teIn"
                        from="[
                        taskId: task.taskId,
                        partyId: employees[0].personPartyId,
                        hours: index,
                        date: nowDate.plus(1),
                    ]" />
                    <service-call name="growerp.100.TaskServices100.create#TimeEntry"
                        in-map="[timeEntry: teIn]" out-map="context" />
                    <set field="teIn"
                        from="[
                        taskId: task.taskId,
                        partyId: ec.user.userAccount.partyId,
                        hours: index,
                        date: nowDate.plus(3),
                    ]" />
                    <service-call name="growerp.100.TaskServices100.create#TimeEntry"
                        in-map="[timeEntry: teIn]" out-map="context" />
                    <set field="index" from="index + 1" />
                </iterate>
                <iterate list="workflows" entry="task">
                    <service-call name="growerp.100.TaskServices100.create#Task"
                        in-map="[task: task]" out-map="context" />
                </iterate>
            </while>
        </actions>
    </service>

</services>