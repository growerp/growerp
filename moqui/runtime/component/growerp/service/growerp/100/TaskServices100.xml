<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="ProjectTree">
        <out-parameters>
            <parameter name="workEffortList" type="List">
                <parameter name="workEffort" type="Map">
                    <parameter name="id" />
                    <parameter name="taskName" />
                    <parameter name="dependents" type="List">
                        <parameter name="dependent" type="Map">
                            <parameter name="workEffort" type="Map">
                                <parameter name="id" />
                                <parameter name="taskName" />
                            </parameter>
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find offset="start" limit="limit" list="entries"
                entity-name="mantle.work.time.TimeEntryAndWorkEffort">
                <econdition field-name="workTypeEnumId" value="WetTask" />
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="statusId" operator="in"
                    from="['WeApproved','WePlanning','WeInProgress']" />
            </entity-find>
            <set field="taskList" from="[]" />
            <script>
                def getTaskTree(workEffort, dept) {
                    def workEffort = [:];
                    workEffort.l = dept;
                    workEffort.id = workEffort.workEffortId;
                    workEffort.name = workEffortId.workEffortName;
                    workEffort.rollUp = new BigDecimal(workEffortId.actualWorkTime?:"0");
                    def dependents = workEffortIds.findAll { 
                        workEffort.workEffortId == it.parentworkEffortId
                    }
                    workEffort.children = [];
                    dependents.each {
                        def workEffortSave = getTaskTree(it, dept + 1)
                        workEffort.rollUp = workEffort.rollUp.add(workEffortSave.rollUp); 
                        workEffort.children.add(workEffortSave)
                    }
                    return workEffort;
                }

                def projects = workEffortIds.findAll {
                    it.parentWorkEffortId == null }
                projects.each {
                    workEffortList.add(getTaskTree(it, 1));
                }
            </script>
        </actions>
    </service>
    <service verb="get" noun="Task">
        <description> get a single or multiple tasks</description>
        <in-parameters>
            <parameter name="taskId" />
            <parameter name="taskType" /><!-- workflow, workflowTask, toDo, etc ignored when
            taskId-->
            <parameter name="my" default-value="true" /> <!-- my task only? (true/false) -->
            <parameter name="open" default-value="true" /> <!-- open tasks only? (true/false)-->
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="20" type="Integer" />
            <parameter name="isForDropDown" type="Boolean" />
            <parameter name="search" default="null" />
        </in-parameters>
        <out-parameters>
            <parameter name="tasks" type="List">
                <parameter name="task" type="Map">
                    <parameter name="taskId" />
                    <parameter name="parentTaskId" />
                    <parameter name="taskName" />
                    <parameter name="statusId" />
                    <parameter name="description" />
                    <parameter name="startDate" />
                    <parameter name="endDate" />
                    <parameter name="unInvoicedHours" />
                    <parameter name="routing" />
                    <parameter name="jsonImage" />
                    <parameter name="timeEntries" type="List">
                        <parameter name="timeEntry" type="Map">
                            <parameter name="timeEntryId" />
                            <parameter name="taskId" />
                            <parameter name="partyId" />
                            <parameter name="hours" />
                            <parameter name="date" />
                            <parameter name="comments" />
                        </parameter>
                    </parameter>
                    <parameter name="workflowTasks" type="List">
                        <parameter name="taskId" />
                        <parameter name="flowElementId" />
                        <parameter name="taskName" />
                        <parameter name="routing" />
                        <parameter name="statusId" />
                        <!-- links between tasks -->
                        <parameter name="workflowTasks" type="List">
                            <parameter name="taskId" />
                            <parameter name="flowElementId" />
                            <parameter name="routing" />
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <log message="===getting tasks id: $taskId type: ${taskType}" />
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="search != null">
                <set field="searchString" value="%${search}%" />
            </if>
            <!-- only check status for a list -->
            <if
                condition="open == 'true' &amp;&amp; !taskId &amp;&amp; taskType != 'workflowTemplate'">
                <set field="openStatusList"
                    from="['WeApproved','WeInPlanning','WeInProgress']" />
            </if>
            <if condition="my == 'true'">
                <set field="employeePartyId" from="ec.user.userAccount.partyId" />
            </if>
            <set field="tasks" from="[]" />
            <!-- translate frontend Task type with backend-->
            <set field="typeConvert"
                from="[workflow: 'WetWorkflow', WetWorkflow: 'workflow',
                workflowTemplate: 'WetWorkflowTemplate',
                WetWorkflowTemplate: 'workflowTemplate',
                workflowTemplateTask: 'WetWorkflowTemplateTask',
                WetWorkflowTemplateTask: 'workflowTemplateTask',
                workflowTaskTemplate: 'WetWorkflowTaskTemplate',
                WetWorkflowTaskTemplate: 'workflowTaskTemplate',
                todo: 'WetTask', WetTask: 'todo']"
                type="NewMap" />
            <set field="workEffortType" from="typeConvert[taskType]" />
            <if condition="taskId">
                <!-- single task -->
                <entity-find list="entries" entity-name="growerp.task.TaskAndParties">
                    <econdition field-name="workEffortId" from="taskId" />
                    <econdition field-name="ownerPartyId" />
                </entity-find>
                <if condition="!entries">
                    <return error="true" message="Task $taskId not found" />
                </if>
                <set field="workEffortType" from="entries[0].workEffortTypeEnumId" />
                <else>
                    <!-- by type -->
                    <entity-find offset="start" limit="limit" list="entries"
                        entity-name="growerp.task.TaskAndParties">
                        <econdition field-name="workEffortTypeEnumId" from="workEffortType" />
                        <econdition field-name="workEffortId" from="taskId"
                            ignore-if-empty="true" />
                        <econdition field-name="employeePartyId" from="employeePartyId"
                            ignore-if-empty="true" />
                        <econdition field-name="ownerPartyId" />
                        <econdition field-name="statusId" operator="in"
                            from="openStatusList" ignore-if-empty="true" />
                        <econditions combine="or">
                            <econdition field-name="workEffortName" ignore-case="true"
                                operator="like" from="searchString" ignore-if-empty="true" />
                            <econdition field-name="description" ignore-case="true"
                                operator="like" from="searchString" ignore-if-empty="true" />
                        </econditions>
                    </entity-find>
                </else>
            </if>
            <if
                condition="workEffortType == 'WetWorkflow' ||
                            workEffortType == 'WetWorkflowTemplate'">
                <then>
                    <iterate entry="entry" list="entries">
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[docType: 'task', statusId: entry.statusId]"
                            out-map="context" />

                        <!-- get editor content -->
                        <set field="contentText" from="null" />
                        <entity-find entity-name="mantle.work.effort.WorkEffortContent"
                            list="contentList">
                            <econdition field-name="workEffortId" from="entry.workEffortId" />
                            <econdition field-name="contentTypeEnumId" value="WectCreatedMedia" />
                        </entity-find>
                        <if condition="contentList">
                            <set field="contentRef"
                                from="ec.resource.getLocationReference(contentList[0].contentLocation)" />
                            <if condition="contentRef != null">
                                <set field="contentText" from="contentRef.getText()" />
                            </if>
                        </if>
                        <set field="workEffortOut"
                            from="[
                                    taskId: entry.workEffortId,
                                    taskType: typeConvert[entry.workEffortTypeEnumId],
                                    taskName: entry.workEffortName,
                                    description: entry.description,
                                    statusId: convertedStatusId,
                                    jsonImage: contentText,
                                ]" />

                        <!-- get workflow tasks -->
                        <if condition="entry.workEffortTypeEnumId == 'WetWorkflowTemplate'">
                            <set field="workEffortTaskType" value="WetWorkflowTemplateTask" />
                        </if>
                        <if condition="entry.workEffortTypeEnumId == 'WetWorkflow'">
                            <set field="workEffortTaskType" value="WetWorkflowTask" />
                        </if>
                        <entity-find entity-name="mantle.work.effort.WorkEffort" list="children">
                            <econdition field-name="parentWorkEffortId" from="entry.workEffortId" />
                            <econdition field-name="workEffortTypeEnumId" from="workEffortTaskType" />
                        </entity-find>
                        <set field="workflowTasks" from="[]" />
                        <iterate list="children" entry="child">
                            <!-- get workflow task links-->
                            <entity-find entity-name="mantle.work.effort.WorkEffortAssoc"
                                list="links">
                                <econdition field-name="workEffortId" from="child.workEffortId" />
                            </entity-find>
                            <set field="linksOut" from="[]" />
                            <iterate list="links" entry="link">
                                <set field="linkTask" from="[taskId: link.toWorkEffortId]" />
                                <script>linksOut.add(linkTask)</script>
                            </iterate>
                            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                                in-map="[docType: 'task', statusId: child.statusId]"
                                out-map="context" />
                            <set field="workflowTask"
                                from="[taskId: child.workEffortId,
                                    taskName: child.workEffortName,
                                    flowElementId: child.flowElementId,
                                    routing: child.routing,
                                    statusId: convertedStatusId,
                                    workflowTasks: linksOut]"
                            />
                            <script>workflowTasks.add(workflowTask)</script>
                        </iterate>
                        <set field="workEffortOut.workflowTasks" from="workflowTasks" />
                        <script>tasks.add(workEffortOut)</script>
                    </iterate>
                </then>
                <else-if
                    condition="workEffortType == 'WetWorkflowTask'">
                    <iterate entry="entry" list="entries">
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[docType: 'task', statusId: entry.statusId]"
                            out-map="context" />
                        <set field="statusId" from="convertedStatusId" />
                        <set field="workEffortOut"
                            from="[
                                    taskId: entry.workEffortId,
                                    taskType: typeConvert[entry.workEffortTypeEnumId],
                                    parentTaskId: entry.parentWorkEffortId,
                                    taskName: entry.workEffortName,
                                    statusId: convertedStatusId,
                                    routing: entry.routing,
                                ]" />
                        <script>tasks.add(workEffortOut)</script>
                    </iterate>
                </else-if>
                <else-if
                    condition="workEffortType == 'WetWorkflowTaskTemplate'">
                    <iterate entry="entry" list="entries">
                        <set field="workEffortOut"
                            from="[
                                    taskId: entry.workEffortId,
                                    taskType: typeConvert[entry.workEffortTypeEnumId],
                                    description: entry.description,
                                    taskName: entry.workEffortName,
                                    routing: entry.routing,
                                ]" />
                        <script>tasks.add(workEffortOut)</script>
                    </iterate>
                </else-if>
                <else-if condition="workEffortType == 'WetTask'">
                    <iterate entry="entry" list="entries">
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[docType: 'task', statusId: entry.statusId]"
                            out-map="context" />
                        <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntries">
                            <econdition field-name="workEffortId" from="entry.workEffortId" />
                            <econdition field-name="invoiceId" operator="is-null" />
                            <order-by field-name="fromDate" />
                        </entity-find>
                        <set field="teOutList" from="[]" />
                        <set field="unInvoicedHours" value="0" type="Integer" />
                        <iterate list="timeEntries" entry="te">
                            <set field="teOut"
                                from="[
                                timeEntryId: te.timeEntryId,
                                taskId: te.workEffortId,
                                partyId: te.partyId,
                                hours: te.hours?.toString(),
                                date: te.fromDate ? ec.l10n.format(te.fromDate,'yyyy-MM-dd') : null,
                                comments: te.comments
                            ]" />
                            <set field="unInvoicedHours" from="unInvoicedHours + te.hours" />
                            <script>teOutList.add(teOut)</script>
                        </iterate>
                        <if condition="isForDropDown">
                            <set field="workEffortOut"
                                from="[
                                    taskId: entry.workEffortId,
                                    taskType: typeConvert[entry.workEffortTypeEnumId],
                                    parentTaskId: entry.parentWorkEffortId,
                                    taskName: entry.workEffortName,
                                    statusId: convertedStatusId,
                                ]" />
                            <else>
                                <set field="workEffortOut"
                                    from="[
                                        taskId: entry.workEffortId,
                                        taskType: typeConvert[entry.workEffortTypeEnumId],
                                        parentTaskId: entry.parentWorkEffortId,
                                        taskName: entry.workEffortName,
                                        statusId: convertedStatusId,
                                        description: entry.description,
                                        startDate: entry.actualStartDate?
                                            ec.l10n.format(entry.actualStartDate,'yyyy-MM-dd') : null,
                                        endDate: entry.actualCompletionDate?
                                            ec.l10n.format(entry.actualCompletionDate,'yyyy-MM-dd')  : null,
                                        unInvoicedHours: unInvoicedHours.toString(),
                                        timeEntries: teOutList,
                                        ]" />
                            </else>

                        </if>
                        <script>tasks.add(workEffortOut)</script>
                    </iterate>
                </else-if>
                <else>
                    <return error="true"
                        message="Task type $workEffortType($taskType) not supported" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Task">
        <description> Create a task </description>
        <in-parameters>
            <parameter name="task" type="Map" required="true">
                <parameter name="taskType" />
                <parameter name="parentTaskId" />
                <parameter name="taskName" />
                <parameter name="statusId" />
                <parameter name="description" />
                <parameter name="startDate" />
                <parameter name="endDate" />
                <parameter name="unInvoicedHours" />
                <parameter name="jsonImage" />
                <parameter name="routing" />
                <parameter name="workflowTasks" type="List">
                    <parameter name="taskId" />
                    <parameter name="flowElementId" />
                    <parameter name="taskName" />
                    <parameter name="routing" />
                    <parameter name="statusId" />
                    <!-- links between tasks -->
                    <parameter name="workflowTasks" type="List">
                        <parameter name="taskId" />
                        <parameter name="flowElementId" />
                        <parameter name="routing" />
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="task" type="Map">
                <parameter name="taskId" />
                <parameter name="taskType" />
                <parameter name="parentTaskId" />
                <parameter name="taskName" />
                <parameter name="statusId" />
                <parameter name="description" />
                <parameter name="startDate" />
                <parameter name="endDate" />
                <parameter name="unInvoicedHours" />
                <parameter name="routing" />
                <parameter name="timeEntries" type="List">
                    <parameter name="timeEntry" type="Map">
                        <parameter name="timeEntryId" />
                        <parameter name="taskId" />
                        <parameter name="partyId" />
                        <parameter name="hours" />
                        <parameter name="date" />
                        <parameter name="comments" />
                    </parameter>
                </parameter>
                <parameter name="workflowTasks" type="List">
                    <parameter name="taskId" />
                    <parameter name="flowElementId" />
                    <parameter name="taskName" />
                    <parameter name="routing" />
                    <parameter name="statusId" />
                    <!-- links between tasks -->
                    <parameter name="workflowTasks" type="List">
                        <parameter name="taskId" />
                        <parameter name="flowElementId" />
                        <parameter name="routing" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="typeConvert"
                from="[workflow: 'WetWorkflow',
                    workflowTask: 'WetWorkflowTask',
                    workflowTemplate: 'WetWorkflowTemplate',
                    workflowTemplateTask: 'WetWorkflowTemplateTask',
                    workflowTaskTemplate: 'WetWorkflowTaskTemplate',
                    todo: 'WetTask']"
                type="NewMap" />
            <!-- create task -->
            <if condition="!task.statusId || task.statusId.isEmpty()">
                <set field="task.statusId" value="planning" />
            </if>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'task', statusId: task.statusId]" out-map="context" />
            <if condition="typeConvert[task.taskType] != 'WetWorkflowTemplate'">
                <set field="statusId" from="convertedStatusId" />
            </if>
            <service-call name="create#mantle.work.effort.WorkEffort"
                in-map="[
                    parentWorkEffortId: task.parentTaskId,
                    workEffortTypeEnumId: typeConvert[task.taskType],
                    workEffortName: task.taskName,
                    infoUrl: task.routing,
                    statusId: statusId,
                    description: task.description,
                    ownerPartyId: ownerPartyId,
                    actualStartDate: task.startDate ?
                        task.startDate.substring(0,18) : null,
                    actualCompletionDate: task.endDate ?
                        task.endDate.substring(0,18) : null
                 ]"
                out-map="context" />
            <!-- employee owner -->
            <service-call name="create#mantle.work.effort.WorkEffortParty"
                in-map="[
                    workEffortId: workEffortId,
                    partyId: ec.user.userAccount.partyId,
                    roleTypeId: 'Owner',
                    statusId: 'WeptAssigned'
                ]" />
            <if condition="task.customerUser">
                <set field="userRoleTypeid" value="CustomerContactPerson" />
                <set field="companyRoleTypeid" value="Customer" />
                <set field="companyPartyid" from="task.customerUser.company.partyId" />
                <set field="userPartyId" from="task.customerUser.partyId" />
            </if>
            <if condition="task.vendorUser">
                <set field="userRoleTypeid" value="VendorContactPerson" />
                <set field="companyRoleTypeid" value="Vendor" />
                <set field="companyPartyid" from="task.vendorUser.company.partyId" />
                <set field="userPartyId" from="task.vendorUser.partyId" />
            </if>
            <!-- create cust/suppl company -->
            <if condition="task.customerUser || task.vendorUser">
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                        workEffortId: workEffortId,
                        partyId: companyPartyid,
                        roleTypeId: companyRoletypeId,
                        statusId: 'WeptAssigned'
                    ]" />
                <!-- create customer/suppl person-->
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                        workEffortId: workEffortId,
                        partyId: userPartyId,
                        roleTypeId: userRoleTypeId,
                        statusId: 'WeptAssigned'
                    ]" />
            </if>
            <!-- editor json file -->
            <if condition="task.jsonImage">
                <!-- save json file -->
                <set field="location"
                    value="dbresource://$companyPartyId/content/workflowImage${workEffortId}.json" />
                <service-call name="create#mantle.work.effort.WorkEffortContent"
                    in-map="[workEffortId: workEffortId,
                                    ownerPartyId: ownerPartyId,
                                    contentLocation: location,
                                    contentTypeEnumId:  'WectCreatedMedia',
                                    description: 'Workflow json image file',
                                    ]" />
                <set field="docRr"
                    from="ec.resource.getLocationReference(location)" />
                <script>docRr.putText(task.jsonImage)</script>
                <!-- translation list workEffortId and element id -->
                <set field="task.taskId" from="workEffortId" />
                <service-call name="growerp.100.TaskServices100.create#WorkflowTasks"
                    in-map="[task: task, typeConvert: typeConvert]" />
            </if>
            <service-call name="growerp.100.TaskServices100.get#Task"
                in-map="[taskId: workEffortId]" out-map="context" />
            <set field="task" from="tasks[0]" />
        </actions>
    </service>
    <service verb="update" noun="Task">
        <description> Update a task within a project</description>
        <in-parameters>
            <parameter name="task" type="Map" required="true">
                <parameter name="taskId" />
                <parameter name="taskType" />
                <parameter name="parentTaskId" />
                <parameter name="taskName" />
                <parameter name="statusId" />
                <parameter name="description" />
                <parameter name="startDate" />
                <parameter name="endDate" />
                <parameter name="unInvoicedHours" />
                <parameter name="jsonImage" />
                <parameter name="routing" />
                <parameter name="flowElementId" />
                <parameter name="workflowTasks" type="List">
                    <parameter name="taskId" />
                    <parameter name="flowElementId" />
                    <parameter name="routing" />
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="task" type="Map">
                <parameter name="taskId" />
                <parameter name="taskType" />
                <parameter name="parentTaskId" />
                <parameter name="taskName" />
                <parameter name="statusId" />
                <parameter name="description" />
                <parameter name="startDate" />
                <parameter name="endDate" />
                <parameter name="unInvoicedHours" />
                <parameter name="jsonImage" />
                <parameter name="routing" />
                <parameter name="timeEntries" type="List">
                    <parameter name="timeEntry" type="Map">
                        <parameter name="timeEntryId" />
                        <parameter name="taskId" />
                        <parameter name="partyId" />
                        <parameter name="hours" />
                        <parameter name="date" />
                        <parameter name="comments" />
                    </parameter>
                </parameter>
                <parameter name="workflowTasks" type="List">
                    <parameter name="taskId" />
                    <parameter name="flowElementId" />
                    <parameter name="taskName" />
                    <parameter name="routing" />
                    <parameter name="statusId" />
                    <!-- links between tasks -->
                    <parameter name="workflowTasks" type="List">
                        <parameter name="taskId" />
                        <parameter name="flowElementId" />
                        <parameter name="routing" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <log
                message="======updating task: ${task.taskId} with routings: ${task.workflowTasks?.routing}" />
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="growerp.100.TaskServices100.get#Task"
                in-map="[taskId: task.taskId]" out-map="oldTask" /><!-- owner checked here -->
            <if condition="!oldTask">
                <return error="true" message="Task ${task.taskId} not found" />
            </if>
            <set field="typeConvert"
                from="[workflow: 'WetWorkflow',
                    workflowTask: 'WetWorkflowTask',
                    workflowTemplate: 'WetWorkflowTemplate',
                    workflowTemplateTask: 'WetWorkflowTemplateTask',
                    workflowTaskTemplate: 'WetWorkflowTaskTemplate',
                    todo: 'WetTask']"
                type="NewMap" />

            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'task', statusId: task.statusId]" out-map="context" />
            <if
                condition="
                    task.taskName &amp;&amp; oldTask.taskName != task.taskName ||
                    task.description &amp;&amp; oldTask.description != task.description ||
                    task.statusId &amp;&amp; oldTask.statusId != task.statusId ||
                    task.startDate &amp;&amp; oldTask.startDate != task.startDate ||
                    task.routing &amp;&amp; oldTask.routing != task.routing ||
                    task.endDate &amp;&amp; oldTask.endDate != task.endDate">
                <if condition="task.taskType != 'workflowTemplate'">
                    <set field="statusId" from="convertedStatusId" />
                </if>
                <service-call name="update#mantle.work.effort.WorkEffort"
                    in-map="[
                        workEffortId: task.taskId,
                        workEffortName: task.taskName,
                        statusId: statusId,
                        description: task.description,
                        routing: task.routing,
                        actualStartDate: task.startDate ? task.startDate.substring(0,18) : null,
                        actualCompletionDate: task.endDate ? task.endDate.substring(0,18) : null
                    ]" />
            </if>

            <if
                condition="task.customerUser &amp;&amp; oldTask.customerUser.company.partyId != task.customerUser.company.partyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="customers">
                    <econdition field-name="workEffortId" from="task.taskId" />
                    <econdition field-name="roleTypeId" value="Customer" />
                </entity-find>
                <if condition="customers">
                    <set field="customers[0].thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="customers[0]" />
                </if>
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                        workEffortId: task.taskId,
                        partyId: task.customerUser.company.partyId,
                        roleTypeId: 'Customer',
                        statusId: 'WeptAssigned'
                    ]" />
            </if>
            <if
                condition="task.customerUser &amp;&amp; oldTask.customerUser.partyId !=task.customerUser.partyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="customers">
                    <econdition field-name="workEffortId" from="task.taskId" />
                    <econdition field-name="roleTypeId" value="Company" />
                </entity-find>
                <if condition="customers">
                    <set field="customers[0].thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="customers[0]" />
                </if>
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                    workEffortId: task.taskId,
                    partyId: task.customerUser.partyId,
                    roleTypeId: 'CustomerContactPerson',
                    statusId: 'WeptAssigned'
            ]" />
            </if>
            <if
                condition="task.vendorUser &amp;&amp; oldTask.vendorUser.company.partyId !=task.vendorUser.company.partyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="vendors">
                    <econdition field-name="workEffortId" from="task.taskId" />
                    <econdition field-name="roleTypeId" value="Company" />
                </entity-find>
                <if condition="vendors">
                    <set field="vendors[0].thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="vendors[0]" />
                </if>
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                        workEffortId: task.taskId,
                        partyId: task.vendorUser.company.partyId,
                        roleTypeId: 'Vendor',
                        statusId: 'WeptAssigned'
                    ]" />
            </if>
            <if
                condition="task.vendorUser &amp;&amp; oldTask.vendorUser.partyId !=task.vendorUser.partyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="vendors">
                    <econdition field-name="workEffortId" from="task.taskId" />
                    <econdition field-name="roleTypeId" value="Company" />
                </entity-find>
                <if condition="vendors">
                    <set field="vendors[0].thruDate" from="ec.user.nowTimestamp" />
                    <entity-update value-field="vendors[0]" />
                </if>
                <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[
                        workEffortId: task.taskId,
                        partyId: task.vendorUser.partyId,
                        roleTypeId: 'VendorContactPerson',
                        statusId: 'WeptAssigned'
                    ]" />
            </if>
            <!-- editor json file -->
            <if condition="task.jsonImage">
                <!-- save json file  if required -->
                <entity-find entity-name="mantle.work.effort.WorkEffortContent" list="contentList">
                    <econdition field-name="workEffortId" from="task.taskId" />
                </entity-find>
                <if condition="contentList">
                    <set field="docRr"
                        from="ec.resource.getLocationReference(contentList[0].contentLocation)" />
                    <if condition="task.jsonImage != docRr.getText()">
                        <script>docRr.putText(task.jsonImage)</script>
                    </if>
                    <else>
                        <!-- not found so create -->
                        <set field="location"
                            value="dbresource://$companyPartyId/content/workflowImage${task.taskId}.json" />
                        <service-call name="create#mantle.work.effort.WorkEffortContent"
                            in-map="[workEffortId: task.taskId,
                                    ownerPartyId: ownerPartyId,
                                    contentLocation: location,
                                    contentTypeEnumId:  'WectCreatedMedia',
                                    description: 'Workflow json image file',
                                    ]" />
                        <set field="docRr"
                            from="ec.resource.getLocationReference(location)" />
                        <script>docRr.putText(task.jsonImage)</script>
                    </else>
                </if>
            </if>
            <!-- for workflow template check if json file changed -->
            <!-- to update the tasks status in workflow use direct update#task call-->
            <if
                condition="task.taskType == 'workflowTemplate'">
                <!-- &amp;&amp; task.jsonImage != docRr.getText()-->
                <!-- for workflow templates delete existing workflow tasks -->
                <if condition="task.taskType == 'workflowTemplate'">
                    <entity-find entity-name="mantle.work.effort.WorkEffort" list="oldTasks">
                        <econdition field-name="parentWorkEffortId" from="task.taskId" />
                        <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    </entity-find>
                    <iterate list="oldTasks" entry="oldTask">
                        <entity-delete-by-condition entity-name="mantle.work.effort.WorkEffortAssoc">
                            <econdition field-name="workEffortId" from="oldTask.workEffortId" />
                        </entity-delete-by-condition>
                    </iterate>
                    <iterate list="oldTasks" entry="oldTask">
                        <entity-delete-by-condition entity-name="mantle.work.effort.WorkEffort">
                            <econdition field-name="workEffortId" from="oldTask.workEffortId" />
                            <econdition field-name="ownerPartyId" from="ownerPartyId" />
                        </entity-delete-by-condition>
                    </iterate>
                </if>
                <!-- create new tasks translation list workEffortId and element id -->
                <service-call name="growerp.100.TaskServices100.create#WorkflowTasks"
                    in-map="[task: task, typeConvert: typeConvert]" />
            </if>
            <service-call name="growerp.100.TaskServices100.get#Task"
                in-map="[taskId: task.taskId]" out-map="context" />
            <set field="task" from="tasks[0]" />
        </actions>
    </service>

    <service verb="create" noun="WorkflowTasks"><!-- internal use only -->
        <description> Create workflow tasks from the editor json file</description>
        <in-parameters>
            <parameter name="task" type="Map" required="true" />
            <parameter name="typeConvert" type="Map" />
        </in-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- translation list workEffortId and element id -->
            <set field="jsonImageDecoded"
                from="(Map) new groovy.json.JsonSlurper().parseText(task.jsonImage)"
                type="NewMap" />
            <set field="wfIds" from="[:]" />
            <iterate list='jsonImageDecoded["elements"]' entry="element">
                <!-- create workflow tasks -->
                <set field="extraTask"
                    from="task.workflowTasks.find { 
                       el -> el.flowElementId == element.id}" />
                <if condition="task.taskType == 'workflow'">
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[docType: 'task', statusId: extraTask?.statusId]"
                        out-map="context" />
                    <if condition="!convertedStatusId">
                        <set field="convertedStatusId" value="WeInPlanning" />
                    </if>
                </if>
                <if condition="task.taskType == 'workflowTemplate'">
                    <set field="taskType" value="workflowTemplateTask" />
                </if>
                <if condition="task.taskType == 'workflow'">
                    <set field="taskType" value="workflowTask" />
                </if>
                <service-call name="create#mantle.work.effort.WorkEffort"
                    in-map="[flowElementId: element.id,
                           ownerPartyId: ownerPartyId,
                           workEffortTypeEnumId: typeConvert[taskType],
                           workEffortName: element.text,
                           statusId: convertedStatusId,
                           routing: extraTask ? extraTask.routing : null,
                           parentWorkEffortId: task.taskId]"
                    out-map="context" />
                <set field="wfIds[element.id]" from="workEffortId" />
            </iterate>
            <!-- add workflow task links in WorkEffortAssoc-->
            <iterate list='jsonImageDecoded["elements"]' entry="element">
                <iterate list="element.next" entry="link">
                    <service-call name="create#mantle.work.effort.WorkEffortAssoc"
                        in-map="[workEffortId: wfIds[link.destElementId],
                           toWorkEffortId: wfIds[element.id],
                           workEffortAssocTypeEnumId: 'WeatDependsOn' ]" />
                </iterate>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="TimeEntry">
        <description>get hours worked just used internally, no owner check here</description>
        <in-parameters>
            <parameter name="timeEntryId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntry" type="Map">
                <parameter name="timeEntryId" />
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.time.TimeEntry" value-field="te" />
            <set field="timeEntry"
                from="[
                timeEntryId: te.timeEntryId,
                taskId: te.workEffortId,
                partyId: te.partyId,
                hours: te.hours?.toString(),
                comments: te.comments,
                date: te.fromDate ? ec.l10n.format(te.fromDate,'yyyy-MM-dd') : null
            ]" />
        </actions>
    </service>

    <service verb="create" noun="TimeEntry">
        <description>enter hours worked</description>
        <in-parameters>
            <parameter name="timeEntry" type="Map" required="true">
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntry" type="Map">
                <parameter name="timeEntryId" />
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="workEfforts" limit="1">
                <econdition field-name="workEffortId" from="timeEntry.taskId" />
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
            </entity-find>
            <set field="workEffort" from="workEfforts[0]" />
            <if condition="!workEffort">
                <return error="true" message="Task not found: ${timeEntry.taskId}" />
            </if>
            <service-call name="create#mantle.work.time.TimeEntry"
                in-map="[
                timeEntryId: timeEntry.timeEntryId,
                workEffortId: timeEntry.taskId,
                partyId: ec.user.userAccount.partyId,
                hours: timeEntry.hours,
                comments: timeEntry.comments,
                fromDate: timeEntry.date ? timeEntry.date?.substring(0,18) : ec.user.nowTimestamp
            ]"
                out-map="context" />
            <!-- set to inprogress -->
            <if condition="workEffort.statusId == 'WeInPlanning'">
                <service-call name="update#mantle.work.effort.WorkEffort"
                    in-map="[
                    workEffortId: workEffort.workEffortId,
                    statusId: 'WeInProgress'
                ]" />
            </if>
            <service-call name="growerp.100.TaskServices100.get#TimeEntry"
                in-map="[timeEntryId: timeEntryId]" out-map="context" />
        </actions>
    </service>

    <service verb="update" noun="TimeEntry">
        <description>enter hours worked</description>
        <in-parameters>
            <parameter name="timeEntry" type="Map" required="true">
                <parameter name="timeEntryId" />
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntry" type="Map">
                <parameter name="timeEntryId" />
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </out-parameters>
        <actions>
        </actions>
    </service>

    <service verb="delete" noun="TimeEntry">
        <description>remove not yet billed hours</description>
        <in-parameters>
            <parameter name="timeEntry" type="Map" required="true">
                <parameter name="taskId" />
                <parameter name="timeEntryId" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntry" type="Map">
                <parameter name="timeEntryId" />
                <parameter name="taskId" />
                <parameter name="partyId" />
                <parameter name="hours" />
                <parameter name="comments" />
                <parameter name="date" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="workEfforts" limit="1">
                <econdition field-name="workEffortId" from="timeEntry.taskId" />
                <econdition field-name="ownerPartyId" ignore-if-empty="true" />
            </entity-find>
            <if condition="!workEfforts">
                <return error="true" message="Task not found: ${timeEntry.taskId}" />
            </if>
            <entity-find-one entity-name="mantle.work.time.TimeEntry" value-field="teOld">
                <field-map field-name="timeEntryId" from="timeEntry.timeEntryId" />
            </entity-find-one>
            <if condition="teOld &amp;&amp; teOld.invoiceId">
                <return error="true" message="Cannot delete time entry: already invoiced" />
            </if>
            <service-call name="growerp.100.TaskServices100.get#TimeEntry"
                in-map="[timeEntryId: timeEntry.timeEntryId]" out-map="context" />
            <entity-delete value-field="teOld" />
        </actions>
    </service>
</services>