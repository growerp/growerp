<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="import" noun="GlAccounts">
        <description> Import GlAccounts</description>
        <in-parameters>
            <parameter name="glAccounts" required="true" type="List" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <!-- delete existing transactions only initial if present-->
            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="transList">
                <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
            </entity-find>
            <if condition="transList.size() &gt; 1">
                <return error="true"
                    message="Can only delete ledger when when not more than the initial settiung of posted balance." />
            </if>
            <if condition="transList.size() &gt; 0">
                <entity-delete-by-condition
                    entity-name="mantle.ledger.transaction.AcctgTransEntry">
                    <econdition field-name="acctgTransId" from="transList[0].acctgTransId" />
                </entity-delete-by-condition>
                <entity-delete-by-condition entity-name="mantle.ledger.transaction.AcctgTrans">
                    <econdition field-name="acctgTransId" from="transList[0].acctgTransId" />
                </entity-delete-by-condition>
            </if>
            <!-- delete existing ledger -->
            <entity-find entity-name="mantle.ledger.account.GlAccountAndOrganization"
                list="glAccountsOrg">
                <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
                <select-field field-name="glAccountId" />
            </entity-find>
            <entity-delete-by-condition
                entity-name="mantle.ledger.account.GlAccountOrganization">
                <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
            </entity-delete-by-condition>
            <entity-delete-by-condition
                entity-name="mantle.ledger.account.GlAccount">
                <econdition field-name="glAccountId" operator="in" from="glAccountsOrg" />
            </entity-delete-by-condition>
            <!-- create new accounts and collect posted balances for new transactions-->
            <set field="transactions" from="[]" />
            <iterate list="glAccounts" entry="newGlAccount">
                <service-call name="growerp.100.AccountingServices100.create#GlAccount"
                    in-map="[glAccount: newGlAccount]"
                    out-map="createdGlAccount" />
                <!-- collect posted balances -->
                <if condition="newGlAccount.postedBalance">
                    <script>transactions.add([
                                        isDebit: createdGlAccount.glAccount.isDebit,
                                        price: newGlAccount.postedBalance,
                                        glAccount: [glAccountId: createdGlAccount.glAccount.glAccountId],
                                    ])</script>
                </if>
            </iterate>
            <!-- create unposted balance in initial transaction-->
            <if condition="transactions.size() &gt; 0">
                <service-call name="growerp.100.FinDocServices100.create#FinDoc"
                    in-map="finDoc: [docType: 'Transaction', sales: 'true',
                                            description: 'Initial balance',
                                            items: transactions]"
                    out-map="context" />
            </if>
            <!--message
            public="true" type="success">${glAccounts.size()} Ledger accounts with
            ${transactions.size()} initial transactions Upload completed</message-->
        </actions>
    </service>

    <service verb="import" noun="Companies">
        <in-parameters>
            <parameter name="companies" required="true" type="List" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <iterate list="companies" entry="company">
                <if condition="company.partyId == '_MOD_'">
                    <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                        list="parties">
                        <econdition field-name="ownerPartyId" from="relComp.ownerPartyId" />
                        <econdition field-name="companyName" operator="like"
                            value="${company.name}%" />
                    </entity-find>
                    <if condition="parties">
                        <set field="company.partyId" from="parties[0].companyPartyId" />
                        <service-call name="growerp.100.PartyServices100.update#Company"
                            in-map="[company: company]" />
                    </if>
                    <else>
                        <service-call name="growerp.100.PartyServices100.create#Company"
                            in-map="[company: company]" />
                    </else>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="import" noun="Users">
        <in-parameters>
            <parameter name="users" required="true" type="List" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <iterate list="users" entry="user">
                <service-call name="growerp.100.PartyServices100.create#User"
                    in-map="[user: user]" />
            </iterate>
        </actions>
    </service>

    <service verb="import" noun="Products">
        <in-parameters>
            <parameter name="products" required="true" type="List" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <iterate list="products" entry="product">
                <!-- check if related category exist using name, if yes use these-->
                <iterate list="product.categories" entry="category">
                    <entity-find entity-name="mantle.product.category.ProductCategory"
                        list="foundCategories">
                        <econdition field-name="categoryName" from="category.categoryName" />
                        <econdition field-name="ownerPartyId" from="relComp.ownerPartyId" />
                    </entity-find>
                    <if condition="foundCategories">
                        <set field="category.categoryId"
                            from="foundCategories[0].productCategoryId" />
                    </if>
                </iterate>
                <service-call name="growerp.100.CatgProdServices100.create#Product"
                    out-map="result"
                    in-map="[product: product, classificationId: classificationId]" />
            </iterate>
        </actions>
    </service>

    <service verb="import" noun="Categories">
        <in-parameters>
            <parameter name="categories" required="true" type="List" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <iterate list="categories" entry="category">
                <service-call name="growerp.100.CatgProdServices100.create#ProductCategory"
                    in-map="[category: category, classificationId: classificationId]" />
            </iterate>
        </actions>
    </service>

    <!-- depreciated, just used by the screens-->
    <service verb="import" noun="Entities">
        <description> Import general entities</description>
        <in-parameters>
            <parameter name="entities" required="true" type="Map" />
            <parameter name="classificationId" />
        </in-parameters>
        <actions>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp" />
            <if condition="entities.companies">
                <iterate list="entities.companies" entry="company">
                    <if condition="company.partyId == '_MOD_'">
                        <entity-find entity-name="growerp.party.OwnerCompanyDetailAndEmployee"
                            list="parties">
                            <econdition field-name="ownerPartyId" from="relComp.ownerPartyId" />
                            <econdition field-name="companyName" operator="like"
                                value="${company.name}%" />
                        </entity-find>
                        <if condition="parties">
                            <set field="company.partyId" from="parties[0].companyPartyId" />
                            <service-call name="growerp.100.PartyServices100.update#Company"
                                in-map="[company: company]" />
                        </if>
                        <else>
                            <service-call name="growerp.100.PartyServices100.create#Company"
                                in-map="[company: company]" />
                        </else>
                    </if>
                </iterate>
            </if>
            <if condition="entities.users">
                <iterate list="entities.users" entry="user">
                    <service-call name="growerp.100.PartyServices100.create#User"
                        in-map="[user: user]" />
                </iterate>
            </if>
            <if condition="entities.categories">
                <iterate list="entities.categories" entry="category">
                    <service-call name="growerp.100.CatgProdServices100.create#ProductCategory"
                        in-map="[category: category, classificationId: classificationId]" />
                </iterate>
            </if>
            <if condition="entities.products">
                <iterate list="entities.products" entry="product">
                    <!-- check if related category exist using name, if yes use these-->
                    <iterate list="product.categories" entry="category">
                        <entity-find entity-name="mantle.product.category.ProductCategory"
                            list="foundCategories">
                            <econdition field-name="categoryName" from="category.categoryName" />
                            <econdition field-name="ownerPartyId" from="relComp.ownerPartyId" />
                        </entity-find>
                        <if condition="foundCategories">
                            <set field="category.categoryId"
                                from="foundCategories[0].productCategoryId" />
                        </if>
                    </iterate>
                    <service-call name="growerp.100.CatgProdServices100.create#Product"
                        out-map="result"
                        in-map="[product: product, classificationId: classificationId]" />
                </iterate>
                <message public="true" type="success">Products Upload completed</message>
            </if>
            <if condition="entities.assets">
                <iterate list="entities.assets" entry="asset">
                    <service-call name="growerp.100.CatgProdServices100.create#Asset"
                        in-map="[asset: asset, classificationId: classificationId]" />
                </iterate>
                <message public="true" type="success">Assets Upload completed</message>
            </if>
            <if condition="entities.locations">
                <iterate list="entities.locations" entry="location">
                    <service-call name="growerp.100.WarehouseServices100.create#Location"
                        in-map="[location: location]" />
                </iterate>
                <message public="true" type="success">Locations Upload completed</message>
            </if>
            <if condition="entities.glAccounts">
                <!-- delete existing transactions only initial if present-->
                <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="transList">
                    <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
                </entity-find>
                <if condition="transList.size() &gt; 1">
                    <return error="true"
                        message="Can only delete ledger when when not more than the initial settiung of posted balance." />
                </if>
                <if condition="transList.size() &gt; 0">
                    <entity-delete-by-condition
                        entity-name="mantle.ledger.transaction.AcctgTransEntry">
                        <econdition field-name="acctgTransId" from="transList[0].acctgTransId" />
                    </entity-delete-by-condition>
                    <entity-delete-by-condition entity-name="mantle.ledger.transaction.AcctgTrans">
                        <econdition field-name="acctgTransId" from="transList[0].acctgTransId" />
                    </entity-delete-by-condition>
                </if>
                <!-- delete existing ledger -->
                <entity-find entity-name="mantle.ledger.account.GlAccountAndOrganization"
                    list="glAccounts">
                    <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
                    <select-field field-name="glAccountId" />
                </entity-find>
                <entity-delete-by-condition
                    entity-name="mantle.ledger.account.GlAccountOrganization">
                    <econdition field-name="organizationPartyId" from="relComp.companyPartyId" />
                </entity-delete-by-condition>
                <entity-delete-by-condition
                    entity-name="mantle.ledger.account.GlAccount">
                    <econdition field-name="glAccountId" operator="in" from="glAccounts" />
                </entity-delete-by-condition>
                <!-- create new accounts and collect posted balances for new transactions-->
                <set field="transactions" from="[]" />
                <iterate list="entities.glAccounts" entry="newGlAccount">
                    <service-call name="growerp.100.AccountingServices100.create#GlAccount"
                        in-map="[glAccount: newGlAccount]"
                        out-map="createdGlAccount" />
                    <!-- collect posted balances -->
                    <!-- cannot get postalBalance from newGlAccount because newGlAccount is String
                    but should be Map-->
                    <!-- temp solution, get it as a String -->
                    <!--log
                    message="==ng==$newGlAccount" />
                    <set field="postedBalance"
                        from="newGlAccount.split('postedBalance')[1]" />
                    <log message="=1==create posted balance ${postedBalance}" />
                    <set field="postedBalance"
                        from="postedBalance.substring(2,postedBalance.indexOf('}')).replace('&quot;','')" />
                    <log message="=2==create posted balance ${postedBalance}" /-->
                    <if condition="newGlAccount.postedBalance">
                        <script>transactions.add([
                            isDebit: createdGlAccount.glAccount.isDebit,
                            price: newGlAccount.postedBalance,
                            glAccount: [glAccountId: createdGlAccount.glAccount.glAccountId],
                        ])</script>
                    </if>
                </iterate>
                <!-- create unposted balance in initial transaction-->
                <if condition="transactions.size() &gt; 0">
                    <service-call name="growerp.100.FinDocServices100.create#FinDoc"
                        in-map="finDoc: [docType: 'Transaction', sales: 'true',
                                description: 'Initial balance',
                                items: transactions]"
                        out-map="context" />
                </if>
                <message public="true" type="success">${entities.glAccounts.size()} Ledger accounts with ${transactions.size()} initial transactions Upload completed</message>
            </if>
        </actions>
    </service>

    <service verb="get" noun="ExportCategories">
        <description>
            Get Categories information into a CSV file attachement
        </description>
        <in-parameters>
            <parameter name="classificationId"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="fileText" />
        </out-parameters>
        <actions>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[classificationId: classificationId]" out-map="context" />
            <set field="fileText" value="" />
            <script><![CDATA[
                import org.apache.commons.csv.CSVPrinter
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVRecord
                import org.apache.commons.csv.QuoteMode
                StringBuilder outSb = new StringBuilder()
                CSVPrinter printer = CSVFormat.DEFAULT.withHeader(
                    "name", "description", "image").print(outSb)
                for (Map item in categories) {
                    printer.printRecord(item.categoryName,
                                        item.description,
                                        item.image)}
                fileText = outSb.toString()
            ]]></script>
            <!--log
            message="output in catgories CSV: ${fileText}"/-->
        </actions>
    </service>

    <service verb="get" noun="ExportProducts">
        <description>
            Get Products information into a CSV file attachement
        </description>
        <out-parameters>
            <parameter name="fileText" />
        </out-parameters>
        <actions>
            <script>logger.warn("getting products")</script>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                out-map="context" />
            <set field="fileText" value="" />
            <script><![CDATA[
                import org.apache.commons.csv.CSVPrinter
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVRecord
                import org.apache.commons.csv.QuoteMode
                StringBuilder outSb = new StringBuilder()
                CSVPrinter printer = CSVFormat.DEFAULT.withHeader(
                    "name", "description", "Product Type Id", "image", "assetClassId","List Price","Price","Use Warehouse","Nbr of Assets","Category1", "Category2", "Category3").print(outSb)
                for (Map item in products) {
                    printer.printRecord(item.productName,
                                        item.description,
                                        item.productTypeId,
                                        item.image,
                                        item.assetClassId,
                                        item.listPrice,
                                        item.price,
                                        item.requireInventory,
                                        item.assetCount,
                                        item.categories[0] ? item.categories[0].categoryName :'',
                                        item.categories[1] ? item.categories[1].categoryName :'',
                                        item.categories[2] ? item.categories[2].categoryName :'',
                                        )}
                fileText = outSb.toString()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="ExportGlAccounts">
        <description>
            Get ledger Gl Accounts information into a CSV file attachement
        </description>
        <in-parameters>
            <parameter name="classificationId" />
        </in-parameters>
        <out-parameters>
            <parameter name="fileText" />
        </out-parameters>
        <actions>
            <script>logger.warn("getting glAccounts")</script>
            <service-call name="growerp.100.AccountingServices100.get#GlAccount"
                in-map="[limit: 999]"
                out-map="context" />
            <set field="fileText" value="" />
            <script><![CDATA[
                import org.apache.commons.csv.CSVPrinter
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVRecord
                import org.apache.commons.csv.QuoteMode
                StringBuilder outSb = new StringBuilder()
                CSVPrinter printer = CSVFormat.DEFAULT.withHeader(
                    "id", "name", "isDebit", "class", "type","postedBalance").print(outSb)
                for (Map item in glAccountList) {
                    printer.printRecord(item.accountCode,
                                        item.accountName,
                                        item.isDebit,
                                        item.accountClass.description,
                                        item.accountType.description,
                                        item.posteBalance,
                                        )}
                fileText = outSb.toString()
            ]]></script>
        </actions>
    </service>


    <service verb="export" noun="Entities">
        <description> Export general entities</description>
        <in-parameters>
            <parameter name="entityName" required="true" />
            <parameter name="classificationId" required="true" />
        </in-parameters>
        <actions>
            <set field="emailAddress" from="ec.user.userAccount.emailAddress" />
            <set field="userAccount" from="ec.user.userAccount" />
            <set field="bodyParameters" from="[classificationId: classificationId]" />
            <if condition="entityName == 'Category'">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true"
                    in-map="[emailTemplateId: 'GrowerpExportCategories',
                        toAddresses: emailAddress, bodyParameters: bodyParameters]"
                    out-map="context" />
                <message public="true" type="success">A Categories CSV file was sent by email to ${userAccount.emailAddress}.</message>
            </if>
            <if condition="entityName == 'Product'">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true"
                    in-map="[emailTemplateId: 'GrowerpExportProducts',
                        toAddresses: emailAddress, bodyParameters: bodyParameters]"
                    out-map="context" />
                <message public="true" type="success">A Products CSV file was sent by email to ${userAccount.emailAddress}.</message>
            </if>
            <if condition="entityName == 'GlAccount'">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true"
                    in-map="[emailTemplateId: 'GrowerpExportGlAccounts',
                        toAddresses: emailAddress, bodyParameters: bodyParameters]"
                    out-map="context" />
                <message public="true" type="success">A GlAccount CSV file was sent by email to ${userAccount.emailAddress}.</message>
            </if>
        </actions>
    </service>

</services>