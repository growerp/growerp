<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="convert" noun="StatusId">
        <in-parameters>
            <parameter name="docType" required="true" />
            <parameter name="sales" type="Boolean" />
            <parameter name="statusId" />
        </in-parameters>
        <out-parameters>
            <parameter name="convertedStatusId" />
        </out-parameters>
        <actions>
            <!-- activity status -->
            <if condition="docType == 'activity'">
                <set field="activityStatusValues"
                    from="[
                'WeApproved': 'approved',
                'WeCancelled': 'cancelled',
                'WeClosed': 'closed',
                'WeComplete': 'completed',
                'WeInPlanning': 'planning',
                'WeInProgress': 'progress',
                'WeOnHold': 'onHold',
                'approved': 'WeApproved',
                'cancelled': 'WeCancelled',
                'closed': 'WeClosed',
                'completed': 'WeComplete',
                'planning': 'WeInPlanning',
                'progress': 'WeInProgress',
                'onHold': 'WeOnHold'
                ]" />
                <set field="convertedStatusId" from="activityStatusValues[statusId]" />
            </if>
            <!-- Product status and classEnumId translation -->
            <if condition="docType == 'product'">
                <set field="productTypeValues"
                    from="[
                'PtService': 'Service',
                'PtAsset': 'Physical Good',
                'PtFixedAssetUse': 'Rental',
                'Service': 'PtService',
                'Physical Good': 'PtAsset',
                'Rental': 'PtFixedAssetUse',
                ]" />
                <set field="convertedStatusId" from="productTypeValues[statusId]" />
            </if>
            <if condition="docType == 'asset'">
                <set field="assetStatusValues"
                    from="[
                AstAvailable: 'Available',
                Available: 'AstAvailable',
                AstDeactivated: 'Deactivated',
                Deactivated: 'AstDeactivated',
                'In Use': 'AstInUse',
                'AstInUse': 'In Use',
                'Hotel Room': 'AsClsRoom',
                'Restaurant Table': 'AsClsTable',
                'Restaurant Table Area': 'AsClsTableArea',
                'AsClsRoom': 'Hotel Room',
                'AsClsTable': 'Restaurant Table',
                'AsClsTableArea': 'Restaurant Table Area',
                ]" />
                <set field="convertedStatusId" from="assetStatusValues[statusId]" />
            </if>
            <if condition="docType == 'order'">
                <set field="orderStatusValues"
                    from="[
                    OrderOpen: 'FinDocPrep',
                    FinDocPrep: 'OrderOpen',
                    OrderPlaced: 'FinDocCreated',
                    FinDocCreated:'OrderPlaced',
                    OrderApproved: 'FinDocApproved',
                    FinDocApproved: 'OrderApproved',
                    OrderCompleted: 'FinDocCompleted',
                    FinDocCompleted: 'OrderCompleted',
                    OrderCancelled: 'FinDocCancelled',
                    FinDocCancelled:'OrderCancelled'
                ]" />
                <set field="convertedStatusId" from="orderStatusValues[statusId]" />
            </if>
            <if condition="docType == 'shipment'">
                <set field="orderStatusValues"
                    from="[
                    ShipInput: 'FinDocPrep',
                    FinDocPrep: 'ShipInput',
                    ShipScheduled: 'FinDocCreated',
                    FinDocCreated:'ShipScheduled',
                    ShipPacked: 'FinDocApproved',
                    FinDocApproved: 'ShipPacked',
                    ShipShipped: 'FinDocCompleted',
                    FinDocCompleted: 'ShipShipped',
                    ShipDelivered: 'FinDocCompleted',
                    FinDocCompleted: 'ShipDelivered',
                    ShipCancelled: 'FinDocCancelled',
                    FinDocCancelled:'ShipCancelled'
                ]" />
                <set field="convertedStatusId" from="orderStatusValues[statusId]" />
            </if>
            <if condition="docType == 'request'">
                <set field="requestStatusValues"
                    from="[
                    ReqDraft: 'FinDocPrep',
                    FinDocPrep: 'ReqDraft',
                    ReqSubmitted: 'FinDocCreated',
                    FinDocCreated:'ReqSubmitted',
                    ReqInProgress: 'FinDocApproved',
                    FinDocApproved: 'ReqInProgress',
                    ReqCompleted: 'FinDocCompleted',
                    FinDocCompleted: 'ReqCompleted',
                    ReqCancelled: 'FinDocCancelled',
                    FinDocCancelled:'ReqCancelled'
                ]" />
                <set field="convertedStatusId" from="requestStatusValues[statusId]" />
            </if>
            <if condition="docType == 'requestType'">
                <set field="requestTypeValues"
                    from="[
                    RqtConsulation: 'consultation',
                    consultation: 'RqtConsulation',
                    RqtInformation: 'information',
                    information: 'RqtInformation',
                ]" />
                <set field="convertedStatusId" from="requestTypeValues[statusId]" />
            </if>
            <if condition="docType == 'invoice'">
                <if condition="sales == true">
                    <set field="invoiceStatusValues"
                        from="[
                        InvoiceInProcess: 'FinDocPrep',
                        FinDocPrep: 'InvoiceInProcess',
                        InvoiceFinalized: 'FinDocCreated',
                        FinDocCreated: 'InvoiceFinalized',
                        InvoiceSent: 'FinDocApproved',
                        FinDocApproved: 'InvoiceSent',
                        InvoicePmtRecvd: 'FinDocCompleted',
                        FinDocCompleted: 'InvoicePmtRecvd',
                        InvoiceCancelled: 'FinDocCancelled',
                        FinDocCancelled: 'InvoiceCancelled'
                        ]" />
                    <else>
                        <set field="invoiceStatusValues"
                            from="[
                            InvoiceIncoming: 'FinDocPrep',
                            FinDocPrep: 'InvoiceIncoming',
                            InvoiceReceived: 'FinDocCreated',
                            FinDocCreated: 'InvoiceReceived',
                            InvoiceApproved: 'FinDocApproved',
                            FinDocApproved: 'InvoiceApproved',
                            InvoicePmtSent: 'FinDocCompleted',
                            InvoiceBilledThrough: 'FinDocCompleted',
                            FinDocCompleted: 'InvoicePmtSent',
                            InvoiceCancelled: 'FinDocCancelled',
                            FinDocCancelled: 'InvoiceCancelled'
                            ]" />
                    </else>
                </if>
                <set field="convertedStatusId" from="invoiceStatusValues[statusId]" />
            </if>
            <if condition="docType == 'payment'">
                <set field="paymentStatusValues"
                    from="[
                        PmntProposed: 'FinDocPrep',
                        FinDocPrep: 'PmntProposed',
                        PmntPromised: 'FinDocCreated',
                        FinDocCreated: 'PmntPromised',
                        PmntAuthorized: 'FinDocApproved',
                        FinDocApproved: 'PmntAuthorized',
                        PmntDelivered: 'FinDocCompleted',
                        FinDocCompleted: 'PmntDelivered',
                        PmntConfirmed: 'FinDocCompleted',
                        PmntCancelled: 'FinDocCancelled',
                        FinDocCancelled: 'PmntCancelled'
                    ]" />
                <set field="convertedStatusId" from="paymentStatusValues[statusId]" />
            </if>
            <if condition="docType == 'transaction'">
                <set field="transactionStatusValues"
                    from="[
                        NotPosted: 'FinDocPrep',
                        FinDocPrep: 'NotPosted',
                        Posted: 'FinDocCompleted',
                        FinDocCompleted: 'Posted',
                        Cancelled: 'FinDocCancelled',
                        FinDocCancelled: 'Cancelled',
                    ]" />
                <set field="convertedStatusId" from="transactionStatusValues[statusId]" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="FinDoc">
        <description>
            Get financial document which can be Order, Shipment, Invoice, Payment, Transactionon by order
        </description>
        <in-parameters>
            <parameter name="finDocId">
                <description>depending on type can be invoice/payment/order</description>
            </parameter>
            <parameter name="pseudoId" />
            <parameter name="sales" type="Boolean" />
            <parameter name="my" type="Boolean" default-value="false" />
            <parameter name="docType" />
            <parameter name="open" type="Boolean" default-value="true" />
            <parameter name="startDate">
                <description>Format should be YYYY-MM-DD</description>
            </parameter>
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="10" type="Integer" />
            <parameter name="search" default="null" />
            <parameter name="customerCompanyPartyId" />
            <parameter name="rentalFromDate" />
            <parameter name="rentalThruDate" />
            <parameter name="journalId" />
            <parameter name="isPosted" type="Boolean" default-value="false" />
        </in-parameters>
        <out-parameters>
            <parameter name="finDocs" type="List">
                <parameter name="finDoc" type="Map">
                    <parameter name="docType" />
                    <parameter name="sales" type="Boolean" />
                    <parameter name="pseudoId" />
                    <parameter name="id" />
                    <parameter name="orderId" />
                    <parameter name="shipmentId" />
                    <parameter name="invoiceId" />
                    <parameter name="paymentId" />
                    <parameter name="transactionId" />
                    <parameter name="requestId" />
                    <parameter name="isPosted" type="Boolean" />
                    <parameter name="paymentInstrument" />
                    <parameter name="statusId" />
                    <parameter name="creationDate" />
                    <parameter name="placedDate" />
                    <parameter name="description" />
                    <parameter name="otherUser" type="Map">
                        <parameter name="partyId" />
                        <parameter name="firstName" />
                        <parameter name="lastName" />
                        <parameter name="email" />
                    </parameter>
                    <parameter name="otherCompany" type="Map">
                        <parameter name="partyId" />
                        <parameter name="name" />
                    </parameter>
                    <parameter name="shipmentMethod" />
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="postalCode" />
                        <parameter name="city" />
                        <parameter name="province" />
                        <parameter name="country" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="grandTotal" />
                    <parameter name="classificationId" />
                    <parameter name="journal">
                        <parameter name="journalId" />
                        <parameter name="journalName" />
                    </parameter>
                    <parameter name="items" type="List">
                        <parameter name="item" type="Map">
                            <parameter name="itemSeqId" />
                            <parameter name="itemType" type="Map">
                                <parameter name="itemTypeId" />
                                <parameter name="itemTypeName" />
                            </parameter>
                            <parameter name="paymentType" type="Map">
                                <parameter name="paymentTypeId" />
                                <parameter name="paymentTypeName" />
                            </parameter>
                            <parameter name="product" />
                            <parameter name="description" />
                            <parameter name="quantity" />
                            <parameter name="price" />
                            <parameter name="isDebit" type="Boolean" />
                            <parameter name="glAccount">
                                <parameter name="glAccountId" />
                                <parameter name="accountCode" />
                                <parameter name="accountName" />
                            </parameter>
                            <parameter name="asset" type="Map">
                                <parameter name="assetId" />
                                <parameter name="assetName" />
                                <parameter name="location" type="Map">
                                    <parameter name="locationId" />
                                    <parameter name="locationName" />
                                </parameter>
                            </parameter>
                            <parameter name="rentalFromDate" />
                            <parameter name="rentalThruDate" />
                        </parameter>
                    </parameter>
                </parameter>
                <parameter name="requestType" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="startDate">
                <set field="tsDate"
                    from="ec.l10n.parseTimestamp(ec.l10n.format(startDate, 'yyyy-MM-dd')
                        + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')" />
            </if>
            <if condition="search != null">
                <set field="search" value="%${search}%" />
            </if>
            <set field="finDocOut" from="[:]" />
            <set field="finDocs" from="[]" />
            <set field="finDocItems" from="[]" />
            <set field="finDocIds" from="[]" />
            <set field="dayOldDate"
                from="Timestamp.valueOf(ec.user.nowTimestamp.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).plusDays(-1).toLocalDateTime())" />

            <if condition="sales == true">
                <set field="vendorPartyId" from="companyPartyId" />
                <if condition="my">
                    <set field="customerPartyId" from="userCompanyPartyId ?: userPartyId" />
                </if>
            </if>
            <if condition="sales == false">
                <set field="customerPartyId" from="companyPartyId" />
                <if condition="my">
                    <set field="vendorPartyId" from="userCompanyPartyId ?: userPartyId" />
                </if>
            </if>
            <set field="current" value="0" type="Integer" />
            <!-- request -->
            <if condition="docType == 'request'">
                <!-- 'ReqDraft','ReqSubmitted','ReqInProgress','ReqCompleted','ReqCancelled' -->
                <set field="openStatusList" from="['ReqDraft','ReqSubmitted','ReqInProgress']" />
                <if condition="my">
                    <set field="requesterPartyId" from="userCompanyPartyid ?: userPartyId" />
                </if>
                <if condition="finDocId || pseudoId">
                    <entity-find entity-name="growerp.order.RequestAndParty" list="items">
                        <econdition field-name="requestOwnerPartyId" from="companyPartyId" />
                        <econdition field-name="requestId" from="finDocId" ignore-if-empty="true" />
                        <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                        <econdition field-name="requesterPartyId" from="requesterPartyId"
                            ignore-if-empty="true" />
                    </entity-find>
                    <if condition="sales == null">
                        <set field="sales" value="false" type="Boolean" />
                    </if>
                    <else>
                        <if
                            condition="open == true &amp;&amp; !finDocId
                            &amp;&amp; !pseudoId &amp;&amp; !search">
                            <set field="statusList" from="openStatusList" />
                            <set field="fromDate" from="dayOldDate" />
                        </if>
                        <entity-find offset="start" limit="limit"
                            entity-name="growerp.order.RequestAndParty" list="items">
                            <econdition field-name="requestOwnerPartyId" from="companyPartyId" />
                            <econdition field-name="requesterPartyId" from="requesterPartyId"
                                ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="statusId" operator="in" from="statusList"
                                    ignore-if-empty="true" />
                                <econdition field-name="effectiveDate" operator="greater"
                                    from="lastUpdatedStamp" ignore-if-empty="true" />
                            </econditions>
                            <econdition field-name="requestDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="pseudoId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                                <econdition field-name="description" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                            </econditions>
                            <order-by field-name="pseudoId" />
                        </entity-find>
                    </else>
                </if>
                <iterate list="items" entry="item">
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                        out-map="context" />
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: 'requestType', statusId: item.requestType]"
                        out-map="requestType" />
                    <set field="requestPersonCompany"
                        from="item.personCompanyPartyId ? [partyId: item.personCompanyPartyId,
                                pseudoId: item.personCompanyPseudoId,
                                name: item.personCompanyName] : null" />
                    <set field="finDocOut"
                        from="[
                        docType: docType,
                        requestId: item.requestId,
                        pseudoId: item.pseudoId,
                        statusId: convertedStatusId,
                        creationDate: item.requestDate ? ec.l10n.format(item.requestDate,'yyyy-MM-dd')  : null,
                        requestType: requestType.convertedStatusId,
                        placedDate: item.lastUpdatedStamp ? ec.l10n.format(item.lastUpdatedStamp,'yyyy-MM-dd')  : null,
                        otherUser: item.personLastName ? [
                                type: 'user',
                                partyId: item.filedByPartyId,
                                firstName: item.personFirstName, 
                                lastName: item.personLastName,
                                pseudoId: item.personPseudoId,
                                email: item.personEmail,
                                company: requestPersonCompany] : null,
                        otherCompany: item.companyName ? [
                                type: 'company',
                                partyId: item.filedByPartyId,
                                pseudoId: item.companyPseudoId,
                                email: item.companyEmail,
                                name: item.companyName] : null,
                        description: item.description]" />
                    <script>finDocs.add(finDocOut)</script>
                </iterate>
            </if>
            <!-- order -->
            <if condition="docType == 'order'">
                <if condition="search">
                    <then>
                        <entity-find list="items" offset="start" limit="limit"
                            entity-name="growerp.order.OrderHeaderPartItemPartiesAndReservation">
                            <econditions combine="or">
                                <econdition field-name="vendorPartyId" from="vendorPartyId"
                                    ignore-if-empty="true" />
                                <econdition field-name="customerPartyId" from="customerPartyId"
                                    ignore-if-empty="true" />
                            </econditions>
                            <econdition field-name="rentalFromDate" from="rentalFromDate"
                                ignore-if-empty="true" />
                            <econdition field-name="rentalThruDate" from="rentalThruDate"
                                ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="orderId" ignore-case="true" operator="like"
                                    from="search" />
                                <econdition field-name="pseudoId" ignore-case="true" operator="like"
                                    from="search" />
                                <econdition field-name="vendorCompanyName" ignore-case="true"
                                    operator="like" from="search" />
                                <econdition field-name="vendorLastName" ignore-case="true"
                                    operator="like" from="search" />
                                <econdition field-name="customerCompanyName" ignore-case="true"
                                    operator="like" from="search" />
                                <econdition field-name="customerLastName" ignore-case="true"
                                    operator="like" from="search" />
                            </econditions>
                            <order-by field-name="-orderPlacedDate" />
                        </entity-find>
                    </then>
                    <else-if condition="customerCompanyPartyId">                        <!-- by customer for ecommerce -->
                        <entity-find list="items" offset="start" limit="limit"
                            entity-name="growerp.order.OrderHeaderPartAndParties">
                            <econdition field-name="customerPartyId" from="customerCompanyPartyId" />
                            <use-iterator />
                        </entity-find>
                    </else-if>
                    <else-if condition="finDocId || pseudoId">                        <!-- single document with items -->
                        <entity-find list="items"
                            entity-name="growerp.order.OrderHeaderPartAndParties">
                            <econdition field-name="orderId" from="finDocId" ignore-if-empty="true" />
                            <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="vendorPartyId" from="companyPartyId" />
                                <econdition field-name="customerPartyId" from="companyPartyId" />
                            </econditions>
                        </entity-find>
                        <if condition="sales == null">
                            <set field="sales" value="false" type="Boolean" />
                            <if condition="items[0].customerPartyId == companyPartyId">
                                <set field="sales" value="true" type="Boolean" />
                            </if>
                        </if>
                        <if condition="!items">
                            <entity-find entity-name="mantle.order.OrderHeaderAndPart"
                                list="orderFind">
                                <econdition field-name="orderId" from="finDocId" />
                            </entity-find>
                            <return error="true"
                                message="$docType $finDocId/$pseudoId not found for company: $companyPartyId found: $orderFind" />
                        </if>
                    </else-if>
                    <else>
                        <!-- multiple documents -->
                        <set field="statusList" from="['OrderOpen','OrderPlaced','OrderApproved']" />
                        <!--    OrderCompleted OrderCancelled' -->
                        <if condition="open &amp;&amp; !finDocId &amp;&amp; !search">
                            <set field="fromDate" from="dayOldDate" />
                            <set field="status" from="statusList" />
                            <set field="delStatus" value="OrderCancelled" />
                        </if>
                        <entity-find offset="start" limit="limit" list="items"
                            entity-name="growerp.order.OrderHeaderPartAndParties">
                            <econdition field-name="vendorPartyId" from="vendorPartyId"
                                ignore-if-empty="true" />
                            <econdition field-name="customerPartyId" from="customerPartyId"
                                ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="statusId" operator="in" from="status"
                                    ignore-if-empty="true" />
                                <econdition field-name="lastUpdatedStamp" operator="greater"
                                    from="fromDate" ignore-if-empty="true" />
                            </econditions>
                            <!-- never display cancelled order when not search or single -->
                            <econdition field-name="statusId" operator="not-equals" from="delStatus"
                                ignore-if-empty="true" />
                        </entity-find>
                    </else>
                </if>
                <iterate list="items" entry="item">
                    <!-- remove doubles from search -->
                    <if condition="lastItem &amp;&amp; lastItem.orderId == item.orderId">
                        <continue />
                    </if>
                    <set field="company" from="null" />
                    <set field="userOut" from="null" />
                    <if condition="!sales">
                        <then>
                            <if condition="item.vendorPartyType == 'PtyOrganization'">
                                <set field="company"
                                    from="[
                                        partyId: item.vendorPartyId,
                                        pseudoId: item.vendorPseudoId,
                                        name: item.vendorCompanyName,
                                        ]" />
                                <else>
                                    <set field="userOut"
                                        from="[
                                            partyId: item.vendorPartyId,
                                            pseudoId: item.vendorPseudoId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail,
                                            company: company,
                                        ]" />
                                </else>
                            </if>
                        </then>
                        <else>
                            <if condition="finDocId || pseudoId">
                                <set field="address"
                                    from="[
                                    addressId: item.postalContactMechId,
                                    address1: item.address1,
                                    address2: item.address2,
                                    city: item.city,
                                    postalCode: item.postalCode,
                                    country: item.country
                                    ]" />
                            </if>
                            <if condition="item.customerPartyType == 'PtyOrganization'">
                                <set field="company"
                                    from="[
                                    partyId: item.customerPartyId,
                                    pseudoId: item.customerPseudoId,
                                    name: item.customerCompanyName,
                                    ]" />
                                <else>
                                    <set field="userOut"
                                        from="[
                                            partyId: item.customerPartyId,
                                            pseudoId: item.customerPseudoId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail,
                                            address: address,
                                        ]" />
                                </else>
                            </if>
                        </else>
                    </if>
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                        out-map="context" />
                    <!-- it looks like the view is not updated quickly enough and not provide
                    shipmentId so now check if present, when not, get from shipment item source-->
                    <if
                        condition="item.statusId == 'OrderApproved' &amp;&amp; item.shipmentId == null">
                        <entity-find entity-name="mantle.shipment.ShipmentItemSource"
                            list="shipments">
                            <econdition field-name="orderId" from="item.orderId" />
                        </entity-find>
                        <if condition="shipments">
                            <set field="item.shipmentId" from="shipments[0].shipmentId" />
                        </if>
                    </if>
                    <set field="finDocOut"
                        from="[
                            pseudoId: item.pseudoId,
                            orderId: item.orderId,
                            paymentId: item.paymentId ?: item.orderPaymentId,
                            invoiceId: item.invoiceId,
                            shipmentId: item.shipmentId,
                            description: item.orderName,
                            salesChannel: item.salesChannelDescr,
                            statusId: convertedStatusId,
                            creationDate: item.entryDate
                                ? ec.l10n.format(item.entryDate,'yyyy-MM-dd') : null,
                            placedDate: item.placedDate
                                ? ec.l10n.format(item.placedDate,'yyyy-MM-dd')  : null,
                            sales: sales,
                            docType: docType,
                            otherUser: userOut,
                            otherCompany: company,
                            grandTotal: item.grandTotal ? item.grandTotal.toString(): '0.00',
                            items: finDocItems,
                            ]" />
                    <script>
                        finDocs.add(finDocOut);
                        finDocIds.add(item.orderId);
                    </script>
                    <set field="lastItem" from="item" />
                </iterate>
                <!-- get items -->
                <set field="finDocItems" from="[]" />
                <entity-find list="items" entity-name="growerp.order.OrderItemsAndReservation">
                    <econdition field-name="orderId" operator="in" from="finDocIds" />
                    <order-by field-name="orderId,orderItemSeqId" />
                </entity-find>
                <iterate list="items" entry="item">
                    <!-- convert ProductTypeId -->
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[docType: 'product', statusId: item.productTypeId]"
                        out-map="productType" />
                    <set field="finDocItem"
                        from="[
                            finDocId: item.orderId,
                            docType: 'order',
                            itemSeqId: item.orderItemSeqId,
                            product: [productId: item.productId,
                                        pseudoId: item.productPseudoId,
                                        productTypeId: productType.convertedStatusId],
                            itemType: [itemTypeId: item.itemTypeId,
                                        itemTypeName: item.itemTypeName],
                            description: item.description,
                            quantity: item.quantity.toString(),
                            price: item.unitAmount ? item.unitAmount.toString() : '0.00',
                            asset: [assetId: item.assetId, assetName: item.assetName],
                            rentalFromDate: item.rentalFromDate
                                ?  ec.l10n.format(item.rentalFromDate,'yyyy-MM-dd')  : null,
                            rentalThruDate: item.rentalThruDate
                                ? ec.l10n.format(item.rentalThruDate,'yyyy-MM-dd') : null,
                            ]" />
                    <script>finDocItems.add(finDocItem)</script>
                    <!-- check if last line or next line for next order -->
                    <if
                        condition="!item_has_next || 
                            item.orderId !=  items[item_index+1].orderId">
                        <!-- add items to a single finDoc-->
                        <iterate entry="finDoc" list="finDocs">
                            <if condition="finDoc.orderId == item.orderId">
                                <set field="finDoc.items" from="finDocItems" />
                                <break />
                            </if>
                        </iterate>
                        <set field="finDocItems" from="[]" />
                    </if>
                </iterate>
            </if>
            <!-- invoice -->
            <if condition="docType == 'invoice'">
                <if condition="sales">
                    <set field="openStatusList"
                        from="['InvoiceInProcess', 'InvoiceFinalized', 'InvoiceApproved']" />
                    <else>
                        <set field="openStatusList"
                            from="['InvoiceIncoming','InvoiceReceived', 'InvoiceApproved']" />
                    </else>
                </if>
                <if condition="finDocId || pseudoId">
                    <entity-find entity-name="growerp.account.InvoiceItemsAndParties" list="items">
                        <econdition field-name="invoiceId" from="finDocId" ignore-if-empty="true" />
                        <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                        <order-by field-name="invoiceItemSeqId" />
                    </entity-find>
                    <if condition="!items">
                        <return error="false"
                            message="Get finDoc Invoice: $finDocId or $pseudoId not found!" />
                        <if condition="sales == null">
                            <set field="sales" value="true" type="Boolean" />
                            <if condition="items[0].customerPartyId == companyPartyId">
                                <set field="sales" value="false" type="Boolean" />
                            </if>
                        </if>
                    </if>
                    <else>                        <!-- invoice list -->
                        <if condition="search">
                            <entity-find offset="start" limit="limit"
                                entity-name="growerp.account.InvoiceItemsAndParties" list="items">
                                <econdition field-name="toPartyId" from="customerPartyId"
                                    ignore-if-empty="true" />
                                <econdition field-name="fromPartyId" from="vendorPartyId"
                                    ignore-if-empty="true" />
                                <econditions combine="or">
                                    <econdition field-name="statusId" operator="in"
                                        from="statusList" ignore-if-empty="true" />
                                    <econdition field-name="invoiceDate" operator="greater"
                                        from="fromDate" ignore-if-empty="true" />
                                </econditions>
                                <econdition field-name="invoiceDate" operator="less-equals"
                                    from="tsDate" ignore-if-empty="true" />
                                <econditions combine="or">
                                    <econdition field-name="pseudoId" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="invoiceId" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="orderId" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="vendorCompanyName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="vendorFirstName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="vendorLastName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="customerCompanyName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="customerFirstName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="customerLastName" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                    <econdition field-name="externalId" ignore-case="true"
                                        operator="like" from="search" ignore-if-empty="true" />
                                </econditions>
                                <order-by
                                    field-name="invoiceDate,invoiceId,invoiceItemSeqId,rentalFromDate" />
                                <!--use-iterator/-->
                            </entity-find>
                            <else>
                                <if condition="open == true">
                                    <set field="statusList" from="openStatusList" />
                                    <set field="fromDate" from="dayOldDate" />
                                </if>
                                <!-- just a list to scroll get Id's-->
                                <entity-find offset="start" limit="limit"
                                    entity-name="mantle.account.invoice.Invoice" list="invoiceIds">
                                    <econdition field-name="toPartyId" from="customerPartyId"
                                        ignore-if-empty="true" />
                                    <econdition field-name="fromPartyId" from="vendorPartyId"
                                        ignore-if-empty="true" />
                                    <!--econditions
                                    combine="or">
                                        <econdition field-name="statusId" operator="in"
                                            from="statusList" ignore-if-empty="true" />
                                        <econdition field-name="invoiceDate" operator="greater"
                                            from="fromDate" ignore-if-empty="true" />
                                    </econditions-->
                                    <select-field field-name="invoiceId" />
                                </entity-find>
                                <!-- get the records-->
                                <entity-find entity-name="growerp.account.InvoiceItemsAndParties"
                                    list="items">
                                    <econdition field-name="invoiceId" operator="in"
                                        from="invoiceIds.invoiceId" />
                                    <econditions combine="or">
                                        <!-- ignore payment applications -->
                                        <econdition field-name="transactionTypeId"
                                            value="AttSalesInvoice"
                                            or-null="true" />
                                        <econdition field-name="transactionTypeId"
                                            value="AttPurchaseInvoice"
                                            or-null="true" />
                                    </econditions>
                                    <order-by field-name="invoiceId,invoiceItemSeqId,rentalFromDate" />
                                </entity-find>
                            </else>
                        </if>
                    </else>
                </if>
                <set field="lastItem" from="null" />
                <iterate entry="item" list="items">
                    <if condition="lastItem &amp;&amp; lastItem.invoiceId != item.invoiceId">
                        <set field="finDocOut.items" from="finDocItems" />
                        <script>finDocs.add(finDocOut)</script>
                        <if condition="current++ == limit">
                            <break />
                        </if>
                    </if>
                    <if condition="!lastItem || lastItem.invoiceId != item.invoiceId">
                        <if condition="sales">
                            <if condition="item.customerPartyId">
                                <set field="company"
                                    from="[
                                        partyId: item.customerPartyId,
                                        pseudoId: item.customerPseudoId,
                                        name: item.customerCompanyName,
                                        ]" />
                                <else>
                                    <set field="userOut"
                                        from="[
                                        partyId: item.customerUserPartyId,
                                        pseudoId: item.customerUserPseudoId,
                                        firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail,
                                        ]" />
                                </else>
                            </if>
                            <else><!-- purchase -->
                                <if condition="item.vendorPartyId">
                                    <set field="company"
                                        from="[
                                            partyId: item.vendorPartyId,
                                            pseudoPartyId: item.vendorPseudoId,
                                            name: item.vendorCompanyName,
                                        ]" />
                                    <else>
                                        <set field="userOut"
                                            from="[
                                            partyId: item.vendorUserPartyId,
                                            pseudoPartyId: item.vendorUserPseudoId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail,
                                        ]" />
                                    </else>
                                </if>
                            </else>
                        </if>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                            out-map="context" />
                        <set field="finDocOut"
                            from="[
                            docType: docType,
                            sales: sales,
                            pseudoId: item.pseudoId ?: '',
                            orderId: item.orderId,
                            invoiceId: item.invoiceId,
                            paymentId: item.paymentId,
                            transactionId: item.transactionId,
                            Id: item.invoiceId,
                            description: item.invoiceName,
                            statusId: convertedStatusId,
                            creationDate: item.invoiceDate
                                ? ec.l10n.format(item.invoiceDate,'yyyy-MM-dd')  : null,
                            otherUser: userOut?.partyId ? userOut : null,
                            otherCompany: company?.partyId ? company : null,
                            grandTotal: item.invoiceTotal
                                ? item.invoiceTotal.toString() : null,
                            ]" />
                        <set field="finDocItems" from="[]" />
                    </if>
                    <if condition="item.invoiceItemSeqId">
                        <set field="finDocItem"
                            from="[
                        itemSeqId: item.invoiceItemSeqId,
                        product: [productId: item.productId,pseudoId: item.productPseudoId],
                        itemType: [itemTypeId: item.itemTypeId,
                                    itemTypeName: item.itemTypeName],
                        description: item.description,
                        glAccount: [glAccountId: item.glAccountId,
                                    accountCode: item.accountCode,
                                    accountName: item.accountName],
                        quantity: item.quantity ? item.quantity.toString() : null,
                        price: item.amount ? item.amount.toString() : null,
                        rentalFromDate: item.rentalFromDate
                            ?  ec.l10n.format(item.rentalFromDate,'yyyy-MM-dd') : null,
                        rentalThruDate: item.rentalThruDate
                            ? ec.l10n.format(item.rentalThruDate,'yyyy-MM-dd') : null,
                        ]" />
                        <script>finDocItems.add(finDocItem)</script>
                    </if>
                    <set field="lastItem" from="item" />
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems" />
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <!-- payment -->
            <if condition="docType == 'payment'">
                <set field="openStatusList" from="['PmntProposed','PmntPromised','PmntAuthorized']" />
                <if condition="finDocId || pseudoId">
                    <entity-find entity-name="growerp.order.PaymentAndInfo" list="items">
                        <econdition field-name="paymentId" from="finDocId" ignore-if-empty="true" />
                        <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                    </entity-find>
                    <!-- sales field is optional with single document-->
                    <if condition="items &amp;&amp; sales == null">
                        <set field="sales" value="true" type="Boolean" />
                        <if condition="items[0].customerPartyId == companyPartyId">
                            <set field="sales" value="false" type="Boolean" />
                        </if>
                    </if>
                    <else>
                        <if
                            condition="open == true &amp;&amp; !finDocId
                            &amp;&amp; !pseudoId &amp;&amp; !search">
                            <set field="statusList" from="openStatusList" />
                            <set field="fromDate" from="dayOldDate" />
                        </if>
                        <entity-find offset="start" limit="limit"
                            entity-name="growerp.order.PaymentAndInfo" list="items">
                            <econdition field-name="fromPartyId" from="customerPartyId"
                                ignore-if-empty="true" />
                            <econdition field-name="toPartyId" from="vendorPartyId"
                                ignore-if-empty="true" />
                            <econditions combine="or">
                                <!-- ignore payment applications -->
                                <econdition field-name="transactionTypeId"
                                    value="AttIncomingPayment"
                                    or-null="true" />
                                <econdition field-name="transactionTypeId"
                                    value="AttOutgoingPayment"
                                    or-null="true" />
                            </econditions>
                            <!-- econditions combine="or">
                                <econdition field-name="statusId" operator="in" from="statusList" ignore-if-empty="true" />
                                <econdition field-name="effectiveDate" operator="greater" from="fromDate" ignore-if-empty="true" />
                            </econditions-->
                            <econdition field-name="paymentDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true" />
                            <econditions combine="or">
                                <econdition field-name="pseudoId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                                <econdition field-name="paymentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="invoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="forInvoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="orderId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                                <econdition field-name="vendorCompanyName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="vendorFirstName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="vendorLastName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="customerCompanyName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="customerFirstName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="customerLastName" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                            </econditions>
                            <order-by field-name="-effectiveDate,paymentId" />
                        </entity-find>
                    </else>
                </if>
                <!-- Iterate thru item list -->
                <set field="paymentMethod" from="[:]" />
                <set field="fpaymentMethod" from="[:]" />
                <iterate entry="item" list="items">
                    <if condition="sales">
                        <if condition="item.customerPartyId">
                            <set field="company"
                                from="[
                                        partyId: item.customerPartyId,
                                        name: item.customerCompanyName,
                                        paymentMethod: paymentMethod,
                                        ]" />
                            <else>
                                <set field="userOut"
                                    from="[
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail,
                                        ]" />
                            </else>
                        </if>
                        <else><!-- purchase -->
                            <if condition="item.vendorPartyId">
                                <set field="company"
                                    from="[
                                        partyId: item.vendorPartyId,
                                        name: item.vendorCompanyName,
                                        paymentMethod: paymentMethod,
                                        ]" />
                                <else>
                                    <set field="userOut"
                                        from="[
                                            partyId: item.vendorUserPartyId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail,
                                            company: company,
                                        ]" />
                                </else>
                            </if>
                        </else>
                    </if>
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                        out-map="context" />
                    <!-- payment method of 'otherParty' (in future can have more than one?)-->
                    <if condition="sales &amp;&amp; item.customerPaymentMethodId">
                        <set field="paymentMethodId" from="item.customerPaymentMethodId" />
                        <set field="paymentMethodTypeId" from="item.customerPaymentMethodTypeId" />
                    </if>
                    <if condition="!sales &amp;&amp; item.vendorPaymentMethodId">
                        <set field="paymentMethodId" from="item.vendorPaymentMethodId" />
                        <set field="paymentMethodTypeId" from="item.vendorPaymentMethodTypeId" />
                    </if>
                    <!-- check if credit card, then credit card info (other types to be added)-->
                    <if condition="paymentMethodId">
                        <if condition="paymentMethodTypeId == 'PmtCreditCard'">
                            <set field="paymentMethod.ccPaymentMethodId" from="paymentMethodId" />
                            <entity-find entity-name="mantle.account.method.CreditCard"
                                list="cCards">
                                <econdition field-name="paymentMethodId" from="paymentMethodId" />
                            </entity-find>
                            <set field="cardType"
                                from="ec.entity.find('moqui.basic.Enumeration')
                                .condition('enumId', cCards[0].creditCardTypeEnumId).one().description" />
                            <set field="nrLength" from="cCards[0].cardNumber.length()" />
                            <set field="cardNumberHidden"
                                value="${cardType}**********${cCards[0].cardNumber.substring(nrLength-4,nrLength)} ${cCards[0].expireDate}" />
                            <set field="paymentMethod.ccDescription" from="cardNumberHidden" />
                        </if>
                    </if>
                    <entity-find entity-name="growerp.account.PaymentGatewayResponseAndInfo"
                        list="responses">
                        <econdition field-name="paymentId" from="item.paymentId" />
                    </entity-find>
                    <set field="gatewayResponses" from="[]" />
                    <iterate list="responses" entry="response">
                        <script>gatewayResponses.add([
                            gatewayResponseId: response.paymentGatewayResponseId,
                            paymentOperation: response.paymentOperation,
                            paymentMethod: [ccPaymentMethodId: response.paymentMethodId,
                                ccDescription: response.description],
                            paymentId: response.paymentId,
                            pseudoId: response.pseudoId,
                            amount: response.amount.toString(),
                            referenceNum: response.referenceNum,
                            transactionDate: response.transactionDate
                                ? ec.l10n.format(response.transactionDate,'yyyy-MM-dd') : null,
                            resultSuccess: response.resultSuccess == 'Y' ? true : false,
                            resultMessage: response.resultMessage
                        ])</script>
                    </iterate>
                    <set field="glAccount"
                        from="[
                            glAccountId: item.overrideGlAccountId,
                            accountCode: item.overrideAccountCode,
                            accountName: item.overrideAccountName,
                        ]" />
                    <set field="paymentType"
                        from="[
                            paymentTypeId: item.paymentTypeId,
                            paymentTypeName: item.paymentTypeDescription,                    
                        ]" />
                    <set field="finDocOut"
                        from="[
                        orderId: item.orderId,
                        paymentInstrument: item.paymentInstrumentId.substring(2),
                        paymentId: item.paymentId,
                        pseudoId: item.pseudoId ?: '',
                        transactionId: item.transactionId,
                        id: item.paymentId,
                        invoiceId: item.invoiceId ? item.invoiceId : item.forInvoiceId,
                        statusId: convertedStatusId,
                        creationDate: item.effectiveDate
                            ? ec.l10n.format(item.effectiveDate,'yyyy-MM-dd') : null,
                        sales: sales,
                        docType: docType,
                        otherUser: userOut?.partyId ? userOut : null,
                        otherCompany: company?.partyId ? company : null,
                        grandTotal: item.amount ? item.amount.toString() : 0,
                        items: [[paymentType: paymentType, glAccount: glAccount]],
                        gatewayResponses: gatewayResponses
                        ]" />
                    <script>finDocs.add(finDocOut)</script>
                </iterate>
            </if>
            <if condition="docType == 'shipment'">
                <!-- shipSheduled (FinDocCreated) -> shipPacked(FinDocApproved)
                    -> ShipShipped (FinDocCompleted)   -->
                <set field="openStatusList"
                    from="['ShipInput','ShipScheduled','ShipPicked',
                            'ShipPacked','ShipShipped']" />
                <if condition="finDocId || pseudoId">
                    <entity-find list="items"
                        entity-name="growerp.warehouse.ShipmentAndPartiesAndWarehouse">
                        <econdition field-name="shipmentId" from="finDocId" ignore-if-empty="true" />
                        <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                    </entity-find>
                    <if condition="sales == null">
                        <set field="sales" value="false" type="Boolean" />
                        <if condition="items[0].fromPartyId == companyPartyId">
                            <set field="sales" value="true" type="Boolean" />
                        </if>
                    </if>
                    <else>
                        <if condition="open == true &amp;&amp; !finDocId &amp;&amp; !search">
                            <set field="status" from="openStatusList" />
                            <set field="fromDate" from="dayOldDate" />
                        </if>
                        <entity-find offset="start" limit="limit" list="items"
                            entity-name="growerp.warehouse.ShipmentAndPartiesAndWarehouse">
                            <econdition field-name="vendorPartyId" from="vendorPartyId"
                                ignore-if-empty="true" />
                            <econdition field-name="customerPartyId" from="customerPartyId"
                                ignore-if-empty="true" />
                            <!-- econditions combine="or">
                                <econdition field-name="statusId" operator="in" from="status"
                                    ignore-if-empty="true" />
                                <econdition field-name="entryDate" operator="greater"
                                    from="fromDate" ignore-if-empty="true" />
                            </econditions-->
                            <econditions combine="or">
                                <econdition field-name="pseudoId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                                <econdition field-name="shipmentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="orderId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                            </econditions>
                            <order-by field-name="entryDate" />
                        </entity-find>
                    </else>
                </if>
                <set field="lastItem" from="null" />
                <iterate entry="item" list="items">
                    <if condition="lastItem &amp;&amp; lastItem.shipmentId != item.shipmentId">
                        <set field="finDocOut.items" from="finDocItems" />
                        <script>finDocs.add(finDocOut)</script>
                        <set field="finDocItems" from="[]" />
                        <if condition="current++ == limit">
                            <break />
                        </if>
                    </if>
                    <if condition="!lastItem || lastItem.shipmentId != item.shipmentId">
                        <if condition="sales">
                            <if condition="item.customerPartyId">
                                <set field="company"
                                    from="[
                                        partyId: item.customerPartyId,
                                        name: item.customerCompanyName,
                                        address: address,
                                    ]" />
                                <else>
                                    <set field="userOut"
                                        from="[
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail,
                                            telephoneNr: item.telephoneNr,
                                        ]" />
                                </else>
                            </if>
                            <else><!-- incoming  purchase -->
                                <if condition="item.vendorPartyId">
                                    <set field="company"
                                        from="[
                                            partyId: item.vendorPartyId,
                                            name: item.vendorCompanyName,
                                        ]" />
                                    <else>
                                        <set field="userOut"
                                            from="[
                                                partyId: item.vendorUserPartyId,
                                                firstName: item.vendorFirstName,
                                                lastName: item.vendorLastName,
                                                email: item.vendorEmail,
                                            ]" />
                                    </else>
                                </if>
                            </else>
                        </if>
                        <set field="address"
                            from="[
                                    address1: item.address1,
                                    address2: item.address2,
                                    city: item.city,
                                    postalCode: item.postalCode,
                                    country: item.country]" />
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                            out-map="context" />
                        <!-- get first of related transaction id's -->
                        <!-- shipment seems to have a tranaction id for every shipment item -->
                        <!-- intend to merge these (type: AttInventoryIssuance) when display -->
                        <entity-find entity-name="mantle.ledger.transaction.AcctgTrans"
                            list="transactions" limit="1">
                            <econdition field-name="shipmentId" from="item.shipmentId" />
                            <select-field field-name="acctgTransId" />
                        </entity-find>
                        <set field="finDocOut"
                            from="[
                            docType: docType,
                            sales: sales,
                            orderId: item.orderId,
                            pseudoId: item.pseudoId,
                            Id: item.shipmentId,
                            shipmentId: item.shipmentId,
                            transactionId: transactions ? transactions[0].acctgTransId : null,
                            pseudoId: item.pseudoId ?:'',
                            statusId: convertedStatusId,
                            reference: item.externalId,
                            shipmentMethod: item.shipmentMethod,
                            creationDate: item.entryDate 
                                ? ec.l10n.format(item.entryDate,'yyyy-MM-dd')  : null,
                            otherUser: userOut?.partyId ? userOut : null,
                            otherCompany: company?.partyId ? company : null,
                            ]" />
                    </if>
                    <if condition="item.locationId">
                        <set field="location"
                            from="[
                                locationId: item.locationId,
                                locationName: item.locationName                        
                                ]" />
                    </if>
                    <if condition="item.assetId">
                        <set field="asset"
                            from="[
                        assetId: item.assetId,
                        assetName: item.assetName,
                        receivedDate: item.entryDate 
                            ? ec.l10n.format(item.entryDate,'yyyy-MM-dd')  : null,
                        location: location
                        ]" />
                    </if>
                    <set field="finDocItem"
                        from="[
                        itemSeqId: item.orderItemSeqId,
                        product: [productId: item.productId, pseudoId: item.productPseudoId],
                        quantity: item.quantity ? item.quantity.toString() : null,
                        description: item.itemDescription,
                        asset: asset
                        ]" />
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastItem" from="item" />
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems" />
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <if condition="docType == 'transaction'">
                <if condition="!search">
                    <if condition="isPosted == true">
                        <set field="isPosted" value="Y" />
                    </if>
                    <if condition="isPosted == false">
                        <set field="isPosted" value="N" />
                    </if>
                    <set field="dayOldDate" from="null" />
                </if>
                <if condition="journalId?.endsWith('Error')">
                    <set field="isPosted" value="'N'" />
                </if>
                <if condition="finDocId || pseudoId">
                    <then>
                        <entity-find list="items" limit="1"
                            entity-name="growerp.account.AcctgTransAndCompany">
                            <econdition field-name="companyPartyId" from="companyPartyId" />
                            <econdition field-name="transactionId" from="finDocId"
                                ignore-if-empty="true" />
                            <econdition field-name="pseudoId" from="pseudoId" ignore-if-empty="true" />
                        </entity-find>
                        <if condition="!items">
                            <log level="warn"
                                message="Get Transaction $finDocid $pseudoId not found" />
                        </if>
                    </then>
                    <else>
                        <entity-find offset="start" limit="limit" list="items"
                            entity-name="growerp.account.AcctgTransAndCompany">
                            <econdition field-name="companyPartyId" from="companyPartyId" />
                            <econditions combine="or">
                                <econdition field-name="pseudoId" ignore-case="true" operator="like"
                                    from="search" ignore-if-empty="true" />
                                <econdition field-name="theirAcctgTransId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="shipmentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="invoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="theirAcctgTransId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="paymentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="transactionId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                                <econdition field-name="transactionId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true" />
                            </econditions>
                            <econdition field-name="journalId" from="journal?.journalId"
                                ignore-if-empty="true" />
                            <!-- econditions combine="or">
                                <econdition field-name="isPosted" operator="not-equals"
                                    from="isPosted"
                                    ignore-if-empty="true" />
                                <econdition field-name="transactionDate" operator="greater"
                                    from="dayOldDate" ignore-if-empty="true" />
                            </econditions-->
                            <econdition field-name="transactionDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true" />
                            <order-by field-name="isPosted,transactionDate" />
                        </entity-find>
                    </else>
                </if>
                <!-- get transaction headers -->
                <iterate entry="item" list="items">
                    <if condition="item.otherCompanyName">
                        <set field="company"
                            from="[
                            partyId: item.otherPartyId,
                            pseudoId: item.otherPseudoId,
                            name: item.otherCompanyName,
                        ]" />
                    </if>
                    <if condition="item.otherPersonLastName">
                        <set field="userOut"
                            from="[
                            partyId: item.otherPartyId,
                            pseudoId: item.otherPseudoId,
                            firstName: item.otherPersonFirstName,
                            lastName: item.otherPersonLastName,
                        ]" />
                    </if>
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[docType: 'transaction', 
                                statusId: item.isPosted == 'Y'? 'Posted' : 'NotPosted']"
                        out-map="context" />
                    <set field="finDocOut"
                        from="[
                            docType: 'transaction',
                            docSubType: item.transactionType,
                            sales: sales,
                            description: item.transDescription,
                            paymentId: item.paymentId,
                            invoiceId: item.invoiceId,
                            shipmentId: item.shipmentId,
                            id: item.transactionId,
                            pseudoId: item.pseudoId ?: '',
                            transactionId: item.transactionId,
                            statusId: convertedStatusId,
                            creationDate: item.transactionDate 
                                ? ec.l10n.format(item.transactionDate,'yyyy-MM-dd')  : null,
                            otherUser: userOut,
                            otherCompany: company,
                            isPosted: item.isPosted == 'Y'? true : false,
                            ledgerJournal: [journalId: item.journalId,
                                            journalName: item.journalName],
                        ]" />
                    <script>
                        finDocs.add(finDocOut);
                        finDocIds.add(item.transactionId);
                    </script>
                </iterate>
                <set field="transactionTotal" value="0" type="BigDecimal" />
                <!-- merge all shipment transactions together -->
                <if
                    condition="(finDocId || pseudoId) 
                        &amp;&amp; items[0].transactionTypeId == 'AttInventoryIssuance'">
                    <then>
                        <entity-find entity-name="mantle.ledger.transaction.AcctgTrans"
                            list="transIds">
                            <econdition field-name="organizationPartyId" from="companyPartyId" />
                            <econdition field-name="shipmentId" from="items[0].shipmentId" />
                            <select-field field-name="acctgTransId" />
                        </entity-find>
                        <entity-find entity-name="growerp.account.AcctgEntryAndGlAccount"
                            list="sepEntries">
                            <econdition field-name="transactionId" operator="in"
                                from="transIds.acctgTransId" />
                            <order-by field-name="transactionId,accountCode" />
                        </entity-find>
                        <set field="entries" from="[]" />
                        <iterate list="sepEntries" entry="entry">
                            <set field="entry.transactionId" from="items[0].transactionId" />
                            <script>entries.add(entry)</script>
                        </iterate>
                    </then>
                    <else>
                        <!-- get transaction entries -->
                        <entity-find entity-name="growerp.account.AcctgEntryAndGlAccount"
                            list="entries">
                            <econdition field-name="transactionId" operator="in" from="finDocIds" />
                            <order-by field-name="transactionId,accountCode" />
                        </entity-find>
                    </else>
                </if>
                <iterate list="entries" entry="item">
                    <!-- add items to a single transaction when transactionId changes-->
                    <if
                        condition="lastTransactionId &amp;&amp; item.transactionId != lastTransactionId">
                        <iterate entry="finDoc" list="finDocs">
                            <if condition="finDoc.transactionId == lastTransactionId">
                                <set field="finDoc.items" from="finDocItems" />
                                <set field="finDoc.grandTotal"
                                    from="transactionTotal ? transactionTotal.toString(): null" />
                            </if>
                        </iterate>
                        <set field="finDocItems" from="[]" />
                        <set field="transactionTotal" value="0" type="BigDecimal" />
                    </if>
                    <if condition="item.debitCreditFlag == 'D'">
                        <set field="transactionTotal" from="transactionTotal.add(item.amount)" />
                    </if>
                    <set field="finDocItem"
                        from="[
                                finDocId: item.transactionId,
                                docType: 'transaction',
                                itemSeqId: item.entryId,
                                price: item.amount.toString(),
                                isDebit: item.debitCreditFlag == 'D' ? true : false,
                                glAccount: [
                                    glAccountId: item.glAccountId,
                                    accountCode: item.accountCode,
                                    accountName: item.accountName,
                                    ],
                                product: [productId: item.productId, pseudoId: item.pseudoProductId],
                                description: item.description,
                                assetId: item.assetId,
                        ]" />
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastTransactionId" from="item.transactionId" />
                </iterate>
                <if condition="lastTransactionId">
                    <iterate entry="finDoc" list="finDocs">
                        <if condition="finDoc.transactionId == lastTransactionId">
                            <set field="finDoc.items" from="finDocItems" />
                            <set field="finDoc.grandTotal"
                                from="transactionTotal ? transactionTotal.toString(): null" />
                            <break />
                        </if>
                    </iterate>
                </if>
            </if>
        </actions>
    </service>

    <service verb="create" noun="FinDoc">
        <description>Create a financial document either order, invoice or payment</description>
        <in-parameters>
            <parameter name="finDoc" type="Map" required="true">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="pseudoId" />
                <parameter name="reference" />
                <parameter name="statusId" />
                <parameter name="paymentInstrument" />
                <parameter name="description" />
                <parameter name="otherUser" type="Map">
                    <parameter name="partyId" />
                </parameter>
                <parameter name="otherCompany" type="Map">
                    <parameter name="partyId" />
                    <parameter name="paymentMethod" type="Map">
                        <parameter name="ccPaymentMethodId" />
                    </parameter>
                </parameter>
                <parameter name="grandTotal" />
                <parameter name="classificationId" />
                <parameter name="isPosted" type="Boolean" />
                <parameter name="journal">
                    <parameter name="journalId" />
                </parameter>
                <parameter name="items" type="List">
                    <parameter name="itemSeqId" />
                    <parameter name="itemType" type="Map">
                        <parameter name="itemTypeId" />
                        <parameter name="itemTypeName" />
                    </parameter>
                    <parameter name="paymentType" type="Map">
                        <parameter name="paymentTypeId" />
                        <parameter name="paymentTypeName" />
                    </parameter>
                    <parameter name="productId" />
                    <parameter name="pseudoProductId" />
                    <parameter name="description" />
                    <parameter name="quantity" />
                    <parameter name="price" />
                    <parameter name="isDebit" type="Boolean" />
                    <parameter name="glAccount">
                        <parameter name="glAccountId" />
                    </parameter>
                    <parameter name="asset" type="Map">
                        <parameter name="assetId" />
                        <parameter name="assetName" />
                        <parameter name="location" type="Map">
                            <parameter name="locationId" />
                            <parameter name="locationName" />
                        </parameter>
                    </parameter>
                    <parameter name="rentalFromDate" />
                    <parameter name="rentalThruDate" />
                </parameter>
                <parameter name="requestType" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="pseudoId" />
                <parameter name="orderId" />
                <parameter name="shipmentId" />
                <parameter name="invoiceId" />
                <parameter name="paymentId" />
                <parameter name="transactionId" />
                <parameter name="isPosted" type="Boolean" />
                <parameter name="paymentInstrument" />
                <parameter name="statusId" />
                <parameter name="creationDate" />
                <parameter name="placedDate" />
                <parameter name="description" />
                <parameter name="otherUser" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                </parameter>
                <parameter name="otherCompany" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="country" />
                    </parameter>
                    <parameter name="paymentMethod" type="Map">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                </parameter>
                <parameter name="grandTotal" />
                <parameter name="classificationId" />
                <parameter name="isPosted" type="Boolean" />
                <parameter name="journal">
                    <parameter name="journalId" />
                    <parameter name="journalName" />
                </parameter>
                <parameter name="items" type="List">
                    <parameter name="item" type="Map">
                        <parameter name="itemSeqId" />
                        <parameter name="itemType" type="Map">
                            <parameter name="itemTypeId" />
                            <parameter name="itemTypeName" />
                        </parameter>
                        <parameter name="paymentType" type="Map">
                            <parameter name="paymentTypeId" />
                            <parameter name="paymentTypeName" />
                        </parameter>
                        <parameter name="product" type="Map">
                            <parameter name="productId" />
                        </parameter>
                        <parameter name="description" />
                        <parameter name="quantity" />
                        <parameter name="price" />
                        <parameter name="isDebit" type="Boolean" />
                        <parameter name="glAccount">
                            <parameter name="glAccountId" />
                            <parameter name="accountCode" />
                            <parameter name="accountName" />
                        </parameter>
                        <parameter name="asset" type="Map">
                            <parameter name="assetId" />
                            <parameter name="assetName" />
                            <parameter name="location" type="Map">
                                <parameter name="locationId" />
                                <parameter name="locationName" />
                            </parameter>
                        </parameter>
                        <parameter name="rentalFromDate" />
                        <parameter name="rentalThruDate" />
                    </parameter>
                </parameter>
                <parameter name="requestType" />
            </parameter>
        </out-parameters>
        <actions>
            <if condition="finDoc.docType == null">
                <return error="true"
                    message="DocType is missing when creating a financial document" />
            </if>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="nowDate" from="ec.user.nowTimestamp.toString().substring(0,10)" />
            <!-- create 'other Party'-->
            <if
                condition="finDoc.docType != 'transaction' &amp;&amp; 
                    (!finDoc.otherCompany &amp;&amp; !finDoc.otherUser)">
                <return error="true"
                    message="Other Company or User required! company: ${finDoc.otherCompany} user: ${finDoc.otherUser} " />
            </if>
            <set field="otherPartyId"
                from="finDoc.otherCompany?.partyId ?: finDoc.otherUser?.partyId" />
            <service-call name="growerp.100.FinDocServices100.convert#StatusId" out-map="context"
                in-map="[sales: finDoc?.sales, docType: finDoc.docType, statusId: finDoc.statusId]" />
            <set field="finDoc.statusId" from="convertedStatusId" />
            <!-- create pseudoId when not provided -->
            <if condition="!finDoc.pseudoId || finDoc.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: finDoc.docType]" out-map="context" />
                <set field="finDoc.pseudoId" from="seqNum" />
            </if>
            <!-- order -->
            <if condition="finDoc.docType == 'order'">
                <then>
                    <service-call name="growerp.100.FinDocServices100.create#Order"
                        in-map="[order: finDoc]" out-map="context" />
                    <set field="finDocId" from="orderId" />
                </then>
                <!-- invoice -->
                <else-if condition="finDoc.docType == 'invoice'">
                    <service-call name="growerp.100.FinDocServices100.create#Invoice"
                        in-map="[invoice: finDoc]" out-map="context" />
                    <set field="finDocId" from="invoiceId" />
                </else-if>
                <!-- payment -->
                <else-if condition="finDoc.docType == 'payment'">
                    <service-call name="growerp.100.FinDocServices100.create#Payment"
                        in-map="[payment: finDoc]" out-map="context" />
                    <set field="finDocId" from="paymentId" />
                </else-if>
                <!-- request -->
                <else-if condition="finDoc.docType == 'request'">
                    <!-- convert requestType -->
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: 'requestType', statusId: finDoc.requestType]"
                        out-map="requestType" />
                    <service-call name="create#mantle.request.Request"
                        in-map="[   requestPseudoId: finDoc.pseudoId,
                                    requestTypeEnumId: requestType.convertedStatusId,
                                    description: finDoc.description,
                                    requestOwnerPartyId: companyUserPartyId ?: userpartyId,
                                    statusId: convertedStatusId,
                                    filedByPartyId: otherPartyId,
                                    requestDate: nowDate,
                                    requestOwnerPartyId: companyPartyId
                                ]"
                        out-map="context" />
                    <service-call name="growerp.100.PartyServices100.get#CompanyUser"
                        in-map="partyId: companyUserPartyId ?: userPartyId" out-map="context" />
                    <service-call name="growerp.100.OpenMrsServices100.add#PatientAndRequest"
                        in-map="[request: finDoc, requester: companiesUsers[0] ]" out-map="result" />
                    <if condition="result?.error">
                        <return error="true" message="${result.error}" />
                    </if>
                    <set field="finDocId" from="requestId" />
                </else-if>
                <!-- transaction -->
                <else-if condition="finDoc.docType == 'transaction'">
                    <service-call name="mantle.ledger.LedgerServices.create#AcctgTrans"
                        in-map="[   acctgTransTypeEnumId: 'AttInternal',
                                    organizationPartyId: companyPartyId,
                                    otherPartyId: otherPartyId,
                                    description: finDoc.description,
                                    glJournalId: finDoc.journal?.journalId,
                                    isPosted: 'N',
                                    pseudoId: finDoc.pseudoId,
                                    theirAcctgTransId: finDoc.reference,
                                ]"
                        out-map="context" />
                    <set field="finDocId" from="acctgTransId" />
                    <iterate list="finDoc.items" entry="item">
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry"
                            in-map="[   acctgTransId: acctgTransId,
                                        productId: item.product ? item.product.productId : '',
                                        pseudoProductId: item.product ? item.product.pseudoId : '',
                                        glAccountId: item.glAccount.glAccountId,
                                        debitCreditFlag: item.isDebit == true ? 'D' : 'C',
                                        amount: item.price,
                                    ]" />
                    </iterate>
                    <!-- posting -->
                    <if condition="finDoc.isPosted == true">
                        <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans"
                            in-map="[acctgTransId: acctgTransId]" />
                    </if>
                </else-if>
                <!-- create shipment -->
                <else-if condition="finDoc.docType == 'shipment'">
                    <service-call name="growerp.100.FinDocServices100.create#Shipment"
                        in-map="[shipment: finDoc]" out-map="context" />
                    <set field="finDocId" from="shipmentId" />
                </else-if>
                <else>
                    <return error="true"
                        message="Document ${finDoc.docType} not supported yet to create...." />
                </else>
            </if>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc" out-map="context"
                in-map="[finDocId: finDocId, docType: finDoc.docType, sales: finDoc.sales]" />
            <set field="finDoc" from="finDocs[0]" />
        </actions>
    </service>

    <service verb="create" noun="Order">
        <description> Create an order for the users company</description>
        <in-parameters>
            <parameter name="order" required="true" type="Map" />
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="order.sales == true">
                <set field="vendorPartyId" from="companyPartyId" />
                <set field="customerPartyId"
                    from="order.otherCompany?.partyId ?:
                            order.otherUser?.partyId" />
                <set field="contactRole" value="CustomerContactPerson" />
                <else>
                    <set field="customerPartyId" from="companyPartyId" />
                    <set field="vendorPartyId"
                        from="order.otherCompany?.partyId ?:
                            order.otherUser?.partyId" />
                    <set field="contactRole" value="VendorContactPerson" />
                </else>
            </if>
            <!-- get currency -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId" />
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                value-field="aPref">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <set field="currencyUomId" from="aPref.baseCurrencyUomId" />
            <!-- create order -->
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId" />
            </entity-find>
            <!-- initially always open, when requested next step see below -->
            <if condition="order.sales == true">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    list="postalContactMechs">
                    <econdition field-name="partyId" from="customerPartyId" />
                    <econdition field-name="contactMechPurposeId" value="PostalPrimary" />
                </entity-find>
                <service-call name="mantle.order.OrderServices.create#Order"
                    in-map="[productStoreId: productStoreId,
                            pseudoId: order.pseudoId,
                            statusId: 'OrderOpen',
                            facilityId: facilities[0].facilityId,
                            vendorPartyId: vendorPartyId,
                            customerPartyId: customerPartyId,
                            postalContactMechId: postalContactMechs ? postalContactMechs[0].contactMechId : null,
                            orderName: order.description]"
                    out-map="context" />
                <else>
                    <service-call name="mantle.order.OrderServices.create#Order"
                        in-map="[   
                                facilityId: facilities[0].facilityId,
                                statusId: 'OrderOpen',
                                pseudoId: order.pseudoId,
                                vendorPartyId: vendorPartyId,
                                customerPartyId: customerPartyId,
                                orderName: order.description]"
                        out-map="context" />
                </else>
            </if>
            <if condition="order.otherUser?.partyId">
                <!-- add vendor/customer contact person as an extra party at orderPartParty -->
                <service-call name="create#mantle.order.OrderPartParty"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                        partyId:order.otherUser.partyId, roleTypeId: contactRole]" />
            </if>
            <!-- create items -->
            <service-call name="growerp.100.FinDocServices100.replace#OrderItems"
                in-map="[orderId: orderId,
                             orderPartSeqId: orderPartSeqId,
                             orderItems: order.items]" />
            <!-- update status if required -->
            <if condition="order.statusId == 'OrderPlaced'">
                <set field="order.orderId" from="orderId" />
                <service-call name="growerp.100.FinDocServices100.update#Order"
                    in-map="[order: order]" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="Invoice">
        <description> Create an invoice for the users company</description>
        <in-parameters>
            <parameter name="invoice" required="true" type="Map" />
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="invoice.sales == false">
                <!-- inside this payment object this field is NOT a string -->
                <set field="toPartyId" from="companyPartyId" />
                <set field="fromPartyId"
                    from="invoice.otherCompany?.partyId ?: invoice.otherUser.partyId" />
                <set field="contactRole" value="Vendor" />
                <else>
                    <set field="fromPartyId" from="companyPartyId " />
                    <set field="toPartyId"
                        from="invoice.otherCompany?.partyId ?: invoice.otherUser.partyId" />
                    <set field="contactRole" value="Customer" />
                </else>
            </if>
            <!-- get currency -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId" />
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                value-field="aPref">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <set field="currencyUomId" from="aPref.baseCurrencyUomId" />
            <!-- create invoice -->
            <service-call name="mantle.account.InvoiceServices.create#Invoice"
                in-map="[productStoreId: productStoreId,
                        pseudoId: invoice.pseudoId,
                        fromPartyId: fromPartyId,
                        toPartyId: toPartyId,
                        description: invoice.description,
                        externalId: invoice.reference]"
                out-map="context" />

            <!-- add vendor/customer contact person as an extra party at invoicePartParty -->
            <if condition="invoice.otherUser &amp;&amp; invoice.otherUser.partyId">
                <service-call name="create#mantle.account.invoice.InvoiceParty"
                    in-map="[invoiceId:invoiceId,
                        partyId:invoice.otherUser.partyId, roleTypeId: contactRole]" />
            </if>
            <!-- create items -->
            <if condition="invoice.items &amp;&amp; !invoice.items.isEmpty()">
                <service-call name="growerp.100.FinDocServices100.replace#InvoiceItems"
                    in-map="[invoiceId: invoiceId,
                            invoiceItems: invoice.items]" />
            </if>
        </actions>
    </service>

    <service verb="create" noun="Shipment">
        <description> Create an shipment for the users company</description>
        <in-parameters>
            <parameter name="shipment" required="true" type="Map" />
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="shipment.sales == false">
                <set field="toPartyId" from="companyPartyId" />
                <set field="fromPartyId"
                    from="shipment.otherCompany?.partyId ?: shipment.otherUser.partyId" />
                <else>
                    <set field="fromPartyId" from="companyPartyId" />
                    <set field="toPartyId"
                        from="shipment.otherCompany?.partyId ?: shipment.otherUser.partyId" />
                    <entity-find entity-name="mantle.facility.Facility" list="facilities">
                        <econdition field-name="ownerPartyId" from="companyPartyId" />
                    </entity-find>
                    <set field="originFacilityId" from="facilities[0].facilityId" />
                </else>
            </if>
            <!-- create shipment -->
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId" />
            </entity-find>
            <service-call name="mantle.shipment.ShipmentServices.create#Shipment"
                in-map="[   pseudoId: shipment.pseudoId,
                            originFacilityId: originFacilityId,
                            fromPartyId: fromPartyId,
                            toPartyId: toPartyId,
                            statusId: shipment.statusId,
                            description: shipment.description,
                            externalId: shipment.reference]"
                out-map="context" />
            <!-- create items -->
            <iterate list="shipment.items" entry="item">
                <service-call name="mantle.shipment.ShipmentServices.create#ShipmentItem"
                    in-map="[shipmentId: shipmentId, productId: item.product.productId,
                            quantity: item.quantity]" />
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="Payment">
        <description> Create an payment for the users company</description>
        <in-parameters>
            <parameter name="payment" required="true" type="Map" />
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="payment.sales == true">
                <then>                    <!-- incoming sales payment -->
                    <set field="fromPartyId"
                        from="payment.otherCompany?.partyId ?: payment.otherUser.partyId" />
                    <set field="toPartyId" from="companyPartyId" />
                    <set field="contactRole" value="CustomerContactPerson" />
                    <if
                        condition="payment.paymentInstrument == 'CreditCard' &amp;&amp; 
                                    payment.otherCompany.paymentMethod?.ccPaymentMethodId">
                        <set field="paymentMethodId"
                            from="payment.otherCompany.paymentMethod.ccPaymentMethodId" />
                        <set field="paymentGatewayConfigId"
                            from="System.getProperty('paymentGatewayConfigId')" />
                    </if>
                    <if
                        condition="payment.paymentInstrument == 'CompanyCheck' &amp;&amp; 
                                    payment.otherCompany.paymentMethod?.ccPaymentMethodId">
                        <set field="paymentMethodId"
                            from="payment.otherCompany.paymentMethod.ccPaymentMethodId" />
                        <set field="paymentGatewayConfigId"
                            from="System.getProperty('paymentGatewayConfigId')" />
                    </if>
                </then>
                <else><!-- outgoing purchase payment -->
                    <set field="fromPartyId" from="companyPartyId" />
                    <set field="toPartyId"
                        from="payment.otherCompany?.partyId ?: payment.otherUser.partyId" />
                    <set field="contactRole" value="VendorContactPerson" />
                    <if condition="payment.paymentInstrument == 'CreditCard'">
                        <entity-find entity-name="mantle.account.method.PaymentMethod" limit="1"
                            list="pms">
                            <econdition field-name="ownerPartyId" from="companyPartyId" />
                            <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard" />
                        </entity-find>
                        <if condition="pms">
                            <set field="paymentMethodId" from="pms[0].paymentMethodId" />
                            <set field="paymentGatewayConfigId"
                                from="System.getProperty('paymentGatewayConfigId')" />
                        </if>
                    </if>
                    <if condition="payment.paymentInstrument == 'CreditCard'">
                        <entity-find entity-name="mantle.account.method.PaymentMethod" limit="1"
                            list="pms">
                            <econdition field-name="ownerPartyId" from="companyPartyId" />
                            <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard" />
                        </entity-find>
                        <if condition="pms">
                            <set field="paymentMethodId" from="pms[0].paymentMethodId" />
                            <set field="paymentGatewayConfigId"
                                from="System.getProperty('paymentGatewayConfigId')" />
                        </if>
                    </if>
                </else>
            </if>
            <!-- paymenttype -->
            <if condition="payment.items &amp;&amp; payment.items[0].paymentType">
                <entity-find entity-name="mantle.ledger.config.PaymentTypeGlAccount"
                    list="glAccounts">
                    <econdition field-name="organizationPartyId" from="companyPartyId" />
                    <econdition field-name="paymentTypeEnumId"
                        from="payment.items[0].paymentType.paymentTypeId" />
                    <econditions combine="or">
                        <econdition field-name="isPayable" from="payment.sales == true? 'N' : 'Y'" />
                        <econdition field-name="isPayable" value="E" />
                    </econditions>
                    <econdition field-name="glAccountId" operator="is-not-null" />
                </entity-find>
                <if condition="glAccounts">
                    <set field="paymentTypeGlAccountId" from="glAccounts[0].glAccountId" />
                </if>
                <!-- if no glaccount found cannot be posted -->
                <if
                    condition="!paymentTypeGlAccountId 
                        &amp;&amp; !payment.items[0].glAccount?.glAccountId">
                    <return error="true"
                        message="No Gl Account ID found for payment type: ${payment.items[0].paymentType?.paymentTypeName}[${payment.items[0].paymentType?.paymentTypeId}]" />
                </if>
            </if>
            <!-- create payment -->
            <set field="instrument" from="'Pi' + payment.paymentInstrument" />
            <service-call name="mantle.account.PaymentServices.create#Payment"
                in-map="[
                        pseudoId: payment.pseudoId,
                        statusId: payment.statusId,
                        paymentTypeEnumId: paymentTypeEnumId,
                        amount: payment.grandTotal,
                        paymentInstrumentEnumId: instrument,
                        effectiveDate: ec.user.nowTimestamp,
                        paymentMethodId: paymentMethodId,
                        paymentGatewayConfigId: paymentGatewayConfigId,
                        toPartyId: toPartyId,
                        itemTypeGlAccountId: paymentTypeGlAccountId,
                        overrideGlAccountId: payment.items? payment.items[0].glAccount?.glAccountId : null,
                        fromPartyId: fromPartyId,
                        paymentRefNum: payment.reference &amp;&amp; payment.reference.length() &gt;= 60 ? payment.reference.substring(0,60) + '..' : payment.reference]"
                out-map="context" />
        </actions>
    </service>

    <service verb="replace" noun="OrderItems">
        <description>first delete any orderitems(if any) and create new ones.</description>
        <in-parameters>
            <parameter name="orderId" required="true" type="String" />
            <parameter name="orderPartSeqId" required="true" type="String" />
            <parameter name="orderItems" type="List" />
        </in-parameters>
        <actions>
            <entity-delete-by-condition entity-name="growerp.product.AssetRental">
                <econdition field-name="orderId" />
            </entity-delete-by-condition>
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId" />
            </entity-delete-by-condition>
            <iterate list="orderItems" entry="item">
                <if
                    condition="item.itemType.itemTypeId == 'ItemProduct'
                        &amp;&amp; !item.product.productId.isEmpty()">
                    <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [ itemTypeId: item.itemType.itemTypeId,
                                            productId: item.product.productId,
                                            quantity: item.quantity,
                                            unitAmount: item.price]"
                        out-map="context" />
                    <else-if condition="item.itemType.itemTypeId == 'ItemRental'">
                        <service-call name="mantle.order.OrderServices.create#OrderItem"
                            in-map="context + [ itemTypeEnumId: item.itemType.itemTypeId,
                                            productId: item.product.productId,
                                            itemDescription: item.description,
                                            quantity: item.quantity,
                                            requireInventory: false,
                                            unitAmount: item.price]"
                            out-map="context" />
                        <!-- settime for all dates otherwise ma5tching will fail in
                        AssetsAvailableForProduct-->
                        <set field="rentalFromDate"
                            from="ec.l10n.parseTimestamp(item.rentalFromDate.substring(0,10) + ' 15:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')" />
                        <set field="rentalThruDate"
                            from="ec.l10n.parseTimestamp(item.rentalThruDate.substring(0,10) + ' 12:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')" />
                        <service-call name="create#growerp.product.AssetRental"
                            in-map="[   productId: item.product.productId,
                                    assetId: item.assetId,
                                    orderId: orderId,
                                    orderItemSeqId: orderItemSeqId,
                                    rentalFromDate: rentalFromDate,
                                    rentalThruDate: rentalThruDate,
                                ]" />
                    </else-if>
                    <else>
                        <service-call name="mantle.order.OrderServices.create#OrderItem"
                            in-map="context + [itemTypeEnumId: item.itemType.itemTypeId,
                                            productId: item.product.productId,
                                            itemDescription: item.description,
                                            quantity: item.quantity,
                                            unitAmount: item.price,
                                            overrideGlAccountId: item.glAccount?.glAccountId]"
                            out-map="itemcreate" />
                    </else>
                </if>
            </iterate>

        </actions>
    </service>

    <service verb="replace" noun="InvoiceItems">
        <description>first delete any invoiceitems(if any) and create new ones.</description>
        <in-parameters>
            <parameter name="invoiceId" required="true" type="String" />
            <parameter name="invoiceItems" required="true" type="List" />
        </in-parameters>
        <actions>
            <entity-delete-by-condition entity-name="mantle.account.invoice.InvoiceItem">
                <econdition field-name="invoiceId" />
            </entity-delete-by-condition>
            <iterate list="invoiceItems" entry="item">
                <service-call name="mantle.account.InvoiceServices.create#InvoiceItem"
                    in-map="context + [ itemTypeEnumId: item.itemType.itemTypeId,
                                        productId: item.product.productId,
                                        quantity: item.quantity,
                                        description: item.description,
                                        overrideGlAccountId: item.glAccount?.glAccountId,
                                        amount: item.price]"
                    out-map="context" />
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="FinDoc">
        <description>Update a financial document either order, invoice or payment</description>
        <in-parameters>
            <parameter name="finDoc" type="Map" required="true">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="pseudoId" />
                <parameter name="orderId" />
                <parameter name="shipmentId" />
                <parameter name="invoiceId" />
                <parameter name="paymentId" />
                <parameter name="transactionId" />
                <parameter name="requestId" />
                <parameter name="isPosted" type="Boolean" />
                <parameter name="paymentInstrument" />
                <parameter name="statusId" />
                <parameter name="description" />
                <parameter name="otherUser" type="Map">
                    <parameter name="partyId" />
                </parameter>
                <parameter name="otherCompany" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="paymentMethod" type="Map">
                        <parameter name="ccPaymentMethodId" />
                    </parameter>
                </parameter>
                <parameter name="grandTotal" />
                <parameter name="classificationId" />
                <parameter name="items" type="List">
                    <parameter name="item" type="Map">
                        <parameter name="itemSeqId" />
                        <parameter name="itemType" type="Map">
                            <parameter name="itemTypeId" />
                            <parameter name="itemTypeName" />
                        </parameter>
                        <parameter name="paymentType" type="Map">
                            <parameter name="paymentTypeId" />
                            <parameter name="paymentTypeName" />
                        </parameter>
                        <parameter name="product" type="Map">
                            <parameter name="productId" />
                        </parameter>
                        <parameter name="description" />
                        <parameter name="quantity" />
                        <parameter name="price" />
                        <parameter name="glAccountId" />
                        <parameter name="assetId" />
                        <parameter name="assetName" />
                        <parameter name="rentalFromDate" />
                        <parameter name="rentalThruDate" />
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="pseudoId" />
                <parameter name="orderId" />
                <parameter name="shipmentId" />
                <parameter name="invoiceId" />
                <parameter name="paymentId" />
                <parameter name="transactionId" />
                <parameter name="requestId" />
                <parameter name="isPosted" type="Boolean" />
                <parameter name="paymentInstrument" />
                <parameter name="statusId" />
                <parameter name="creationDate" />
                <parameter name="placedDate" />
                <parameter name="description" />
                <parameter name="otherUser" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                </parameter>
                <parameter name="otherCompany" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="email" />
                    <parameter name="role" />
                </parameter>
                <parameter name="grandTotal" />
                <parameter name="classificationId" />
                <parameter name="items" type="List">
                    <parameter name="item" type="Map">
                        <parameter name="itemSeqId" />
                        <parameter name="itemType" type="Map">
                            <parameter name="itemTypeId" />
                            <parameter name="itemTypeName" />
                        </parameter>
                        <parameter name="paymentType" type="Map">
                            <parameter name="paymentTypeId" />
                            <parameter name="paymentTypeName" />
                        </parameter>
                        <parameter name="product" type="Map">
                            <parameter name="productId" />
                        </parameter>
                        <parameter name="description" />
                        <parameter name="quantity" />
                        <parameter name="price" />
                        <parameter name="glAccountId" />
                        <parameter name="asset" type="Map">
                            <parameter name="assetId" />
                            <parameter name="assetName" />
                            <parameter name="location" type="Map">
                                <parameter name="locationId" />
                                <parameter name="locationName" />
                            </parameter>
                        </parameter>
                        <parameter name="rentalFromDate" />
                        <parameter name="rentalThruDate" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="growerp.100.FinDocServices100.convert#StatusId" out-map="context"
                in-map="[sales: finDoc?.sales, docType: finDoc.docType, statusId: finDoc.statusId]" />
            <set field="finDoc.statusId" from="convertedStatusId" />
            <!-- order -->
            <if condition="finDoc.docType == 'order'">
                <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="check" limit="1">
                    <econdition field-name="orderId" from="finDoc.orderId" />
                    <econditions combine="or">
                        <econdition field-name="vendorPartyId" from="companyPartyId" />
                        <econdition field-name="customerPartyId" from="companyPartyId" />
                    </econditions>
                </entity-find>
                <if condition="!check">
                    <return
                        message="Update Order ${finDoc.orderId}/${finDoc.pseudoId} for company: ${companyPartyId} not found!" />
                </if>
                <service-call name="growerp.100.FinDocServices100.update#Order"
                    in-map="[order: finDoc]" />
                <set field="inMap"
                    from="[finDocId: finDoc.orderId, 
                                            docType: 'order', sales: finDoc.sales]" />
                <!-- invoice -->
                <else-if condition="finDoc.docType == 'invoice'">
                    <entity-find entity-name="mantle.account.invoice.Invoice" list="check" limit="1">
                        <econdition field-name="invoiceId" from="finDoc.invoiceId" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                    </entity-find>
                    <if condition="!check">
                        <return
                            message="Update Invoice ${finDoc.invoiceId} for company: ${companyPartyId} not found!" />
                    </if>
                    <service-call name="growerp.100.FinDocServices100.update#Invoice"
                        in-map="[invoice: finDoc]" />
                    <set field="inMap"
                        from="[finDocId: finDoc.invoiceId,
                            docType: 'invoice', sales: finDoc.sales]" />
                </else-if>
                <!-- payment -->
                <else-if condition="finDoc.docType == 'payment'">
                    <entity-find entity-name="mantle.account.payment.Payment" list="check" limit="1">
                        <econdition field-name="paymentId" from="finDoc.paymentId" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                    </entity-find>
                    <if condition="!check">
                        <return message="Update Payment $finDoc.paymentId} not found!" />
                    </if>
                    <service-call name="growerp.100.FinDocServices100.update#Payment"
                        in-map="[payment: finDoc]" />
                    <set field="inMap"
                        from="[finDocId: finDoc.paymentId,
                        docType: 'payment', sales: finDoc.sales]" />
                </else-if>
                <!-- shipment -->
                <else-if condition="finDoc.docType == 'shipment'">
                    <entity-find entity-name="mantle.shipment.Shipment" list="check" limit="1">
                        <econdition field-name="shipmentId" from="finDoc.shipmentId" />
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="companyPartyId" />
                            <econdition field-name="toPartyId" from="companyPartyId" />
                        </econditions>
                    </entity-find>
                    <if condition="!check">
                        <return message="Shipment ${finDoc.shipmentId} not found!" />
                    </if>
                    <service-call name="growerp.100.FinDocServices100.update#Shipment"
                        in-map="[finDoc: finDoc]" />
                    <set field="inMap"
                        from="[finDocId: finDoc.shipmentId,
                                    docType: 'shipment', sales: finDoc.sales]" />
                </else-if>
                <!-- transaction -->
                <else-if condition="finDoc.docType == 'transaction'">
                    <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans"
                        value-field="transaction" for-update="true">
                        <field-map field-name="acctgTransId" from="finDoc.transactionId" />
                        <field-map field-name="organizationPartyId" from="companyPartyId" />
                    </entity-find-one>
                    <if condition="!transaction">
                        <return error="true"
                            message="Update Transaction ${finDoc.transactionId} not found" />
                    </if>
                    <if condition="transaction.isPosted == true">
                        <return error="true"
                            message="Transaction ${finDoc.transactionId} is posted, cannot be changed!" />
                    </if>
                    <!-- update description -->
                    <if
                        condition="transaction.description != finDoc.description ||
                            transaction.pseudoId != finDoc.pseudoId">
                        <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId: finDoc.transactionId, description: finDoc.description,
                                    pseudoId: finDoc.pseudoId]" />
                    </if>
                    <!-- update entries -->
                    <entity-delete-by-condition
                        entity-name="mantle.ledger.transaction.AcctgTransEntry">
                        <econdition field-name="acctgTransId" from="finDoc.transactionId" />
                    </entity-delete-by-condition>
                    <iterate list="finDoc.items" entry="item">
                        <if condition="!item.price">
                            <continue />
                        </if>
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry"
                            in-map="[   acctgTransId: finDoc.transactionId,
                                        glAccountId: item.glAccount.glAccountId,
                                        productId: item.product ? item.product.productId : '',
                                        pseudoProductId: item.product ? item.product.pseudoId : '',
                                        quantity: item.quantity,
                                        debitCreditFlag: item.isDebit == true ? 'D' : 'C',
                                        amount: item.price,
                                    ]" />
                    </iterate>
                    <!-- posting -->
                    <if condition="finDoc.isPosted == true &amp;&amp; transaction.isPosted == 'N'">
                        <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans"
                            in-map="[acctgTransId: finDoc.transactionId]" />
                    </if>
                    <!-- remove physically unposted transaction with status cancelled -->
                    <if condition="finDoc.statusId == 'FinDocCancelled'">
                        <!-- delete transactions -->
                        <entity-delete-by-condition
                            entity-name="mantle.ledger.transaction.AcctgTransEntry">
                            <econdition field-name="acctgTransId" from="finDoc.transactionId" />
                        </entity-delete-by-condition>
                        <if condition="transaction.isPosted == 'N'">
                            <entity-delete value-field="transaction" />
                            <else>
                                <return error="true"
                                    message="Transaction ${transaction.pseudoId} is posted, cannot be deleted!" />
                            </else>
                        </if>
                        <set field="inMap" from="[:]" />
                        <else>
                            <set field="inMap"
                                from="[finDocId: finDoc.transactionId,
                                        docType: 'transaction', sales: true]" />
                        </else>
                    </if>
                    <!-- -->
                </else-if>
                <!-- request -->
                <else-if condition="finDoc.docType == 'request'">
                    <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                        in-map="[sales: sales, docType: 'requestType', statusId: finDoc.requestType]"
                        out-map="requestType" />
                    <set field="otherPartyId"
                        from="finDoc.otherCompany?.partyId ?: finDoc.otherUser?.partyId" />
                    <service-call name="update#mantle.request.Request"
                        in-map="[   requestId: finDoc.requestId,
                                    pseudoId: finDoc.pseudoId,
                                    requestTypeEnumId: requestType.convertedStatusId,
                                    description: finDoc.description,
                                    ownerpartyId: ownerPartyId,
                                    statusId: convertedStatusId,
                                    filedByPartyId: otherPartyId,
                                ]"
                        out-map="context" />
                    <set field="inMap"
                        from="[finDocId: finDoc.requestId,
                                    docType: 'request', sales: false]" />
                </else-if>
                <else>
                    <return error="true" message="doctype ${finDoc.docType} not supported!" />
                </else>
            </if>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc" in-map="inMap"
                out-map="context" />
            <set field="finDoc" from="finDocs[0]" />
        </actions>
    </service>

    <service verb="get" noun="DailyRentalOccupancy">
        <description>Provide a list of dates which need to be blocked at input</description>
        <in-parameters>
            <parameter name="productId" />
        </in-parameters>
        <out-parameters>
            <parameter name="products" type="List">
                <parameter name="productId" />
                <parameter name="productName" />
                <parameter name="fullDates" type="List">
                    <parameter name="fullDate" />
                    <!-- YYYY-MM-DD -->
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="nowBeginOfDay"
                from="java.time.ZonedDateTime.ofInstant(java.time.Instant.now(), java.time.ZoneId.systemDefault()).truncatedTo(java.time.temporal.ChronoUnit.DAYS)" />
            <set field="nowBeginOfNextDay"
                from="java.sql.Timestamp.from(nowBeginOfDay.plusDays(1).toInstant())" />
            <!-- get active rentals -->
            <entity-find entity-name="growerp.product.ProductAndAssetRental" list="rentals">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productId" from="productId" ignore-if-empty="true" />
                <econdition field-name="rentalThruDate" operator="greater-equals"
                    from="Timestamp.valueOf(nowBeginOfNextDay.toLocalDateTime())" />
                <order-by field-name="productName,productId" />
            </entity-find>
            <!-- gather fullDates which have rentals of this product -->
            <set field="fullDates" from="[]" />
            <set field="products" from="[]" />
            <iterate list="rentals" entry="rental">
                <if condition="lastItem &amp;&amp; lastItem.productId != rental.productId">
                    <service-call name="growerp.100.FinDocServices100.process#RentalLastItem"
                        out-map="context" in-map="[productId: lastItem.productId, dates: fullDates]" />
                    <!-- RentalLastItem has as output fullDates -->
                    <script>products.add([
                        productId: lastItem.productId,
                        productName: lastItem.productName,
                        fullDates: fullDates,
                        ])</script>
                    <set field="fullDates" from="[]" />
                </if>
                <!-- convert date to begin of day -->
                <set field="rentalFromDate"
                    from="Timestamp.valueOf(rental.rentalFromDate.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).truncatedTo(java.time.temporal.ChronoUnit.DAYS).toLocalDateTime())" />
                <!-- fromdate in the past? set to today-->
                <if
                    condition="rentalFromDate &lt; Timestamp.valueOf(nowBeginOfDay.toLocalDateTime())">
                    <set field="rentalFromdate"
                        from="Timestamp.valueOf(nowBeginOfDay.toLocalDateTime())" />
                </if>
                <set field="rental.rentalThruDate"
                    from="Timestamp.valueOf(rental.rentalThruDate.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).truncatedTo(java.time.temporal.ChronoUnit.DAYS).toLocalDateTime())" />
                <!-- for every date, record the number of assets that have a reservation -->
                <while condition="rentalFromDate &lt; rental.rentalThruDate">
                    <set field="rentalDate"
                        from="[d: rentalFromDate.toString().substring(0,10), n:1]" />
                    <script>
                        int index = fullDates.findIndexOf{it.d == rentalDate.d};
                        if (index != -1)
                            fullDates[index].n++
                        else
                            fullDates.add(rentalDate);
                    </script>
                    <!-- add a day to timestamp -->
                    <set field="rentalFromDate"
                        from="Timestamp.valueOf(rentalFromDate.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).plusDays(1).toLocalDateTime())" />
                </while>
                <set field="lastItem" from="rental" />
            </iterate>
            <if condition="lastItem">
                <service-call name="growerp.100.FinDocServices100.process#RentalLastItem"
                    out-map="context" in-map="[productId: lastItem.productId,dates: fullDates]" />
                <script>products.add([
                    productId: lastItem.productId,
                    productName: lastItem.productName,
                    fullDates: fullDates,
                    ])</script>
            </if>
            <if condition="!productId">
                <!-- add empty rental products -->
                <entity-find entity-name="mantle.product.Product" list="rentalProducts">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="productTypeEnumId" value="PtFixedAssetUse" />
                    <order-by field-name="productName,productId" />
                </entity-find>
                <set field="newProducts" from="[]" />
                <iterate list="rentalProducts" entry="rentalProduct">
                    <script>
                    var fullDates = products.find 
                            {it.productId == rentalProduct.productId}?.fullDates;
                    newProducts.add([
                        productId: rentalProduct.productId,
                        productName: rentalProduct.productName,
                        fullDates: fullDates != null ? fullDates : []])</script>
                </iterate>
                <set field="products" from="newProducts" />
            </if>
        </actions>
    </service>

    <service verb="process" noun="RentalLastItem">
        <in-parameters>
            <parameter name="productId" />
            <parameter name="dates" type="List" />
        </in-parameters>
        <out-parameters>
            <parameter name="fullDates" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- get available number of assets for this product -->
            <entity-find-count entity-name="mantle.product.asset.Asset" count-field="nbrOfAssets">
                <econdition field-name="ownerPartyId" from="companyPartyId" />
                <econdition field-name="productId" from="productId" />
            </entity-find-count>
            <set field="fullDates" from="[]" />
            <!-- get the dates where the available assets are used -->
            <iterate list="dates" entry="date">
                <if condition="date.n &gt;= nbrOfAssets">
                    <script>fullDates.add(date.d)</script>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="AssetsAvailableForProduct">
        <description>Service for getting the assets which are still free for a product by providing the from/thue dates</description>
        <in-parameters>
            <parameter name="productId" required="true" />
            <parameter name="fromDate" type="Timestamp" required="true" />
            <parameter name="thruDate" type="Timestamp" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="availableAssetIds" type="List" />
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="mantle.product.asset.Asset" list="assets">
                <econdition field-name="ownerPartyId" from="companyPartyId" />
                <econdition field-name="productId" from="productId" />
            </entity-find>
            <set field="availableAssetIds" from="[]" />
            <iterate list="assets" entry="asset">
                <entity-find-count entity-name="growerp.product.ProductAndAssetRental"
                    count-field="nbrUsed" cache="false">
                    <econdition field-name="productId" from="productId" />
                    <econdition field-name="assetId" from="asset.assetId" />
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econditions combine="or">
                        <econditions combine="and"><!-- order fromdate within -->
                            <econdition field-name="rentalFromDate" operator="less-equals"
                                from="fromDate" />
                            <econdition field-name="rentalThruDate" operator="greater-equals"
                                from="fromDate" />
                        </econditions>
                        <econditions combine="and"><!-- order thruDate within -->
                            <econdition field-name="rentalFromDate" operator="less-equals"
                                from="thruDate" />
                            <econdition field-name="rentalThruDate" operator="greater-equals"
                                from="thruDate" />
                        </econditions>
                        <econditions combine="and"><!-- both outside -->
                            <econdition field-name="rentalFromDate" operator="greater-equals"
                                from="fromDate" />
                            <econdition field-name="rentalThruDate" operator="less-equals"
                                from="thruDate" />
                        </econditions>
                    </econditions>
                </entity-find-count>
                <if condition="nbrUsed == 0">
                    <script>availableAssetIds.add(asset.assetId)</script>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="Order">
        <description> Update the order by re-creating only in the 'OrderOpen' status'.</description>
        <in-parameters>
            <!-- order has model of client -->
            <parameter name="order" required="true" type="Map" />
        </in-parameters>
        <actions>
            <!-- status sequence:
                OrderOpen -> OrderPlaced -> orderApproved -> OrderCompleted
            -->
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="orderId" from="order.orderId" />
            <entity-find entity-name="OrderHeaderPartItemPartiesAndReservation" list="items">
                <econdition field-name="orderId" />
                <econditions combine="or">
                    <econdition field-name="vendorPartyId" from="companyPartyId" />
                    <econdition field-name="customerPartyId" from="companyPartyId" />
                </econditions>
                <order-by field-name="orderItemSeqId" />
            </entity-find>
            <if condition="items[0].statusId == 'OrderOpen' || items[0].statusId == 'OrderPlaced'">
                <if condition="!items">
                    <return error="true" message="Order $orderId has no items!" />
                </if>
                <set field="paymentId" from="items[0].paymentId" />
                <set field="invoiceId" from="items[0].invoiceId" />
                <set field="orderPartSeqId" value="01" />
                <!-- orderheader -->
                <if condition="order.description &amp;&amp; items[0].orderName != order.description">
                    <entity-find-one entity-name="mantle.order.OrderHeader"
                        value-field="orderHeader">
                        <field-map field-name="orderId" from="order.orderId" />
                    </entity-find-one>
                    <set field="orderHeader.orderName" from="order.description" />
                    <entity-update value-field="orderHeader" />
                </if>
                <!-- order part-->
                <if condition="order.otherUser || order.otherCompany">
                    <!-- get existing record -->
                    <entity-find entity-name="mantle.order.OrderPart" list="parts" for-update="true"
                        limit="1">
                        <econdition field-name="orderId" />
                    </entity-find>
                    <if
                        condition="order.sales == true &amp;&amp;
                        parts[0].customerPartyId !=
                            order.otherCompany?.partyId ?: order.otherUser?.partyId">
                        <set field="parts[0].customerPartyId"
                            from="order.otherCompany?.partyId ?: order.otherUser?.partyId" />
                        <entity-update value-field="parts[0]" />
                    </if>
                    <if
                        condition="order.sales == false &amp;&amp; 
                            parts[0].vendorPartyId != (order.otherCompany?.partyId ?: order.otherUser.partyId)">
                        <set field="parts[0].vendorPartyId"
                            from="order.otherCompany?.partyId ?: order.otherUser.partyId" />
                        <entity-update value-field="parts[0]" />
                    </if>
                    <!-- contact person (add if missing)-->
                    <if condition="order.otherUser?.partyId">
                        <if condition="order.sales == true">
                            <set field="contactRole" value="CustomerContactPerson" />
                            <else>
                                <set field="contactRole" value="VendorContactPerson" />
                            </else>
                        </if>
                        <entity-find entity-name="mantle.order.OrderPartParty" list="parties"
                            for-update="true">
                            <econdition field-name="orderId" />
                            <econdition field-name="orderPartSeqId" from="parts[0].orderPartSeqId" />
                            <econdition field-name="roleTypeId" from="contactRole" />
                        </entity-find>
                        <if condition="!parties">
                            <service-call name="create#mantle.order.OrderPartParty"
                                in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                            partyId:order.otherUser.partyId, roleTypeId: contactRole]" />
                            <else>
                                <if condition="parties[0].partyId != order.otherUser.partyId">
                                    <entity-delete value-field="parties[0]" />
                                    <service-call name="create#mantle.order.OrderPartParty"
                                        in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                                    partyId:order.otherUser.partyId, roleTypeId: contactRole]" />
                                </if>
                            </else>
                        </if>
                    </if>
                </if>
                <if condition="order.items &amp;&amp; !order.items.isEmpty()">
                    <service-call name="growerp.100.FinDocServices100.replace#OrderItems"
                        in-map="[orderId: orderId,
                                         orderPartSeqId: orderPartSeqId,
                                         orderItems: order.items]" />
                </if>
            </if>
            <!-- handle status changes -->
            <if condition="order.statusId &amp;&amp; order.statusId != items[0].statusId">
                <if condition="order.statusId == 'OrderPlaced'">
                    <then>
                        <service-call in-map="context" out-map="context"
                            name="mantle.order.OrderServices.place#Order" />
                        <!-- assign asset when rental order (one item per order only)-->
                        <if
                            condition="items[0].rentalFromDate &amp;&amp;
                                        items[0].rentalThruDate">
                            <service-call
                                name="growerp.100.FinDocServices100.get#AssetsAvailableForProduct"
                                in-map="productId: items[0].productId,
                                    fromDate: items[0].rentalFromDate,
                                    thruDate: items[0].rentalThruDate"
                                out-map="context" />
                            <if condition="availableAssetIds.size() &lt; items.size()">
                                <return error="true"
                                    message="not enough assets available for this date: required ${items.size()} available: ${availableAssetIds.size()}" />
                            </if>
                            <set field="index" value="0" type="Integer" />
                            <iterate list="items" entry="item">
                                <!-- when items replaced assetRentalId not available -->
                                <entity-find-one entity-name="growerp.product.AssetRental"
                                    value-field="assetRental">
                                    <field-map field-name="orderId" from="order.orderId" />
                                    <field-map field-name="orderItemSeqId"
                                        from="item.orderItemSeqId" />
                                </entity-find-one>
                                <set field="assetRental.assetId" from="availableAssetIds[index++]" />
                                <entity-update value-field="assetRental" />
                            </iterate>
                        </if>
                    </then>
                    <else-if condition="order.statusId == 'OrderApproved'">
                        <!-- when sales order: set shipping address and method -->
                        <!-- Simplescreens orderDetail.xml line 1138 -->
                        <entity-find-one entity-name="growerp.product.AssetRental"
                            value-field="isRoomRental">
                            <field-map field-name="orderId" from="order.orderId" />
                        </entity-find-one>
                        <if condition="order.sales == true &amp;&amp; !isRoomRental">
                            <if condition="!order.otherCompany">
                                <!-- needed when just changing status for sales order -->
                                <entity-find entity-name="mantle.order.OrderPart" list="parts"
                                    limit="1">
                                    <econdition field-name="orderId" />
                                </entity-find>
                            </if>
                            <service-call
                                name="mantle.party.ContactServices.get#PartyContactInfoList"
                                out-map="customerShippingInfo"
                                in-map="[partyId: order.otherCompany?.partyId ?: order.otherUser?.partyId ?: parts[0].customerPartyId,
                                    postalContactMechPurposeId:'PostalShippingDest']" />
                            <if condition="customerShippingInfo.postalAddressList == null">
                                <return error="true"
                                    message="Customer does not have a shipping address!" />
                            </if>
                            <set field="postalAddress"
                                from="customerShippingInfo.postalAddressList[0]" />
                            <service-call
                                name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                                in-map="[orderId: order.orderId, orderPartSeqId: orderPartSeqId,
                            shippingPostalContactMechId: postalAddress.postalContactMechId,
                            carrierAndShipmentMethod: '_NA_:ShMthPickUp']" />
                            <!-- carrierPartyId:shipmentMethodEnumId -->
                        </if>
                        <!-- for websales do not create invoice aand payment is already created
                                approved-->
                        <entity-find entity-name="mantle.account.payment.Payment" list="payments">
                            <econdition field-name="orderId" from="order.orderId" />
                        </entity-find>
                        <if condition="!payments">
                            <!-- create invoice -->
                            <if condition="order.sales == true">
                                <set field="invStatusId" value="InvoiceFinalized" />
                                <else>
                                    <set field="invStatusId" value="InvoiceReceived" />
                                </else>
                            </if>
                            <service-call
                                in-map="[orderId: order.orderId, orderPartSeqId: '01']"
                                out-map="context"
                                name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" />
                            <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                in-map="[ownerPartyId: ownerPartyId, seqName: 'invoice']"
                                out-map="context" />
                            <service-call name="update#mantle.account.invoice.Invoice"
                                in-map="[invoiceId: invoiceId,
                                        pseudoId: seqNum,
                                        statusId: invStatusId]" />
                            <!-- create payment when invoice total > 0-->
                            <entity-find-one entity-name="mantle.account.invoice.Invoice"
                                value-field="invoice" />
                            <if condition="invoice.invoiceTotal &gt; 0">
                                <set field="effectiveDate" from="ec.user.nowTimestamp" />
                                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                    in-map="[ownerPartyId: ownerPartyId, seqName: 'payment']"
                                    out-map="context" />
                                <service-call
                                    name="mantle.account.PaymentServices.create#InvoicePayment"
                                    in-map="[invoiceId: invoiceId, effectiveDate:effectiveDate,
                                statusId: 'PmntPromised', orderId: order.orderId,
                                pseudoId: seqNum]"
                                    out-map="context" />
                            </if>
                        </if>
                        <service-call name="mantle.order.OrderServices.approve#Order"
                            in-map="[orderId: order.orderId]" />
                        <!-- create shipment -->
                        <entity-find entity-name="mantle.facility.Facility" list="facilities"
                            limit="1">
                            <econdition field-name="ownerPartyId" from="companyPartyId" />
                        </entity-find>
                        <service-call
                            name="mantle.shipment.ShipmentServices.create#OrderPartShipment"
                            in-map="[orderId: order.orderId, facilityId: facilities[0].facilityId,
                                orderPartSeqId: '01']"
                            out-map="context" />
                        <if condition="shipmentId != null">
                            <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                in-map="[ownerPartyId: ownerPartyId, seqName: 'shipment']"
                                out-map="context" />
                            <!-- shipment created with status created -> ShipScheduled better then
                                approved -> ShipPacked because when approved, you have to show the 
                                receive or send screen shipment -->
                            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                                in-map="[shipmentId: shipmentId,
                                    statusId: 'ShipScheduled',
                                    pseudoId: seqNum]" />
                            <else><!-- no shipable items so complete order already here not with
                                    rental though-->
                                <entity-find entity-name="growerp.product.AssetRental"
                                    list="rentals">
                                    <econdition field-name="orderId" from="order.orderId" />
                                </entity-find>
                                <if condition="!rentals">
                                    <service-call name="mantle.order.OrderServices.complete#Order"
                                        in-map="[orderId: order.orderId]" />
                                </if>
                                <!-- capture payment here because no shipments -->
                                <entity-find entity-name="mantle.account.payment.Payment"
                                    list="payments">
                                    <econdition field-name="orderId" from="order.orderId" />
                                </entity-find>
                                <!-- get paymentId either from website,
                                    or created here with create#InvoicePayment -->
                                <service-call
                                    name="mantle.account.PaymentServices.capture#SinglePayment"
                                    out-map="captOut"
                                    in-map="[paymentId: payments?[0].paymentId ?: paymentId]" />
                            </else>
                        </if>
                        <if condition="!payments">
                            <!-- check if related invoice transaction has pseudoId -->
                            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans"
                                list="transactions" for-update="true">
                                <econdition field-name="invoiceId" from="invoiceId" />
                            </entity-find>
                            <if condition="transactions &amp;&amp; !transactions[0].pseudoId">
                                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                    in-map="[ownerPartyId: ownerPartyId, seqName: 'transaction']"
                                    out-map="context" />
                                <set field="transactions[0].pseudoId" from="seqNum" />
                                <entity-update value-field="transactions[0]" />
                            </if>
                        </if>
                    </else-if>
                    <else-if condition="order.statusId == 'OrderCompleted'">
                        <service-call name="mantle.order.OrderServices.complete#Order"
                            in-map="context" />
                        <!-- invoice only be updated is required? it can make the order completed-->
                        <!--entity-find-one
                    entity-name="mantle.account.invoice.Invoice" value-field="invoice">
                        <field-map field-name="invoiceId" from="order.invoiceId"/>
                    </entity-find-one>
                    <if condition="order.sales == true">
                        <set field="invoice.statusId" value="InvoiceSent"/>
                        <else>
                            <set field="invoice.statusId" value="InvoiceReceived"/>
                        </else>
                    </if>
                    <service-call name="update#mantle.account.invoice.Invoice" in-map="invoice"/-->
                    </else-if>
                    <else-if condition="order.statusId == 'OrderCancelled'">
                        <service-call name="mantle.order.OrderServices.cancel#Order"
                            in-map="context" />
                        <!-- if rental order delete asset rental records-->
                        <entity-delete-by-condition entity-name="growerp.product.AssetRental">
                            <econdition field-name="orderId" from="order.orderId" />
                        </entity-delete-by-condition>
                    </else-if>
                </if>
            </if>
        </actions>
    </service>

    <service verb="update" noun="Invoice">
        <description> Update the invoice only in the 'InvoiceInProcess' status'.</description>
        <in-parameters>
            <!-- invoice has model of client -->
            <parameter name="invoice" required="true" type="Map" />
        </in-parameters>
        <actions>
            <!-- status sequence:
        sls    InvoiceInProcess -> InvoiceFinalized -> InvoiceSent -> InvoicePmtRecvd
        pur    InvoiceIncoming -> InvoiceReceived -> InvoiceApproved -> -> InvoicePmtSent
        -->
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="invoiceId" from="invoice.invoiceId" />
            <entity-find entity-name="InvoiceItemsAndParties" list="items">
                <econdition field-name="invoiceId" />
                <econditions combine="or">
                    <econdition field-name="fromPartyId" from="companyPartyId" />
                    <econdition field-name="toPartyId" from="companyPartyId" />
                </econditions>
                <order-by field-name="invoiceItemSeqId" />
            </entity-find>
            <if condition="!items">
                <return message="Could not find Invoice ${invoice.invoiceId}}" />
            </if>
            <entity-find-one entity-name="mantle.account.invoice.Invoice"
                value-field="invoiceHeader" for-update="true">
                <field-map field-name="invoiceId" from="invoice.invoiceId" />
            </entity-find-one>
            <!-- description change -->
            <if
                condition="invoice.description &amp;&amp; 
                items[0].invoiceName != invoice.description">
                <set field="invoiceHeader.description" from="invoice.description" />
            </if>
            <!-- related customer/vendor change -->
            <if condition="invoice.sales">
                <then>
                    <set field="invoiceHeader.toPartyId"
                        from="invoice.otherCompany?.partyId ?: invoice.otherUser.partyId" />
                </then>
                <else>
                    <set field="invoiceHeader.fromPartyId"
                        from="invoice.otherCompany?.partyId ?: invoice.otherUser.partyId" />
                </else>
            </if>
            <entity-update value-field="invoiceHeader" />
            <!-- handle status changes -->
            <if condition="invoice.statusId &amp;&amp; invoice.statusId != items[0].statusId">
                <service-call name="update#mantle.account.invoice.Invoice"
                    in-map="[invoiceId: invoice.invoiceId, statusId: invoice.statusId]" />
                <if
                    condition="invoice.statusId == 'InvoiceApproved' ||
                            invoice.statusId == 'InvoiceSent'">
                    <!-- create payment for approved/sent invoices -->
                    <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                        in-map="[ownerPartyId: ownerPartyId, seqName: 'payment']" out-map="context" />
                    <service-call name="mantle.account.PaymentServices.create#InvoicePayment"
                        in-map="[invoiceId: invoice.invoiceId, statusId: 'PmntProposed',
                        effectiveDate: ec.user.nowTimestamp, pseudoId: seqNum]"
                        out-map="context" />
                </if>
                <else>                    <!-- only update items when no status changes -->
                    <if
                        condition="items[0].statusId != 'InvoiceInProcess' &amp;&amp;
                        items[0].statusId != 'InvoiceIncoming'">
                        <return message="invoice status wrong: ${items[0].statusId}, cannot update" />
                    </if>
                    <!-- delete and recreate all invoice items -->
                    <if condition="invoice.items &amp;&amp; !invoice.items.isEmpty()">
                        <service-call name="growerp.100.FinDocServices100.replace#InvoiceItems"
                            in-map="[invoiceId: invoice.invoiceId,
                                invoiceItems: invoice.items]" />
                    </if>
                </else>
            </if>
            <!-- check if related transaction has pseudoId -->
            <!-- entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="transactions"
                for-update="true">
                <econdition field-name="invoiceId" from="invoice.invoiceId" />
            </entity-find>
            <if condition="transactions &amp;&amp; !transactions[0].pseudoId">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'transaction']" out-map="context" />
                <set field="transactions[0].pseudoId" from="seqNum" />
                <entity-update value-field="transactions[0]" />
            </if-->
        </actions>
    </service>

    <service verb="update" noun="Payment">
        <in-parameters>
            <parameter name="payment" required="true" type="Map" />
        </in-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="mantle.account.payment.Payment" list="payments">
                <econditions combine="or">
                    <econdition field-name="fromPartyId" from="companyPartyId" />
                    <econdition field-name="toPartyId" from="companyPartyId" />
                </econditions>
                <econdition field-name="paymentId" from="payment.paymentId" />
            </entity-find>
            <if condition="!payments">
                <return error="true"
                    message="Payment: ${payment.paymentId} noy found for company: $companyPartyId" />
            </if>
            <!-- check first for status change-->
            <if condition="payments[0].statusId != payment.statusId">
                <service-call name="update#mantle.account.payment.Payment"
                    in-map="[paymentId: payment.paymentId, statusId: payment.statusId]" />
                <else>
                    <entity-find-one entity-name="mantle.account.payment.Payment"
                        value-field="paymentOld" for-update="true">
                        <field-map field-name="paymentId" from="payment.paymentId" />
                    </entity-find-one>
                    <!-- related customer/vendor change -->
                    <if condition="payment.sales">
                        <then>
                            <set field="paymentOld.fromPartyId"
                                from="payment.otherCompany?.partyId ?: payment.otherUser.partyId" />
                        </then>
                        <else>
                            <set field="paymentOld.toPartyId"
                                from="payment.otherCompany?.partyId ?: payment.otherUser.partyId" />
                        </else>
                    </if>
                    <set field="amount" from="payment.grandTotal" type="BigDecimal" />
                    <set field="paymentOld.amount" from="amount" />
                    <!-- first item stores the paymentType needed for posting -->
                    <if condition="payment.items &amp;&amp; payment.items[0].paymentType">
                        <entity-find entity-name="mantle.ledger.config.PaymentTypeGlAccount"
                            list="glAccounts">
                            <econdition field-name="organizationPartyId" from="companyPartyId" />
                            <econdition field-name="paymentTypeEnumId"
                                from="payment.items[0].paymentType.paymentTypeId" />
                            <econditions combine="or">
                                <econdition field-name="isPayable"
                                    from="payment.sales == true ? 'N' : 'Y'" />
                                <econdition field-name="isPayable" value="E" />
                            </econditions>
                            <econdition field-name="glAccountId" operator="is-not-null" />
                        </entity-find>
                        <if
                            condition="glAccounts &amp;&amp; glAccounts[0].glAccountId != paymentOld.itemTypeGlAccountId">
                            <set field="paymentOld.itemTypeGlAccountId"
                                from="glAccounts[0].glAccountId" />
                        </if>
                    </if>
                    <!-- if no glaccount found cannot be posted -->
                    <if
                        condition="!paymentOld.itemTypeGlAccountId &amp;&amp; !payment.items[0].glAccount?.glAccountId ">
                        <return error="true"
                            message="No Gl Account ID found for payment type: ${payment.items[0].itemType?.itemTypeName}[${payment.items[0].itemType?.itemTypeId}]" />
                    </if>
                    <!-- payment instrument changed? -->
                    <set field="newInstrument" value="Pi${payment.paymentInstrument}" />
                    <if condition="paymentOld.paymentInstrumentEnumId != newInstrument">
                        <!-- credit card removed -->
                        <if condition="paymentOld.paymentInstrumentEnumId == 'PiCreditCard'">
                            <set field="paymentOld.paymentMethodId" from="null" />
                            <set field="paymentOld.paymentGatewayConfigId" from="null" />
                        </if>
                        <!-- credit card added -->
                        <if condition="payment.paymentInstrument == 'CreditCard'">
                            <if condition="payment.sales">
                                <then>
                                    <set field="paymentOld.paymentMethodId"
                                        from="payment.otherCompany.paymentMethod.ccPaymentMethodId" />
                                    <set field="paymentOld.paymentGatewayConfigId"
                                        from="System.getProperty('paymentGatewayConfigId')" />
                                </then>
                                <else>
                                    <entity-find entity-name="mantle.account.method.PaymentMethod"
                                        limit="1"
                                        list="pms">
                                        <econdition field-name="ownerPartyId" from="companyPartyId" />
                                        <econdition field-name="paymentMethodTypeEnumId"
                                            value="PmtCreditCard" />
                                    </entity-find>
                                    <if condition="pms">
                                        <set field="paymentOld.paymentMethodId"
                                            from="pms[0].paymentMethodId" />
                                        <set field="paymentOld.paymentGatewayConfigId"
                                            from="System.getProperty('paymentGatewayConfigId')" />
                                    </if>
                                </else>
                            </if>
                        </if>
                        <set field="paymentOld.paymentInstrumentEnumId"
                            value="Pi${payment.paymentInstrument}" />
                    </if>
                    <!-- override gl account -->
                    <if condition="payment.items[0].glAccount?.glAccountId">
                        <set field="paymentOld.overrideGlAccountId"
                            from="payment.items[0].glAccount?.glAccountId" />
                    </if>
                    <!-- pseudoId-->
                    <set field="paymentOld.pseudoId" from="payment.pseudoId" />
                    <!-- finally update -->
                    <entity-update value-field="paymentOld" />
                </else>
            </if>
            <!-- status updates -->
            <!--entity-find
            entity-name="mantle.order.OrderItemBilling" limit="1" list="invoices">
                <econdition field-name="orderId" from="payment.orderId" />
            </entity-find>
            <if condition="invoices">
                <then>
                    <service-call name="mantle.account.PaymentServices.send#PromisedPayment"
                        in-map="[invoiceId: invoices[0].invoiceId,
                                    paymentId: payment.paymentId]" />
                </then>
                <else>
                    <if condition="paymentOld.paymentGatewayConfigId">
                        <if condition="payment.statusId == 'PmntAuthorized'">
                            <service-call
                                name="mantle.account.PaymentServices.authorize#SinglePayment"
                                in-map="[paymentId: payment.paymentId,
                            paymentGatewayConfigId: paymentOld.paymentGatewayConfigId]"
                                out-map="context" />
                            <if condition="paymentGatewayResponse?.resultSuccess != 'Y'">
                                <return error="true"
                                    message="payment authorize failed: ${paymentGatewayResponse.reasonMessage}" />
                            </if>
                        </if>
                        <if condition="payment.statusId == 'PmntDelivered'">
                            <service-call
                                name="mantle.account.PaymentServices.capture#SinglePayment"
                                in-map="[paymentId: payment.paymentId]" out-map="context" />
                            <if condition="paymentGatewayResponse?.resultSuccess != 'Y'">
                                <return error="true"
                                    message="payment capture failed: ${paymentGatewayResponse.reasonMessage}" />
                            </if>
                        </if>
                    </if>
                    <service-call name="update#mantle.account.payment.Payment"
                        in-map="[paymentId: payment.paymentId,
                        statusId: payment.statusId]" />
                </else>
            </if-->
            <!--entity-find
            entity-name="mantle.ledger.transaction.AcctgTransAndEntry" list="entries">
                <econdition field-name="paymentId" from="paymentOld.paymentId" />
            </entity-find>
            <if condition="entries">
                <iterate list="entries" entry="entry">
                    <if condition="entry.glAccountId == null">
                        <service-call name="update#mantle.ledger.transaction.AcctgTransEntry"
                            in-map="[acctgTransId: entry.acctgTransId,
                            acctgTransEntrySeqId: entry.acctgTransEntrySeqId,
                            glAccountId: paymentOld.itemTypeGlAccountId]" />
                    </if>
                </iterate>
                <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans"
                    in-map="[acctgTransId: entries[0].acctgTransId]" />
                <service-call name="update#mantle.account.payment.Payment"
                    in-map="[paymentId: paymentOld.paymentId, statusId: 'PmntConfirmed']" />
            </if-->
            <!-- check if related transaction has pseudoId -->
            <!--entity-find
            entity-name="mantle.ledger.transaction.AcctgTrans" list="transactions"
                for-update="true">
                <econdition field-name="paymentId" from="paymentOld.paymentId" />
            </entity-find>
            <if condition="transactions &amp;&amp; !transactions[0].pseudoId">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'transaction']" out-map="context" />
                <set field="transactions[0].pseudoId" from="seqNum" />
                <entity-update value-field="transactions[0]" />
            </if-->
        </actions>
    </service>

    <service verb="update" noun="Shipment">
        <description> Update a shipment  including items except for shipments receive.
        </description>
        <in-parameters>
            <parameter name="finDoc" type="Map" required="true" />
        </in-parameters>
        <actions>
            <if condition="finDoc.statusId == 'ShipInput' || finDoc.statusId == 'ShipScheduled'">
                <!-- in preparation or created stage just create -->
                <service-call name="growerp.100.FinDocServices100.replace#ShipmentItems"
                    in-map="[shipmentId: finDoc.shipmentId, items: finDoc.items]" />
            </if>
            <!-- outgoing shipments -->
            <if condition="finDoc.sales == true &amp;&amp; finDoc.statusId == 'ShipPacked'">
                <entity-find entity-name="mantle.shipment.ShipmentItemSource"
                    list="shipmentItemSourceList">
                    <econdition field-name="shipmentId" from="finDoc.shipmentId" />
                </entity-find>
                <iterate list="shipmentItemSourceList" entry="itemSource">
                    <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource"
                        in-map="[shipmentItemSourceId: itemSource.shipmentItemSourceId,
                                    quantity: itemSource.quantity]" />
                </iterate>
                <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                    <if
                        condition="shipmentItemSource.orderId &amp;&amp; shipmentItemSource.orderItemSeqId">
                        <entity-find-one entity-name="mantle.order.OrderItem"
                            value-field="orderItem">
                            <field-map field-name="orderId" from="shipmentItemSource.orderId" />
                            <field-map field-name="orderItemSeqId"
                                from="shipmentItemSource.orderItemSeqId" />
                        </entity-find-one>
                        <service-call name="mantle.order.OrderServices.checkComplete#OrderPart"
                            in-map="[orderId:orderItem.orderId, orderPartSeqId:orderItem.orderPartSeqId]" />
                    </if>
                </iterate>
            </if>
            <!-- update status-->
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                in-map="[shipmentId: finDoc.shipmentId, statusId: finDoc.statusId]" />
        </actions>
    </service>

    <service verb="replace" noun="ShipmentItems">
        <description>first delete any items(if any) and create new ones.</description>
        <in-parameters>
            <parameter name="shipmentId" required="true" type="String" />
            <parameter name="items" type="List" default="[]" />
        </in-parameters>
        <actions>
            <entity-delete-by-condition entity-name="mantle.shipment.ShipmentItemSource">
                <econdition field-name="shipmentId" />
            </entity-delete-by-condition>
            <entity-delete-by-condition entity-name="mantle.shipment.ShipmentItem">
                <econdition field-name="shipmentId" />
            </entity-delete-by-condition>
            <iterate list="items" entry="item">
                <service-call name="mantle.shipment.ShipmentServices.create#ShipmentItem"
                    in-map="context + [ productId: item.product.productId,
                                        quantity: item.quantity,
                                        ]"
                    out-map="context" />
            </iterate>
        </actions>
    </service>

    <service verb="receive" noun="Shipment">
        <description> Receive an incoming shipment either purchase or return.
                        copied from receive#EntireShipment and then modified"
        </description>
        <in-parameters>
            <parameter name="finDoc" type="Map" required="true">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="shipmentId" />
                <parameter name="items" type="List">
                    <parameter name="item" type="Map">
                        <parameter name="product">
                            <parameter name="productId" />
                        </parameter>
                        <parameter name="quantity" />
                        <parameter name="asset" type="Map">
                            <parameter name="location" type="Map">
                                <parameter name="locationId" />
                                <parameter name="locationName" />
                            </parameter>
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map">
                <parameter name="docType" />
                <parameter name="sales" type="Boolean" />
                <parameter name="orderId" />
                <parameter name="shipmentId" />
                <parameter name="invoiceId" />
                <parameter name="paymentId" />
                <parameter name="transactionId" />
                <parameter name="items" type="List">
                    <parameter name="item" type="Map">
                        <parameter name="product">
                            <parameter name="productId" />
                        </parameter>
                        <parameter name="quantity" />
                        <parameter name="asset" type="Map">
                            <parameter name="location" type="Map">
                                <parameter name="locationId" />
                                <parameter name="locationName" />
                            </parameter>
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp.toString().substring(0,10)" />
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find list="shipmentItemDetailList"
                entity-name="mantle.shipment.ShipmentItemDetail">
                <econdition field-name="shipmentId" from="finDoc.shipmentId" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <!-- product owner -->
                <order-by field-name="productId" />
            </entity-find>
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId" />
            </entity-find>
            <set field="facilityId" from="facilities[0].facilityId" />
            <iterate list="shipmentItemDetailList" entry="sid">
                <set field="quantityRemaining"
                    from="sid.quantity - (sid.quantityAcceptedTotal ?: 0) - (sid.quantityRejectedTotal ?: 0)" />
                <set field="finDocItem"
                    from="finDoc.items.find {element -> element.product.productId == sid.productId}" />
                <if condition="!finDocItem.asset?.location?.locationId">
                    <if condition="!finDocItem.asset">
                        <set field="finDocItem.asset" from="[:]" />
                    </if>
                    <if condition="!finDocItem.asset.location">
                        <set field="finDocItem.asset.location" from="[:]" />
                    </if>
                    <!-- if empty create new location -->
                    <set field="defaultName" value="${sid.pseudoId}(${nowDate})" />
                    <service-call name="growerp.100.InventoryServices100.create#Location"
                        in-map="[location: [locationName: finDocItem.asset?.location?.locationName ?: defaultName]]"
                        out-map="context" />
                    <set field="finDocItem.asset.location.locationId" from="location.locationId" />
                </if>
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'asset']" out-map="context" />
                <service-call name="mantle.shipment.ShipmentServices.receive#ShipmentProduct"
                    in-map="[shipmentId:finDoc.shipmentId, productId:sid.productId, statusId:'AstAvailable',
                            quantityAccepted:quantityRemaining, facilityId: facilityId,
                            ownerPartyId: companyPartyId, assetPseudoId: seqNum,
                            locationSeqId: finDocItem.asset.location.locationId]"
                    out-map="context" />
            </iterate>
            <service-call out-map="context" in-map="[shipmentId:finDoc.shipmentId]"
                name="mantle.shipment.ShipmentServices.deliver#Shipment" />
            <!-- check if related transaction has pseudoId -->
            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="transactions"
                for-update="true">
                <econdition field-name="shipmentId" from="finDoc.shipmentId" />
            </entity-find>
            <if condition="transactions &amp;&amp; !transactions[0].pseudoId">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'transaction']" out-map="context" />
                <set field="transactions[0].pseudoId" from="seqNum" />
                <entity-update value-field="transactions[0]" />
            </if>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc"
                in-map="[finDocId: finDoc.shipmentId, docType: 'shipment',
                                sales: finDoc.sales]"
                out-map="context" />
            <set field="finDoc" from="finDocs[0]" />
        </actions>
    </service>
</services>
 