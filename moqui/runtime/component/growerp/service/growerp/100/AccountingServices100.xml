<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="init" noun="PartyAccountingConfiguration">
        <!-- partly copied from mantle-usl/service/mantle/ledger/LedgerServices.xml -->
        <in-parameters>
            <parameter name="sourcePartyId" required="true" />
            <parameter name="organizationPartyId" required="true" />
            <auto-parameters entity-name="mantle.ledger.config.PartyAcctgPreference" include="nonpk" />
            <parameter name="startYear" format="0000">
                <description>If specified creates fiscal time periods (year, quarter, month) starting that
                year and through the following year, otherwise starts now and creates current and next year, quarter, and month</description>
            </parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                value-field="existingPartyAcctgPreference">
                <field-map field-name="organizationPartyId" />
            </entity-find-one>
            <if condition="existingPartyAcctgPreference">
                <return
                    message="Party [${organizationPartyId}] already has a PartyAcctgPreference record, so not initializing accounting configuration." />
            </if>

            <!-- create an error Journal mantle.ledger.transaction.GlJournal -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="organization">
                <field-map field-name="partyId" from="organizationPartyId" />
            </entity-find-one>
            <set field="errorGlJournalId" value="${organizationPartyId}Error" />
            <service-call name="create#mantle.ledger.transaction.GlJournal"
                in-map="[organizationPartyId:organizationPartyId, glJournalId:errorGlJournalId,
                        glJournalTypeEnumId:'GLJRNL_ERROR', isPosted:'N',
                        glJournalName:('Error Journal for ' + (organization?.organizationName ?: organizationPartyId))]" />

            <!-- copy the mantle.ledger.config.PartyAcctgPreference -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                value-field="sourcePartyAcctgPreference">
                <field-map field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find-one>
            <if condition="!sourcePartyAcctgPreference">
                <return error="true"
                    message="Could not find PartyAcctgPreference for source party [${sourcePartyId}]" />
            </if>
            <set field="partyAcctgPreference" from="sourcePartyAcctgPreference.cloneValue()" />
            <entity-set value-field="partyAcctgPreference" include="nonpk" set-if-empty="false" />
            <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                in-map="partyAcctgPreference + [organizationPartyId:organizationPartyId, errorGlJournalId:errorGlJournalId]" />

            <!-- create new ledger from default settings -->
            <entity-find entity-name="mantle.ledger.account.GlAccountAndOrganization"
                list="glAccounts">
                <econdition field-name="partyId" from="sourcePartyId" />
                <order-by field-name="glAccountId" />
            </entity-find>
            <set field="translate" from="[:]" />
            <iterate list="glAccounts" entry="glAccountOrg">
                <entity-find-one entity-name="mantle.ledger.account.GlAccount"
                    value-field="glAccount">
                    <field-map field-name="glAccountId" from="glAccountOrg.glAccountId" />
                </entity-find-one>
                <service-call name="create#mantle.ledger.account.GlAccount"
                    in-map="glAccount + [glAccountId: null,
                        accountCode: glAccountOrg.glAccountId,
                        parentGlAccountId: translate[glAccount.parentGlAccountId]]"
                    out-map="result" />
                <set field="translate[glAccount.glAccountId]" from="result.glAccountId" />
                <service-call name="create#mantle.ledger.account.GlAccountOrganization"
                    in-map="[glAccountId: result.glAccountId, organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- glAccount type default -->
            <entity-find entity-name="mantle.ledger.config.GlAccountTypeDefault" list="typeDefaults">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="typeDefaults" entry="typeDefault">
                <service-call name="create#mantle.ledger.config.GlAccountTypeDefault"
                    in-map="typeDefault + [glAccountId: translate[typeDefault.glAccountId],
                            organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- Invoice type -->
            <entity-find entity-name="mantle.ledger.config.InvoiceTypeTransType" list="invoiceTypes">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="invoiceTypes" entry="invoiceType">
                <service-call name="create#mantle.ledger.config.InvoiceTypeTransType"
                    in-map="invoiceType + [glAccountId: translate[invoiceType.glAccountId],
                            organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- Item type -->
            <entity-find entity-name="mantle.ledger.config.ItemTypeGlAccount" list="itemTypes">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="itemTypes" entry="itemType">
                <service-call name="create#mantle.ledger.config.ItemTypeGlAccount"
                    in-map="itemType + [glAccountId: translate[itemType.glAccountId],
                            organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- payment type -->
            <entity-find entity-name="mantle.ledger.config.PaymentTypeGlAccount" list="paymentTypes">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="paymentTypes" entry="paymentType">
                <service-call name="create#mantle.ledger.config.PaymentTypeGlAccount"
                    in-map="paymentType + [glAccountId: translate[paymentType.glAccountId],
                            organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- financial account -->
            <entity-find entity-name="mantle.ledger.config.FinancialAccountTypeGlAccount"
                list="finAccounts">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="finAccounts" entry="finAccount">
                <service-call name="create#mantle.ledger.config.FinancialAccountTypeGlAccount"
                    in-map="finAccount + [glAccountId: translate[finAccount.glAccountId],
                            organizationPartyId: organizationPartyId]" />
            </iterate>
            <!-- Asset type -->
            <entity-find entity-name="mantle.ledger.config.AssetTypeGlAccount" list="assetTypes">
                <econdition field-name="organizationPartyId" from="sourcePartyId" />
            </entity-find>
            <iterate list="assetTypes" entry="assetType">
                <service-call name="create#mantle.ledger.config.AssetTypeGlAccount"
                    in-map="assetType + [
                                assetTypeGlAccountId: null,
                                assetGlAccountId: translate[assetType.assetGlAccountId],
                                receiptGlAccountId: translate[assetType.receiptGlAccountId],
                                issuanceGlAccountId: translate[assetType.issuanceGlAccountId],
                                transferGlAccountId: translate[assetType.transferGlAccountId],
                                accDepreciationGlAccountId: translate[assetType.accDepreciationGlAccountId],
                                depreciationGlAccountId: translate[assetType.depreciationGlAccountId],
                                profitGlAccountId: translate[assetType.profitGlAccountId],
                                lossGlAccountId: translate[assetType.lossGlAccountId],
                                shrinkageGlAccountId: translate[assetType.shrinkageGlAccountId],
                                foundGlAccountId: translate[assetType.foundGlAccountId],
                                organizationPartyId: organizationPartyId]" />
            </iterate>

            <!-- setup mantle.party.time.TimePeriod for FiscalMonth, FiscalQuarter, FiscalYear -->
            <if condition="startYear">
                <then>
                    <set field="nextYearInt"
                        from="((Calendar) ec.user.nowCalendar).get(Calendar.YEAR) + 1" />
                    <set field="lastYear" from="ec.l10n.format(nextYearInt, '0000')" />

                    <set field="curYear" from="startYear" />
                    <set field="prevPeriodId" from="null" />
                    <while condition="curYear &lt;= lastYear">
                        <set field="fromDate"
                            from="ec.l10n.parseDate(curYear + '-01-01', 'yyyy-MM-dd')" />
                        <service-call name="mantle.party.TimeServices.getOrCreate#TimePeriod"
                            out-map="curYearOut"
                            in-map="[partyId:organizationPartyId, timePeriodTypeId:'FiscalYear', fromDate:fromDate, previousPeriodId:prevPeriodId]" />
                        <service-call name="mantle.party.TimeServices.get#DescendantPeriods"
                            out-map="quartersOut"
                            in-map="[parentPeriodId:curYearOut.timePeriodId, timePeriodTypeId:'FiscalQuarter', createMissing:true]" />
                        <iterate list="quartersOut.timePeriodList" entry="quarterPeriod">
                            <service-call name="mantle.party.TimeServices.get#DescendantPeriods"
                                out-map="quartersOut"
                                in-map="[parentPeriodId:quarterPeriod.timePeriodId, timePeriodTypeId:'FiscalMonth', createMissing:true]" />
                        </iterate>

                        <set field="prevPeriodId" from="curYearOut.timePeriodId" />
                        <set field="curYear" from="((curYear as int) + 1) as String" />
                    </while>
                </then>
                <else>
                    <service-call name="mantle.ledger.LedgerServices.check#NextFiscalTimePeriods"
                        in-map="[organizationPartyId:organizationPartyId]" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="get" noun="TimePeriod">
        <description>Get the accounting periods valid for this company</description>
        <out-parameters>
            <parameter name="timePeriods" type="List">
                <parameter name="timePeriod" type="Map">
                    <parameter name="periodId" />
                    <parameter name="periodName" />
                    <parameter name="fromDate" />
                    <parameter name="thruDate" />
                    <parameter name="isClosed" type="Boolean" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="growerp.party.time.TimePeriodChildAndType" list="periods">
                <econdition field-name="partyId" from="companyPartyId" />
                <econdition field-name="timePeriodTypeId" value="FiscalYear" />
                <order-by field-name="periodName" />
            </entity-find>
            <set field="timePeriods" from="[]" />
            <iterate list="periods" entry="p">
                <script>
                    timePeriods.add([periodId: p.timePeriodId,
                                    periodName: p.periodName,
                                    periodType: p.description,
                                    fromDate: p.fromDate.toString(),
                                    thruDate: p.thruDate.toString(),
                                    isClosed: p.isClosed == 'Y' ? true : false,
                                    hasPreviousPeriod: p.previousPeriodId != null ? true : false,
                                    hasNextPeriod: p.nextPeriodId != null ? true : false,
                                    ]); 
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="TimePeriod">
        <description>add, update and delete timeperiods</description>
        <in-parameters>
            <parameter name="createNext" type="Boolean" />
            <parameter name="createPrevious" type="Boolean" />
            <parameter name="delete" type="Boolean" />
            <parameter name="timePeriodId" />
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriods" type="List">
                <parameter name="timePeriod" type="Map">
                    <parameter name="periodId" />
                    <parameter name="periodName" />
                    <parameter name="fromDate" />
                    <parameter name="thruDate" />
                    <parameter name="isClosed" type="Boolean" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="createNext || createPrevious || delete">
                <if condition="!timePeriodId">
                    <return error="true"
                        message="Current periodId required when create previous or next provided" />
                    <else>
                        <!-- check if period is owned by the current company-->
                        <entity-find-one entity-name="mantle.party.time.TimePeriod"
                            value-field="timePeriod">
                            <field-map field-name="partyId" from="companyPartyId" />
                            <field-map field-name="timePeriodId" from="timePeriodId" />
                        </entity-find-one>
                        <if condition="!timePeriod">
                            <return error="true"
                                message="TimePeriodId: $periodId not found for company party id: $companyPartyId" />
                        </if>
                        <if condition="createPrevious">
                            <service-call name="mantle.party.TimeServices.create#TimePeriod"
                                in-map="[nextPeriodId: timePeriod.timePeriodId]" />
                        </if>
                        <if condition="createNext">
                            <service-call name="mantle.party.TimeServices.create#TimePeriod"
                                in-map="[previousPeriodId: timePeriod.timePeriodId]" />
                        </if>
                        <if condition="delete">
                            <service-call name="mantle.party.TimeServices.delete#TimePeriod"
                                in-map="[timePeriodId: timePeriodId]" />
                        </if>
                    </else>
                </if>
            </if>
            <service-call name="growerp.100.AccountingServices100.get#TimePeriod"
                out-map="context" />
        </actions>
    </service>

    <service verb="get" noun="BalanceSummary">
        <in-parameters>
            <parameter name="periodName" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ledgerReport" type="Map">
                <parameter name="company" type="Map">
                    <parameter name="companyId" />
                    <parameter name="companyName" />
                </parameter>
                <parameter name="title" />
                <parameter name="printDate" />
                <parameter name="timePeriod" type="Map">
                    <parameter name="periodId" />
                    <parameter name="periodName" />
                    <parameter name="fromDate" />
                    <parameter name="thruDate" />
                    <parameter name="isClosed" type="Boolean" />
                </parameter>
                <parameter name="glAccounts" type="List">
                    <parameter name="accountCode" />
                    <parameter name="accountName" />
                    <parameter name="level" />
                    <parameter name="beginningBalance" />
                    <parameter name="postedDebits" />
                    <parameter name="postedCredits" />
                    <parameter name="postedBalance" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find entity-name="mantle.party.time.TimePeriod" list="periods">
                <econdition field-name="partyId" from="companyPartyId" />
                <econdition field-name="periodName" from="periodName" />
            </entity-find>
            <if condition="!periods">
                <return error="true" message="Period $periodName not found!" />
            </if>
            <entity-find entity-name="mantle.ledger.report.GlAccountOrgTimePeriodDetail"
                list="postedBalanceSummary" limit="150">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
                <econdition field-name="periodName" from="periodName" />
                <econditions combine="or">
                    <econdition field-name="beginningBalance" operator="not-equals"
                        from="BigDecimal.ZERO" />
                    <econdition field-name="endingBalance" operator="not-equals"
                        from="BigDecimal.ZERO" />
                    <econdition field-name="postedDebits" operator="not-equals"
                        from="BigDecimal.ZERO" />
                    <econdition field-name="postedCredits" operator="not-equals"
                        from="BigDecimal.ZERO" />
                </econditions>
                <select-field
                    field-name="accountCode,accountName,beginningBalance,postedDebits,postedCredits,endingBalance" />
                <order-by field-name="accountCode" />
            </entity-find>
            <entity-find-one entity-name="mantle.party.Organization" value-field="company">
                <field-map field-name="partyId" from="companyPartyId" />
            </entity-find-one>
            <set field="ledgerReport"
                from="[
                period: [periodId: periods[0].timePeriodId,
                                    periodName: periods[0].periodName,
                                    fromDate: periods[0].fromDate.toString(),
                                    thruDate: periods[0].thruDate.toString(),
                                    isClosed: periods[0].isClosed == 'Y' ? true : false,
                                    ], company: [companyPartyId: companyPartyId,
                companyName: company.organizationName],
                title: 'Balance Summary report',
                printDate: ec.user.nowTimestamp.toString(),glAccounts: []]" />
            <set field="glAccountCodeMask"
                from="partyAcctgPreference?.glAccountCodeMask ?: ec.user.getPreference('GlAccountCodeMask')" />
            <set field="accountCodeFormatter" from="masker(glAccountCodeMask, '0')" />
            <script>
                //change values into strings
                for (el in postedBalanceSummary) {
                    def temp = [beginningBalance: el.beginningBalance?.toString(),
                                postedBalance: el.endingBalance?.toString(),
                                postedCredits: el.postedCredits?.toString(),
                                postedDebits: el.postedDebits?.toString(),
                                accountCode: accountCodeFormatter != null ? accountCodeFormatter.valueToString(el.accountCode) : el.accountCode,
                                accountName: el.accountName,
                                ];
                    ledgerReport.glAccounts.add(temp);
                }
            </script>
        </actions>
    </service>

    <service verb="recalculate" noun="GlAccountOrgSummaries">
        <in-parameters>
            <parameter name="companyPartyId" />
        </in-parameters>
        <actions>
            <if condition="!companyPartyId">
                <service-call out-map="relComp"
                    name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
                <set field="companyPartyId" from="relComp.companyPartyId" />
            </if>
            <service-call in-map="organizationPartyId: companyPartyId" async="true"
                name="mantle.ledger.LedgerServices.recalculate#GlAccountOrgSummaries" />
        </actions>
    </service>

    <service verb="get" noun="BalanceSheet">
        <in-parameters>
            <parameter name="periodName" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="ledgerReport" type="Map">
                <parameter name="company" type="Map">
                    <parameter name="companyId" />
                    <parameter name="companyName" />
                </parameter>
                <parameter name="title" />
                <parameter name="printDate" />
                <parameter name="timePeriod" type="Map">
                    <parameter name="periodId" />
                    <parameter name="periodName" />
                    <parameter name="fromDate" />
                    <parameter name="thruDate" />
                    <parameter name="isClosed" type="Boolean" />
                </parameter>
                <parameter name="glAccounts" type="List">
                    <parameter name="glAccount" type="Map">
                        <parameter name="accountCode" />
                        <parameter name="accountName" />
                        <parameter name="level" />
                        <parameter name="beginningBalance" />
                        <parameter name="postedDebits" />
                        <parameter name="postedCredits" />
                        <parameter name="postedBalance" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call in-map="organizationPartyId: companyPartyId"
                name="mantle.ledger.LedgerServices.recalculate#GlAccountOrgSummaries" />
            <entity-find entity-name="mantle.party.time.TimePeriod" list="periods">
                <econdition field-name="partyId" from="companyPartyId" />
                <econdition field-name="periodName" from="periodName" />
            </entity-find>
            <if condition="!periods">
                <return error="true" message="Balance sheet, period: $periodId not found" />
            </if>
            <service-call
                name="mantle.ledger.LedgerReportServices.run#BalanceSheet"
                in-map="[organizationPartyId: companyPartyId, 
                                    timePeriodIdList: [periods[0].timePeriodId]]"
                out-map="context" />
            <set field="glAccountCodeMask"
                from="partyAcctgPreference?.glAccountCodeMask ?: ec.user.getPreference('GlAccountCodeMask')" />
            <set field="accountCodeFormatter" from="masker(glAccountCodeMask, '0')" />
            <!--log
            message="====run balance sheet out: ${classInfoById}"/-->
            <script>
                def currencyFormat = currencyFormat ?: "#,##0.00";

                def showClass(Map classInfo, int depth) {
                    // if (!classInfo.totalBalanceByTimePeriod.ALL &amp;&amp; !classInfo.totalPostedByTimePeriod.ALL) return null;
                    //ec.logger.info("==$depth-1==${classInfo.glAccountClassEnumId}/${classInfo.className} =======${classInfo.totalBalanceByTimePeriod.ALL}")
                    def classInfoData = [level: depth, children: []];
                    classInfo.each { classInfoEl -&gt;
                        switch(classInfoEl.key) {
                            case 'className':
                                classInfoData.accountName = ec.l10n.localize(classInfoEl.value);
                                break;
                            case 'glAccountClassEnumId':
                                classInfoData.accountCode = classInfoEl.value
                                break;
                            case 'totalBalanceByTimePeriod':
                                if (!classInfoEl.value) return;
                                classInfoData.postedBalance = classInfoEl.value.ALL.toString();
                                break;
                            case 'glAccountDetailList':
                                classInfoEl.value.each {
                                    if (it.endingBalance.compareTo(BigDecimal.ZERO) != 0) { // not equal 0
                                        // ec.logger.info("==dept: $depth-2==${it.accountCode}/${it.accountName} ${it.endingBalance}");
                                        def newGl = [
                                                level: depth+1,
                                                accountCode: accountCodeFormatter != null ? accountCodeFormatter.valueToString(it.accountCode) : it.accountCode,
                                                accountName: ec.l10n.localize(it.accountName),
                                                postedBalance: it.endingBalance.toString(),
                                        ];
                                        classInfoData.children.add(newGl);
                                    }
                                }
                                break;
                            case 'childClassInfoList':
                                classInfoEl.value.each {
                                    def result = showClass(it, depth + 1);
                                    if (result) {
                                        classInfoData.children.add(result);
                                    }
                                };
                                break;
                        }
                    }
                    return classInfoData;
                }
                if(classInfoById.ASSET) asset = showClass(classInfoById.ASSET, 1);
                if(classInfoById.LIABILITY) liability = showClass(classInfoById.LIABILITY, 1);
                if(classInfoById.EQUITY) equity = showClass(classInfoById.EQUITY, 1);
                if(classInfoById.DISTRIBUTION) distribution = showClass(classInfoById.DISTRIBUTION, 1);
                def incomeAmount = [accountCode: 'INCOME', postedBalance: netIncomeOut.totalBalance.ALL.toString()];
            </script>
            <set field="ledgerReport"
                from="[
                period: [periodId: periods[0].timePeriodId,
                                    periodName: periods[0].periodName,
                                    fromDate: periods[0].fromDate.toString(),
                                    thruDate: periods[0].thruDate.toString(),
                                    isClosed: periods[0].isClosed == 'Y' ? true : false,
                                    ],
                title: 'Balance Sheet', printDate: ec.user.nowTimestamp.toString(),
                glAccounts: [asset?:[:], liability?:[:], equity?:[:], distribution?:[:], incomeAmount.totalBalance?.ALL?incomeAmount:[:]]]" />
        </actions>
    </service>

    <service verb="get" noun="Ledger">
        <out-parameters>
            <parameter name="ledgerReport" type="Map">
                <parameter name="company" type="Map">
                    <parameter name="companyId" />
                    <parameter name="companyName" />
                </parameter>
                <parameter name="title" />
                <parameter name="printDate" />
                <parameter name="glAccounts" type="List">
                    <parameter name="glAccount" type="Map">
                        <parameter name="glAccountId" />
                        <parameter name="accountCode" />
                        <parameter name="accountName" />
                        <parameter name="level" />
                        <parameter name="beginningBalance" />
                        <parameter name="postedDebits" />
                        <parameter name="postedCredits" />
                        <parameter name="postedBalance" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!--service-call
            in-map="organizationPartyId: companyPartyId"
                name="mantle.ledger.LedgerServices.recalculate#GlAccountOrgSummaries"/-->
            <entity-find list="dbGlAccounts"
                entity-name="mantle.ledger.account.GlAccountAndOrganization">
                <econdition field-name="partyId" from="companyPartyId" />
                <order-by field-name="accountCode" />
            </entity-find>
            <entity-find-one entity-name="mantle.party.Organization" value-field="company">
                <field-map field-name="partyId" from="companyPartyId" />
            </entity-find-one>
            <set field="ledgerReport"
                from="[
                company: [companyPartyId: companyPartyId,
                companyName: company.organizationName],
                title: 'Current Ledger Tree report',
                printDate: ec.user.nowTimestamp.toString(),
                glAccounts: []]" />
            <set field="glAccountCodeMask"
                from="partyAcctgPreference?.glAccountCodeMask ?: ec.user.getPreference('GlAccountCodeMask')" />
            <set field="accountCodeFormatter" from="masker(glAccountCodeMask, '0')" />
            <script>
                def getGlAccountTree(Map dbGlAccount, int dept) {
                    def glAccount = [:];
                    glAccount.level = dept;
                    // glAccount.accountCode = accountCodeFormatter != null ? accountCodeFormatter.valueToString(dbGlAccount.accountCode) : dbGlAccount.accountCode;
                    glAccount.isDebit = dbGlAccount.isDebit == 'Y' ? true : false;
                    glAccount.accountName = ec.l10n.localize(dbGlAccount.accountName);
                    glAccount.postedBalance = dbGlAccount.postedBalance ? dbGlAccount.postedBalance.toString() : '0';
                    glAccount.rollUp = dbGlAccount.postedBalance ? dbGlAccount.postedBalance.toString() : '0';
                    glAccount.classId = dbGlAccount.glAccountClassEnumId;
                    glAccount.glAccountId = dbGlAccount.glAccountId;
                    glAccount.accountCode = dbGlAccount.accountCode;
                    def dependents = dbGlAccounts.findAll { 
                        dbGlAccount.glAccountId == it.parentGlAccountId
                    }
                    glAccount.children = [];
                    dependents.each {
                        def glAccountSave = getGlAccountTree(it, dept + 1)
                        def rollUp = new BigDecimal(glAccount.rollUp ?: '0').add(new BigDecimal(glAccountSave.rollUp ?: '0'))
                        glAccount.rollUp = rollUp? rollUp.toString() : '0';
                        glAccount.children.add(glAccountSave)
                    }
                    return glAccount;
                }

                def rootAccounts = dbGlAccounts.findAll {
                    it.parentGlAccountId == null }
                rootAccounts.each {
                    ledgerReport.glAccounts.add(getGlAccountTree(it, 1));
                }
            </script>
        </actions>
    </service>

    <service verb="get" noun="ItemType">
        <description>itemtypes for orderItem and invoiceItem either sales or purchase</description>
        <in-parameters>
            <parameter name="sales" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="itemTypes" type="List">
                <parameter name="itemType" type="Map">
                    <parameter name="itemTypeId" />
                    <parameter name="itemTypeName" />
                    <parameter name="accountCode" />
                    <parameter name="accountName" />
                    <parameter name="direction" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="sales != null">
                <set field="direction" from="sales == true? 'O' : 'I'" />
            </if>
            <entity-find entity-name="moqui.basic.EnumerationAndType" list="enumItemTypes">
                <econdition field-name="enumTypeId" value="ItemType" />
                <order-by field-name="description" />
            </entity-find>
            <entity-find entity-name="mantle.ledger.config.ItemTypeAndGlAccount" list="itemTypeList">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
                <econdition field-name="direction" from="direction" ignore-if-empty="true" />
                <order-by field-name="[itemTypeDescription,accountCode]" />
            </entity-find>
            <set field="itemTypes" from="[]" />
            <iterate list="['I','O']" entry="inOut">
                <iterate list="enumItemTypes" entry="itemType">
                    <script>
                        var newItemType = itemTypeList.find{
                            item -&gt; item.itemTypeEnumId == itemType.enumId
                                &amp;&amp; item.direction == inOut
                            }
                    </script>
                    <if
                        condition="(sales != null &amp;&amp; newItemType != null) || sales == null">
                        <set field="itemTypeOut"
                            from="[itemTypeId: itemType.enumId,
                            itemTypeName: itemType.description,
                            accountCode: newItemType?.accountCode,
                            accountName: newItemType?.accountName,
                            direction: inOut,
                        ]" />
                        <script>itemTypes.add(itemTypeOut)</script>
                    </if>
                </iterate>
                <script>itemTypes.sort{it.itemTypeName + it.direction}</script>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="ItemType">
        <description>itemtypes for orderItem and invoiceItem either sales or purchase</description>
        <in-parameters>
            <parameter name="itemType" type="Map">
                <parameter name="itemTypeId" />
                <parameter name="itemTypeName" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="direction" />
            </parameter>
            <parameter name="update" type="Boolean" />
            <parameter name="delete" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="itemType" type="Map">
                <parameter name="itemTypeId" />
                <parameter name="itemTypeName" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="direction" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if
                condition="itemType.itemTypeId &amp;&amp; itemType.direction &amp;&amp; itemType.accountCode">
                <entity-find-one entity-name="mantle.ledger.config.ItemTypeGlAccount"
                    value-field="itemTypeGlAccount" for-update="true">
                    <field-map field-name="itemTypeEnumId" from="itemType.itemTypeId" />
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                    <field-map field-name="direction" from="itemType.direction" />
                </entity-find-one>
                <if condition="!itemTypeGlAccount &amp;&amp; delete">
                    <return error="true"
                        message="Could not find itemTypeId/company/direction ${itemType.itemTypeId}/${companyPartyId}/${itemType.direction}" />
                </if>
                <else>
                    <return error="true"
                        message="one of fields itemTypeId/company/direction/accountcode ${itemType.itemTypeId}/${companyPartyId}/${itemType.direction}/${itemType.accountCode} is missing" />
                </else>
            </if>
            <if condition="update">
                <entity-find entity-name="mantle.ledger.account.GlAccountAndOrganization"
                    list="accounts">
                    <econdition field-name="organizationPartyId" from="companyPartyId" />
                    <econdition field-name="accountCode" from="itemType.accountCode" />
                </entity-find>
                <if condition="itemTypeGlAccount">
                    <!-- update -->
                    <set field="itemTypeGlAccount.glAccountId" from="accounts[0].glAccountId" />
                    <entity-update value-field="itemTypeGlAccount" />
                    <else>
                        <!-- add -->
                        <service-call name="create#mantle.ledger.config.ItemTypeGlAccount"
                            in-map="[itemTypeEnumId: itemType.itemTypeId,
                                    organizationPartyId: companyPartyId,
                                    direction: itemType.direction,
                                    glAccountId: accounts[0].glAccountId]" />
                    </else>
                </if>
                <set field="itemType.accountName" from="accounts[0].accountName" />
            </if>
            <if condition="delete">
                <entity-delete value-field="itemTypeGlAccount" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="PaymentType">
        <description>payment types for payment</description>
        <in-parameters>
            <parameter name="sales" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="paymentTypes" type="List">
                <parameter name="paymentType" type="Map">
                    <parameter name="paymentTypeId" />
                    <parameter name="paymentTypeName" />
                    <parameter name="accountCode" />
                    <parameter name="accountName" />
                    <parameter name="isPayable" type="Boolean" />
                    <parameter name="isApplied" type="Boolean" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="paymentTypes" from="[]" />
            <entity-find entity-name="moqui.basic.EnumerationAndType" list="enumPaymentTypes">
                <econdition field-name="enumTypeId" value="PaymentType" />
            </entity-find>
            <if condition="sales != null">
                <set field="isPayable" from="sales == true ? 'N' : 'Y'" />
            </if>
            <entity-find entity-name="mantle.ledger.config.PaymentTypeAndGlAccount"
                list="paymentTypeList">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
                <econdition field-name="isPayable" from="isPayable" ignore-if-empty="true" />
                <order-by field-name="accountCode,typeDescription" />
            </entity-find>
            <iterate list="[true, false]" entry="payable">
                <set field="isPayable" from="payable" type="Boolean" />
                <iterate list="[true, false]" entry="applied">
                    <set field="isApplied" from="applied" type="Boolean" />
                    <iterate list="enumPaymentTypes" entry="paymentType">
                        <script>
                            var newPaymentType = paymentTypeList.find{
                                item -&gt; item.paymentTypeEnumId == paymentType.enumId
                                &amp;&amp; item.isPayable == (isPayable ? 'Y' : 'N')
                                &amp;&amp; item.isApplied == (isApplied ? 'Y' : 'N')
                            }
                        </script>
                        <if
                            condition="(sales != null &amp;&amp; newPaymentType != null) || sales == null">
                            <set field="paymentTypeOut"
                                from="[paymentTypeId: paymentType.enumId,
                                paymentTypeName: paymentType.description,
                                isApplied: applied,
                                isPayable: payable,
                                accountCode: newPaymentType?.accountCode,
                                accountName: newPaymentType?.accountName,
                                ]" />
                            <script>paymentTypes.add(paymentTypeOut)</script>
                        </if>
                    </iterate>
                </iterate>
            </iterate>
            <script>paymentTypes.sort{it.paymentTypeName + it.isPayable + it.isApplied}</script>
        </actions>
    </service>

    <service verb="update" noun="PaymentType">
        <description>itemtypes for orderItem and invoiceItem either sales or purchase</description>
        <in-parameters>
            <parameter name="paymentType" type="Map">
                <parameter name="paymentTypeId" />
                <parameter name="paymentTypeName" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="isPayable" type="Boolean" />
                <parameter name="isApplied" type="Boolean" />
            </parameter>
            <parameter name="update" type="Boolean" />
            <parameter name="delete" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="paymentType" type="Map">
                <parameter name="paymentTypeId" />
                <parameter name="paymentTypeName" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="isPayable" type="Boolean" />
                <parameter name="isApplied" type="Boolean" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if
                condition="paymentType.paymentTypeId != null &amp;&amp; paymentType.isPayable != null &amp;&amp; paymentType.isApplied != null &amp;&amp; paymentType.accountCode != null">
                <entity-find-one entity-name="mantle.ledger.config.PaymentTypeGlAccount"
                    value-field="paymentTypeGlAccount" for-update="true">
                    <field-map field-name="paymentTypeEnumId" from="paymentType.paymentTypeId" />
                    <field-map field-name="organizationPartyId" from="companyPartyId" />
                    <field-map field-name="isPayable"
                        from="paymentType.isPayable == true ? 'Y' : 'N'" />
                    <field-map field-name="isApplied"
                        from="paymentType.isApplied == true ? 'Y' : 'N'" />
                </entity-find-one>
                <if condition="!paymentTypeGlAccount &amp;&amp; delete">
                    <return error="true"
                        message="Could not find paymentTypeId/company/direction ${paymentType.paymentTypeId}/${companyPartyId}/${paymentType.direction}" />
                </if>
                <else>
                    <return error="true"
                        message="one of paymentTypeId/isPayable/isApplied/accountcode ${paymentType.paymentTypeId}/${paymentType.isPayable}/${paymentType.isApplied}/${paymentType.accountCode} missing" />
                </else>
            </if>
            <if condition="update">
                <entity-find entity-name="mantle.ledger.account.GlAccountAndOrganization"
                    list="accounts">
                    <econdition field-name="organizationPartyId" from="companyPartyId" />
                    <econdition field-name="accountCode" from="paymentType.accountCode" />
                </entity-find>
                <if condition="paymentTypeGlAccount">
                    <!-- update -->
                    <set field="paymentTypeGlAccount.glAccountId" from="accounts[0].glAccountId" />
                    <entity-update value-field="paymentTypeGlAccount" />
                    <else>
                        <!-- add -->
                        <service-call name="create#mantle.ledger.config.PaymentTypeGlAccount"
                            in-map="[paymentTypeEnumId: paymentType.paymentTypeId,
                                    organizationPartyId: companyPartyId,
                                    isPayable: paymentType.isPayable == true ? 'Y' : 'N',
                                    isApplied: paymentType.isApplied == true ? 'Y' : 'N',
                                    glAccountId: accounts[0].glAccountId]" />
                    </else>
                </if>
                <set field="paymentType.accountName" from="accounts[0].accountName" />
            </if>
            <if condition="delete">
                <entity-delete value-field="paymentTypeGlAccount" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="LedgerJournal">
        <in-parameters>
            <parameter name="journalId" />
            <parameter name="isPosted" type="Boolean" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="10" type="Integer" />
            <parameter name="search" />
        </in-parameters>
        <out-parameters>
            <parameter name="ledgerJournals" type="List">
                <parameter name="journalId" />
                <parameter name="journalName" />
                <parameter name="isError" type="Boolean" />
                <parameter name="postedDate" />
                <parameter name="isPosted" type="Boolean" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="search">
                <set field="search" value="%$search%" />
            </if>
            <entity-find entity-name="mantle.ledger.transaction.GlJournal"
                limit="limit" offset="start" list="ledgerJournalList">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
                <econdition field-name="glJournalId"
                    from="journalId" ignore-if-empty="true" />
                <econdition field-name="isPosted" from="isPosted" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="glJournalName" operator="like" ignore-case="true"
                        from="search" ignore-if-empty="true" />
                    <econdition field-name="glJournalId" operator="like" ignore-case="true"
                        from="search" ignore-if-empty="true" />
                </econditions>
            </entity-find>
            <set field="ledgerJournals" from="[]" />
            <iterate list="ledgerJournalList" entry="journal">
                <script>
                    ledgerJournals.add(
                        journalId: journal.glJournalId,
                        journalName: journal.glJournalName,
                        isError: journal.glJournalTypeEnumId == 'GLJRNL_ERROR'
                            ? true : false,
                        postedDate: journal.postedDate
                            ? ec.l10n.format(journal.postedDate,'yyyy-MM-dd') : null,
                        isPosted: journal.isPosted=='N' ? false : true,
                        )
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="LedgerJournal">
        <in-parameters>
            <parameter name="ledgerJournal" type="Map">
                <parameter name="journalName" required="true" />
                <parameter name="isError" type="Boolean" default="false" />
                <parameter name="postedDate" />
                <parameter name="isPosted" type="Boolean" default="false" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="ledgerJournal" type="Map">
                <parameter name="journalId" />
                <parameter name="journalName" />
                <parameter name="isError" type="Boolean" />
                <parameter name="postedDate" />
                <parameter name="isPosted" type="Boolean" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="create#mantle.ledger.transaction.GlJournal"
                in-map="[   organizationPartyId: companyPartyId,
                            isPosted: 'N',
                            glJournalName: ledgerJournal.journalName,
                            glJournalTypeEnumId: ledgerJournal.error == true
                                ? 'GLJRNL_ERROR'
                                : 'GLJRNL_MANUAL',
                        ]"
                out-map="context" />
            <service-call name="growerp.100.AccountingServices100.get#LedgerJournal"
                in-map="[journalId: glJournalId]" out-map="context" />
            <set field="ledgerJournal" from="ledgerJournals[0]" />
        </actions>
    </service>

    <service verb="update" noun="LedgerJournal">
        <in-parameters>
            <parameter name="ledgerJournal" type="Map">
                <parameter name="journalId" required="true" />
                <parameter name="journalName" required="true" />
                <parameter name="isError" type="Boolean" default="false" />
                <parameter name="postedDate" />
                <parameter name="isPosted" type="Boolean" default="false" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="ledgerJournal" type="Map">
                <parameter name="journalId" />
                <parameter name="journalName" />
                <parameter name="isError" type="Boolean" />
                <parameter name="postedDate" />
                <parameter name="isPosted" type="Boolean" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="growerp.100.AccountingServices100.get#LedgerJournal"
                in-map="[journalId: journalId]" out-map="old" />
            <if condition="ledgerJournal.journalName != old.ledgerJournals[0].journalName">
                <service-call name="update#mantle.ledger.transaction.GlJournal"
                    in-map="[
                        glJournalId: ledgerJournal.journalId,
                        glJournalName: ledgerJournal.journalName,
                    ]" />
            </if>
            <if
                condition="ledgerJournal.isPosted &amp;&amp;
                ledgerJournal.isPosted != old.ledgerJournals[0].isPosted">
                <service-call name="mantle.ledger.LedgerServices.post#GlJournal"
                    in-map="[glJournalId: ledgerJournal.journalId]" />
            </if>
            <service-call name="growerp.100.AccountingServices100.get#LedgerJournal"
                in-map="[journalId: ledgerJournal.journalId]" out-map="context" />
            <set field="ledgerJournal" from="ledgerJournals[0]" />
        </actions>
    </service>

    <service verb="get" noun="GlAccount">
        <in-parameters>
            <parameter name="glAccountId" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="10" type="Integer" />
            <parameter name="search" />
            <parameter name="trialBalance" type="Boolean" default="false" />
        </in-parameters>
        <out-parameters>
            <parameter name="glAccounts" type="List">
                <parameter name="glAccountId" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="isDebit" type="Boolean" />
                <parameter name="accountClass" type="Map">
                    <parameter name="topClassId" />
                    <parameter name="topDescription" />
                    <parameter name="parentClassId" />
                    <parameter name="parentDescription" />
                    <parameter name="classId" />
                    <parameter name="description" />
                    <parameter name="detailClassId" />
                    <parameter name="detailDescription" />
                    <parameter name="contra" />
                </parameter>
                <parameter name="accountType" type="Map">
                    <parameter name="accountTypeId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="beginningBalance" />
                <parameter name="postedDebits" />
                <parameter name="postedCredits" />
                <parameter name="postedBalance" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="search">
                <set field="search" value="%$search%" />
            </if>
            <if condition="trialBalance == true">
                <entity-find entity-name="growerp.ledger.account.GlAccountAndOrganization"
                    list="glAccountList" offset="start">
                    <econdition field-name="organizationPartyId" from="companyPartyId" />
                    <econdition field-name="postedBalance" operator="not-equals"
                        from="BigDecimal.ZERO" />
                    <order-by field-name="accountCode" />
                </entity-find>
                <else>
                    <entity-find entity-name="growerp.ledger.account.GlAccountAndOrganization"
                        limit="limit" offset="start" list="glAccountList">
                        <econdition field-name="organizationPartyId" from="companyPartyId" />
                        <econdition field-name="glAccountId"
                            from="glAccountId" ignore-if-empty="true" />
                        <econditions combine="or">
                            <econdition field-name="accountName" operator="like" ignore-case="true"
                                from="search" ignore-if-empty="true" />
                            <econdition field-name="accountCode" operator="like" ignore-case="true"
                                from="search" ignore-if-empty="true" />
                        </econditions>
                        <order-by field-name="accountCode" />
                    </entity-find>

                </else>
            </if>
            <set field="glAccounts" from="[]" />
            <set field="totalCredit" from="BigDecimal.ZERO" type="BigDecimal" />
            <set field="totalDebit" from="BigDecimal.ZERO" type="BigDecimal" />
            <iterate list="glAccountList" entry="glAccount">
                <entity-find entity-name="growerp.ledger.account.GlAccountClassAndLevels"
                    list="classes">
                    <econditions combine="or">
                        <econdition field-name="detailDescription" from="glAccount.classDescription" />
                        <econdition field-name="description" from="glAccount.classDescription" />
                        <econdition field-name="parentDescription" from="glAccount.classDescription" />
                        <econdition field-name="topDescription" from="glAccount.classDescription" />
                    </econditions>
                    <order-by
                        field-name="[topDescription,parentDescription,description,detailDescription]" />
                </entity-find>
                <script>
                    glAccounts.add(
                        glAccountId: glAccount.glAccountId,
                        accountCode: glAccount.accountCode,
                        accountName: glAccount.accountName,
                        accountClass: [
                            topClassId: classes[0].topClassId?:'',
                            topDescription: classes[0].topDescription?:'',
                            parentClassId: classes[0].parentClassId?:'',
                            parentDescription: classes[0].parentDescription?:'',
                            classId: classes[0].classId?:'',
                            description: classes[0].description?:'',
                            detailClassId: classes[0].detailClassId?:'',
                            detailDescription: classes[0].detailDescription?:'',
                            contra: classes[0].detailContra == 'Y' ? true : false,
                        ],
                        accountType: [accountTypeId: glAccount.glAccountTypeEnumId,
                            description: glAccount.typeDescription],
                        isDebit: glAccount.isDebit == 'Y' ? true : false,
                        postedBalance: glAccount.postedBalance?.toString(),
                        )
                    if (glAccount.postedBalance != null &amp;&amp; trialBalance == true) {
                        if (glAccount.isDebit == 'Y') {
                            totalDebit += glAccount.postedBalance;
                        } else {
                            totalCredit += glAccount.postedBalance;
                        }
                    }
                    
                </script>
            </iterate>
            <if
                condition="trialBalance == true">
                <script>
                    glAccounts.add(
                        accountName: 'Total posted',
                        accountCode: '-----',
                        postedCredits: totalCredit?.toString(),
                        postedDebits: totalDebit?.toString(),
                    ); 
                </script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="GlAccount">
        <in-parameters>
            <parameter name="glAccount" type="Map">
                <parameter name="accountCode" required="true" />
                <parameter name="accountName" />
                <parameter name="accountClass" type="Map" required="true">
                    <parameter name="classId" />
                    <parameter name="description" /><!-- classId/description from any level-->
                </parameter>
                <parameter name="accountType" type="Map">
                    <parameter name="accountTypeId" />
                    <parameter name="description" />
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="glAccount" type="Map">
                <parameter name="glAccountId" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="isDebit" type="Boolean" />
                <parameter name="accountClass" type="Map">
                    <parameter name="topClassId" />
                    <parameter name="topDescription" />
                    <parameter name="parentClassId" />
                    <parameter name="parentDescription" />
                    <parameter name="classId" />
                    <parameter name="description" />
                    <parameter name="detailClassId" />
                    <parameter name="detailDescription" />
                </parameter>
                <parameter name="accountType" type="Map">
                    <parameter name="accountTypeId" />
                    <parameter name="description" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="!glAccount.accountClass">
                <return error="true"
                    message="Account class missing for account ${glAccount.accountCode}" />
            </if>
            <!-- get class from description -->
            <entity-find entity-name="growerp.ledger.account.GlAccountClassAndLevels"
                list="classes">
                <econditions combine="or">
                    <econdition field-name="detailDescription"
                        from="glAccount.accountClass.description" />
                    <econdition field-name="description" from="glAccount.accountClass.description" />
                    <econdition field-name="parentDescription"
                        from="glAccount.accountClass.description" />
                    <econdition field-name="topDescription"
                        from="glAccount.accountClass.description" />
                </econditions>
                <order-by
                    field-name="[topDescription,parentDescription,description,detailDescription]" />
            </entity-find>
            <if condition="!classes">
                <return error="true"
                    message="accountId: $glAccount.accountCode has an invalid class: ${glAccount.accountClass?.description}" />
            </if>
            <service-call name="growerp.100.AccountingServices100.get#AccountParent"
                in-map="[accountCode: glAccount.accountCode]"
                out-map="context" />
            <!-- create account -->
            <service-call name="create#mantle.ledger.account.GlAccount"
                in-map="[   accountCode: glAccount.accountCode,
                            parentGlAccountId: parentGlAccountId,
                            accountName: glAccount.accountName,
                            glAccountClassEnumId: classes[0].detailClassId ?: classes[0].classId 
                                                    ?: classes[0].parentClassId ?: classes[0].topClassId,
                            glAccountTypeEnumId: glAccount.accountType?.accountTypeId,
                            isTemporary: 'N',
                            disallowPosting: 'N',
                        ]"
                out-map="context" />
            <service-call name="create#mantle.ledger.account.GlAccountOrganization"
                in-map="[   glAccountId: glAccountId,
                            organizationPartyId: companyPartyId,
                        ]" />
            <service-call name="growerp.100.AccountingServices100.get#GlAccount"
                in-map="[glAccountId: glAccountId]" out-map="context" />
            <set field="glAccount" from="glAccounts[0]" />
        </actions>
    </service>

    <service verb="get" noun="AccountParent">
        <description>Get the account code parent by just analysing the accountCode</description>
        <in-parameters>
            <parameter name="accountCode" />
        </in-parameters>
        <out-parameters>
            <parameter name="parentGlAccountId"></parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <script>
                def List glAccounts;
                def String newAccountCode;
                def lastNumber = 0;
                // get the last number in the code
                for(def x = accountCode.size()-1; x&gt;0; x--) {
                    if (accountCode[x] != '0') {
                        lastNumber = x
                        break;
                    }
                }
                while(!glAccounts &amp;&amp; lastNumber &gt; 0 ) {
                    newAccountCode = accountCode.substring(0, lastNumber);
                    newAccountCode += ('0' * (accountCode.size() - lastNumber));
                    glAccounts_xafind = ec.entity.find("mantle.ledger.account.GlAccountAndOrganization")
                    .condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("organizationPartyId", "equals", companyPartyId, null, null, false, false, false, "false")).condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("accountCode", "equals", newAccountCode, null, null, false, false, false, "false"))
                    glAccounts = glAccounts_xafind.list()
                    lastNumber--;
                }
                if (glAccounts)
                    parentGlAccountId = (glAccounts[0]?.glAccountId)    
            </script>
            <!--entity-find
            entity-name="mantle.ledger.account.GlAccountAndOrganization"
                list="glAccounts">
                <econdition field-name="organizationPartyId" from="companyPartyId" />
                <econdition field-name="accountCode" from="newAccountCode" />
            </entity-find>
            <set field="parentGlAccountId" from="glAccounts[0]?.glAccountId" /-->
        </actions>
    </service>

    <service verb="update" noun="GlAccount">
        <in-parameters>
            <parameter name="glAccount" type="Map">
                <parameter name="glAccountId" required="true" />
                <parameter name="accountCode" required="true" />
                <parameter name="accountName" />
                <parameter name="accountClass" type="Map" required="true">
                    <parameter name="classId" />
                    <parameter name="description" /><!-- classId/description from any level-->
                </parameter>
                <parameter name="accountType" type="Map">
                    <parameter name="accountTypeId" />
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="glAccount" type="Map">
                <parameter name="glAccountId" />
                <parameter name="accountCode" />
                <parameter name="accountName" />
                <parameter name="isDebit" type="Boolean" />
                <parameter name="accountClass" type="Map">
                    <parameter name="topClassId" />
                    <parameter name="topDescription" />
                    <parameter name="parentClassId" />
                    <parameter name="parentDescription" />
                    <parameter name="classId" />
                    <parameter name="description" />
                    <parameter name="detailClassId" />
                    <parameter name="detailDescription" />
                </parameter>
                <parameter name="accountType" type="Map">
                    <parameter name="accountTypeId" />
                    <parameter name="description" />
                </parameter>
                <parameter name="beginningBalance" />
                <parameter name="postedDebits" />
                <parameter name="postedCredits" />
                <parameter name="postedBalance" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="growerp.100.AccountingServices100.get#AccountParent"
                in-map="[accountCode: glAccount.accountCode]"
                out-map="context" />
            <entity-find entity-name="growerp.ledger.account.GlAccountClassAndLevels"
                list="classes">
                <econditions combine="or">
                    <econdition field-name="detailDescription"
                        from="glAccount.accountClass.description" />
                    <econdition field-name="description" from="glAccount.accountClass.description" />
                    <econdition field-name="parentDescription"
                        from="glAccount.accountClass.description" />
                    <econdition field-name="topDescription"
                        from="glAccount.accountClass.description" />
                </econditions>
                <order-by
                    field-name="[topDescription,parentDescription,description,detailDescription]" />
            </entity-find>
            <if condition="!classes">
                <return error="true"
                    message="accountId: $glAccount.accountCode has an invalid class: ${glAccount.accountClass?.description}" />
            </if>
            <service-call name="update#mantle.ledger.account.GlAccount"
                in-map="[   glAccountId: glAccount.glAccountId,
                            parentGlAccountId: parentGlAccountId,
                            accountCode: glAccount.accountCode,
                            accountName: glAccount.accountName,
                            glAccountClassEnumId: classes[0].detailClassId ?: classes[0].classId 
                                                    ?: classes[0].parentClassId ?: classes[0].topClassId,
                            glAccountTypeEnumId: glAccount.accountType.accountTypeId,
                        ]" />
            <service-call name="growerp.100.AccountingServices100.get#GlAccount"
                in-map="[glAccountId: glAccount.glAccountId]" out-map="context" />
            <set field="glAccount" from="glAccounts[0]" />
        </actions>
    </service>

    <service verb="get" noun="GlAccountClass">
        <in-parameters>
            <parameter name="search" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="3" type="Integer" />
        </in-parameters>
        <out-parameters>
            <parameter name="accountClasses" type="List">
                <parameter name="accountClass" type="Map">
                    <parameter name="topClassId" />
                    <parameter name="topDescription" />
                    <parameter name="parentClassId" />
                    <parameter name="parentDescription" />
                    <parameter name="classId" />
                    <parameter name="description" />
                    <parameter name="detailClassId" />
                    <parameter name="detailDescription" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <if condition="search">
                <set field="search" value="%$search%" />
            </if>
            <entity-find entity-name="growerp.ledger.account.GlAccountClassAndLevels" list="enums"
                limit="limit" offset="start">
                <econditions combine="or">
                    <econdition field-name="topDescription" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                    <econdition field-name="parentDescription" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                    <econdition field-name="description" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                    <econdition field-name="detailDescription" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                </econditions>
                <order-by
                    field-name="[topDescription,parentDescription,description,detailDescription]" />
            </entity-find>
            <set field="accountClasses" from="[]" />
            <iterate list="enums" entry="enumEntry">
                <script>
                    accountClasses.add(
                        topClassId: enumEntry.topClassId?:'',
                        topDescription: enumEntry.topDescription?:'',
                        parentClassId: enumEntry.parentClassId?:'',
                        parentDescription: enumEntry.parentDescription?:'',
                        accountClassId: enumEntry.classId?:'',
                        description: enumEntry.description?:'',
                        detailClassId: enumEntry.detailClassId?:'',
                        detailDescription: enumEntry.detailDescription?:'',
                    );
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="GlAccountType">
        <in-parameters>
            <parameter name="search" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="2" type="Integer" />
        </in-parameters>
        <out-parameters>
            <parameter name="accountTypes" type="List">
                <parameter name="accountTypeId" />
                <parameter name="parentTypeId" />
                <parameter name="description" />
            </parameter>
        </out-parameters>
        <actions>
            <if condition="search">
                <set field="search" value="%$search%" />
            </if>
            <entity-find entity-name="moqui.basic.Enumeration" list="enums" limit="limit"
                offset="start">
                <econdition field-name="enumTypeId" value="GlAccountType" />
                <econditions combine="or">
                    <econdition field-name="description" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                    <econdition field-name="enumId" operator="like" from="search"
                        ignore-case="true" ignore-if-empty="true" />
                </econditions>
            </entity-find>
            <set field="accountTypes" from="[]" />
            <iterate list="enums" entry="enumEntry">
                <script>
                    accountTypes.add(
                        accountTypeId: enumEntry.enumId,
                        parentTypeId: enumEntry.parentEnumId,
                        description: enumEntry.description,
                    );
                </script>
            </iterate>
        </actions>
    </service>
</services>