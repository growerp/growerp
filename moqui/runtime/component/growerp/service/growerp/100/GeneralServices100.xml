<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any 
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="BackendUrl">
        <description>Get the backend url (list) for a given applicationId and version</description>
        <in-parameters>
            <parameter name="applicationId" /><!-- app name -->
            <parameter name="version" />
        </in-parameters>
        <out-parameters>
            <parameter name="backendUrl" />
            <parameter name="applications" type="List">
                <parameter name="application" type="Map">
                    <parameter name="applicationId" />
                    <parameter name="version" />
                    <parameter name="backendUrl" />
                    <parameter name="companyPartyId" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyClassification" list="urls">
                <econdition field-name="partyClassificationId" from="applicationId"
                    ignore-if-empty="true" />
                <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
            </entity-find>
            <if condition="applicationId &amp;&amp; version">
                <if condition="urls &amp;&amp; urls[0].standardCode?.contains('#')">
                    <set field="versionDb" from="urls[0].standardCode.split('#')[0]" />
                    <set field="majorVersion" from="versionDb.split('\\.')[0]" type="Integer" />
                    <set field="minorVersion" from="versionDb.split('\\.')[1]" type="Integer" />
                    <set field="patchVersion" from="versionDb.split('\\.')[2]" type="Integer" />
                    <set field="majorVersionIn" from="version.split('\\.')[0]"
                        type="Integer" />
                    <set field="minorVersionIn" from="version.split('\\.')[1]"
                        type="Integer" />
                    <set field="patchVersionIn" from="version.split('\\.')[2]"
                        type="Integer" />
                    <set field="less" from="false" type="Boolean" />
                    <if condition="majorVersionIn &lt; majorVersion ">
                        <set field="less" from="true" />
                        <else>
                            <if condition="minorVersionIn &lt; minorVersion">
                                <set field="less" from="true" />
                                <else>
                                    <if condition="patchVersionIn &lt; patchVersion">
                                        <set field="less" from="true" />
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <!-- if incoming version equal or greater (new test version)
                        then use override url in db-->
                    <if condition="less == false">
                        <set field="backendUrl"
                            from="urls[0].standardCode.split('#')[1]" />
                    </if>
                    <else>
                        <log level="info"
                            message="Could not find override backend url for $applicationId $version" />
                    </else>
                </if>
                <else>
                    <set field="applications" from="[]" />
                    <iterate entry="url" list="urls">
                        <if condition="url.standardCode?.contains('#')">
                            <set field="application"
                                from="[
                                applicationId: url.partyClassificationId.substring(3),
                                version: url.standardCode.split('#')[0],
                                backendUrl: url.standardCode.split('#')[1]]" />
                            <else>
                                <set field="application"
                                    from="[
                                    applicationId: url.partyClassificationId.substring(3)]" />
                            </else>
                        </if>
                        <script>applications.add(application)</script>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="add" noun="Application">
        <description>Get the backend url (list) for a given applicationId and version</description>
        <in-parameters>
            <parameter name="application" required="true" type="Map">
                <parameter name="applicationId" />
                <parameter name="version" />
                <parameter name="backendUrl" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="application" type="Map">
                <parameter name="applicationId" />
                <parameter name="version" />
                <parameter name="backendUrl" />
            </parameter>
        </out-parameters>
        <actions>
            <set field="standardCode" value="${version}#%" />
            <entity-find entity-name="mantle.party.PartyClassification" list="urls"
                for-update="true">
                <econdition field-name="partyClassificationId"
                    from="'App' + application.applicationId" />
                <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
            </entity-find>
            <if condition="urls">
                <set field="urls[0].standardCode"
                    value="${application.version}#${application.backendUrl}" />
                <entity-update value-field="urls[0]" />
                <else>
                    <log level="error"
                        message="Could not find backend url for ${application.applicationId}" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="delete" noun="Application">
        <description>Get the backend url (list) for a given applicationId and version</description>
        <in-parameters>
            <parameter name="application" required="true" type="Map">
                <parameter name="applicationId" />
                <parameter name="version" />
                <parameter name="backendUrl" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="application">
                <parameter name="applicationId" />
                <parameter name="version" />
                <parameter name="backendUrl" />
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyClassification" list="urls"
                for-update="true">
                <econdition field-name="partyClassificationId"
                    from="'App' + application.applicationId" />
                <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
            </entity-find>
            <if condition="urls">
                <set field="urls[0].standardCode" value="null" />
                <entity-update value-field="urls[0]" />
            </if>
        </actions>
    </service>

    <service verb="getNext" noun="PseudoId">
        <in-parameters>
            <parameter name="ownerPartyId" required="true" />
            <parameter name="seqName" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="seqNum" default-value="" />
        </out-parameters>
        <actions>
            <set field="seqName" value="$ownerPartyId-$seqName" />
            <set field="seqNum"
                from="ec.entityFacade.getNextSeqId(seqName)" />
            <if condition="ownerPartyId == 'system'">
                <set field="seqNum" value="S$seqNum" />
            </if>
        </actions>
    </service>

    <service verb="get" noun="RelatedCompanyAndOwner"><!-- internal use only -->
        <in-parameters>
            <parameter name="userPartyId" /><!-- of this particular user, optional -->
        </in-parameters>
        <out-parameters>
            <parameter name="userPartyId" /><!-- logged in user -->
            <parameter name="userCompanyPartyId" /><!-- the related company of the userPartyId -->
            <parameter name="companyPartyId" /><!-- the main company, not the user company -->
            <parameter name="ownerPartyId" /><!-- the ownerPartyId of the CompanyPartyId -->
        </out-parameters>
        <actions>
            <if condition="!userPartyId">
                <if condition="!ec.user?.userAccount">
                    <log level="warn"
                        message="No userPartyId provided and not logged in, cannot get user related company and owner" />
                    <return />
                </if>
                <set field="userPartyId" from="ec.user?.userAccount?.partyId" />
            </if>
            <!-- get ownerpartyId  and check if exist-->
            <entity-find-one entity-name="mantle.party.Party" value-field="userParty">
                <field-map field-name="partyId" from="userPartyId" />
                <select-field field-name="ownerPartyId" />
            </entity-find-one>
            <if condition="!userParty">
                <return error="true"
                    message="Not logged in and provided userPartyId: $userPartyId not found" />
            </if>
            <set field="ownerPartyId" from="userParty.ownerPartyId" />
            <!-- get user related company -->
            <entity-find entity-name="mantle.party.PartyRelationship" list="relCompanies">
                <econdition field-name="fromPartyId" from="userPartyId" />
                <econdition field-name="relationshipTypeEnumId" value="PrtEmployee" />
                <date-filter />
            </entity-find>
            <if condition="relCompanies">
                <set field="userCompanyPartyId" from="relCompanies[0].toPartyId" />
            </if>
            <!-- find main company with the Role OrgInternal -->
            <entity-find entity-name="mantle.party.PartyDetailAndRole" limit="1" list="companyList">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                <econdition field-name="roleTypeId" value="OrgInternal" />
            </entity-find>
            <set field="companyPartyId" from="companyList[0]?.partyId" />
        </actions>
    </service>

    <service verb="get" noun="Stats">
        <description>get statistics</description>
        <out-parameters>
            <parameter name="stats" />
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="context" />
            <if condition="!ownerPartyId">
                <set field="ownerPartyId" from="companyPartyId" />
            </if>
            <entity-find-one entity-name="growerp.general.Statistics" value-field="st">
                <field-map field-name="ownerPartyId" />
            </entity-find-one>
            <entity-find-count count-field="myOpportunities"
                entity-name="mantle.sales.opportunity.SalesOpportunity">
                <econdition field-name="ownerPartyId" />
                <econdition field-name="opportunityStageId"
                    operator="not-equals" value="Deleted" />
                <econdition field-name="accountPartyId"
                    from="ec.user.userAccount.partyId" />
            </entity-find-count>
            <if condition="st">
                <set field="stats"
                    from="[
                        admins: st.admins,
                        employees: st.employees,
                        suppliers: st.suppliers,
                        leads: st.leads,
                        customers: st.customers,
                        openSlsOrders: st.openSlsOrders,
                        openPurOrders: st.openPurOrders,
                        opportunities: st.opportunities,
                        myOpportunities: myOpportunities,
                        categories: st.categories,
                        products: st.products,
                        assets: st.assets,
                        salesInvoicesNotPaidCount:  st.salesInvoicesNotPaidCount,
                        salesInvoicesNotPaidAmount: st.salesInvoicesNotPaidAmount?.toString(),
                        purchInvoicesNotPaidCount:  st.purchInvoicesNotPaidCount,
                        purchInvoicesNotPaidAmount: st.purchInvoicesNotPaidAmount?.toString(),
                        allTasks: st.allTasks,
                        notInvoicedHours: st.notInvoicedHours,
                        outgoingShipments: st.outgoingShipments,
                        incomngShipments: st.incomingShipments,
                        whLocations: st.whLocations,
                        requests: st.requests,
                    ]" />
                <else>
                    <set field="stats"
                        from="[notReadChatRooms: chatRooms]" />
                </else>
            </if>
        </actions>
    </service>


    <service verb="get" noun="Statistics" authenticate="false">
        <description>Job run by the job sheduler or at owner creation, do not make pubic.</description>
        <in-parameters>
            <parameter name="ownerPartyId" />
        </in-parameters>
        <actions>
            <entity-find entity-name="growerp.party.OwnerAndCompany" list="parties">
                <econdition field-name="partyTypeEnumId" value="PtyOwner" />
                <econdition field-name="companyRole" value="OrgInternal" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="ownerDisabled" value="N" />
            </entity-find>
            <iterate list="parties" entry="party">
                <set field="companyPartyId" from="party.companyPartyId" />
                <set field="ownerPartyId" from="party.ownerPartyId" />
                <entity-find-count count-field="employees"
                    entity-name="growerp.party.OwnerPersonDetailAndCompany">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="userDisabled" value="N" or-null="true" />
                    <econdition field-name="ownerDisabled" value="N" or-null="true" />
                    <econdition field-name="companyRole" value="OrgInternal" />
                </entity-find-count>
                <entity-find-count count-field="admins"
                    entity-name="growerp.party.OwnerPersonDetailAndCompany">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="userDisabled" value="N" or-null="true" />
                    <econdition field-name="ownerDisabled" value="N" or-null="true" />
                    <econdition field-name="companyRole" value="OrgInternal" />
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN" />
                </entity-find-count>
                <entity-find-count count-field="leads"
                    entity-name="mantle.party.PartyDetailAndRole">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="disabled" value="N" or-null="true" />
                    <econdition field-name="roleTypeId" value="Customer" />
                    <econdition field-name="customerStatusId" value="CUSTOMER_ASSIGNED" />
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                </entity-find-count>
                <entity-find-count count-field="customers"
                    entity-name="mantle.party.PartyDetailAndRole">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="disabled" value="N" or-null="true" />
                    <econdition field-name="roleTypeId" value="Customer" />
                    <econdition field-name="customerStatusId" value="CUSTOMER_QUALIFIED" />
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                </entity-find-count>
                <entity-find-count count-field="suppliers"
                    entity-name="mantle.party.PartyDetailAndRole">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="disabled" value="N" or-null="true" />
                    <econdition field-name="roleTypeId" value="Supplier" />
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                </entity-find-count>

                <entity-find-count entity-name="mantle.product.Product"
                    count-field="products">
                    <econditions combine="or">
                        <econdition field-name="salesDiscontinuationDate"
                            operator="is-null" />
                        <econdition field-name="salesDiscontinuationDate"
                            operator="greater" from="ec.user.nowTimestamp" />
                    </econditions>
                    <econdition field-name="ownerPartyId" />
                </entity-find-count>
                <entity-find-count entity-name="mantle.product.asset.Asset"
                    count-field="assets">
                    <econdition field-name="statusId"
                        operator="not-equals" value="AstDeactivated" />
                    <econdition field-name="ownerPartyId" />
                </entity-find-count>
                <entity-find-count count-field="categories"
                    entity-name="growerp.mobile.party.category.ProductCategoryParentsAndChild">
                    <econdition field-name="ownerPartyId" />
                    <date-filter />
                </entity-find-count>
                <entity-find-count count-field="opportunities"
                    entity-name="mantle.sales.opportunity.SalesOpportunity">
                    <econdition field-name="opportunityStageId"
                        operator="not-equals" value="Deleted" />
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                </entity-find-count>
                <entity-find-count entity-name="mantle.order.OrderPart"
                    count-field="openSlsOrders">
                    <econdition field-name="vendorPartyId" from="companyPartyId" />
                </entity-find-count>
                <entity-find-count entity-name="mantle.order.OrderPart"
                    count-field="openPurOrders">
                    <econdition field-name="customerPartyId" from="companyPartyId" />
                </entity-find-count>
                <entity-find entity-name="mantle.account.invoice.InvoiceSummary"
                    list="allRecInvList" use-clone="true">
                    <econdition field-name="fromPartyId" from="companyPartyId" />
                    <econdition field-name="statusId" operator="in"
                        value="InvoiceFinalized,InvoiceSent,InvoiceAcked" />
                    <select-field field-name="fromPartyId,invoiceCount,unpaidTotal,currencyUomId" />
                </entity-find>
                <entity-find entity-name="mantle.account.invoice.InvoiceSummary"
                    list="allPblInvList" use-clone="true">
                    <econdition field-name="toPartyId" from="companyPartyId" />
                    <econdition field-name="statusId" operator="in"
                        value="InvoiceReceived,InvoiceApproved" />
                    <select-field field-name="toPartyId,invoiceCount,unpaidTotal,currencyUomId" />
                </entity-find>
                <entity-find-count
                    entity-name="growerp.workEffort.WorkEffortSubWorkEffortLinksAndParties"
                    count-field="allTasks">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="statusId" operator="in"
                        from="['WeApproved','WeInPlanning','WeInProgress']" />
                </entity-find-count>
                <entity-find entity-name="mantle.work.time.TimeEntryAndWorkEffort" list="hours">
                    <econdition field-name="ownerPartyId" />
                    <econdition field-name="invoiceId" operator="is-null" />
                    <select-field field-name="hours" />
                </entity-find>
                <set field="notInvoicedHours" type="Integer" value="0" />
                <iterate list="hours" entry="hour">
                    <set field="notInvoicedHours" from="notInvoicedHours + hour.hours" />
                </iterate>
                <entity-find-count entity-name="mantle.shipment.ShipmentAndItemSource"
                    count-field="outgoingShipments">
                    <econdition field-name="fromPartyId" from="ownerPartyId" />
                    <econdition field-name="statusId" operator="in"
                        from="['ShipInput','ShipScheduled','ShipPicked',
                            'ShipPacked','Ship','Shipped']" />
                </entity-find-count>
                <entity-find-count entity-name="mantle.shipment.ShipmentAndItemSource"
                    count-field="incomingShipments">
                    <econdition field-name="toPartyId" from="companyPartyId" />
                    <econdition field-name="statusId" operator="in"
                        from="['ShipInput','ShipScheduled','ShipPicked',
                            'ShipPacked','Ship','Shipped']" />
                </entity-find-count>
                <entity-find-one entity-name="mantle.facility.Facility" value-field="facility">
                    <field-map field-name="facilityTypeEnumId" value="FcTpWarehouse" />
                    <field-map field-name="ownerPartyId" from="companyPartyId" />
                </entity-find-one>
                <if condition="!facility">
                    <log level="error"
                        message="could not find warehouse for company: $companyPartyId owner: $ownerPartyId" />
                    <set field="whLocations" value="0" />
                    <else>
                        <entity-find-count entity-name="mantle.facility.FacilityLocation"
                            count-field="whLocations">
                            <econdition field-name="facilityId" from="facility.facilityId" />
                        </entity-find-count>
                    </else>
                </if>
                <entity-find-count entity-name="mantle.request.Request"
                    count-field="requests">
                    <econdition field-name="requestOwnerPartyId" from="ownerPartyId" />
                </entity-find-count>
                <service-call name="delete#growerp.general.Statistics">
                    <field-map field-name="ownerPartyId" />
                </service-call>
                <service-call name="create#growerp.general.Statistics"
                    in-map="[
                        ownerPartyId: ownerPartyId,
                        admins: admins,
                        employees: employees,
                        suppliers: suppliers,
                        leads: leads,
                        customers: customers,
                        openSlsOrders: openSlsOrders,
                        openPurOrders: openPurOrders,
                        opportunities: opportunities,
                        categories: categories,
                        products: products,
                        assets: assets,
                        salesInvoicesNotPaidCount:  allRecInvList
                            ? allRecInvList[0].invoiceCount : '0',
                        salesInvoicesNotPaidAmount: allRecInvList
                            ? allRecInvList[0].unpaidTotal : '0.00',
                        purchInvoicesNotPaidCount:  allPblInvList
                            ? allPblInvList[0].invoiceCount : '0',
                        purchInvoicesNotPaidAmount: allPblInvList
                            ? allPblInvList[0].unpaidTotal : '0.00',
                        allTasks: allTasks,
                        notInvoicedHours: notInvoicedHours,
                        incomingShipments: incomingShipments, 
                        outgoingShipments: outgoingShipments,
                        whLocations: whLocations,
                        requests: requests,
                    ]" />
            </iterate>
        </actions>
    </service>

    <service verb="check" noun="Ping" authenticate="anonymous-all" displayName="General Ping">
        <description>This service will return &quot;ok&quot; when the system is running, no login required</description>
        <out-parameters>
            <parameter name="ok" />
        </out-parameters>
        <actions>
            <set field="ok" value="ok" />
        </actions>
    </service>

    <service verb="get" noun="Authenticate">
        <description>Get userlogin information when a proper Apikey is provided in the header</description>
        <in-parameters>
            <parameter name="classificationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate" type="Map">
                <parameter name="ownerPartyId" />
                <parameter name="classificationId" />
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                        <parameter name="pseudoId" />
                        <parameter name="name" />
                        <parameter name="email" />
                        <parameter name="role" />
                    </parameter>
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="pseudoId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="employees" type="List">
                        <parameter name="employee" type="Map">
                            <parameter name="partyId" />
                            <parameter name="pseudoId" />
                            <parameter name="email" />
                            <parameter name="firstName" />
                            <parameter name="lastName" />
                        </parameter>
                    </parameter>
                </parameter>
                <parameter name="apiKey" />
                <parameter name="sessionToken" />
                <parameter name="stats" type="Map">
                    <parameter name="admins" />
                    <parameter name="employees" />
                    <parameter name="suppliers" />
                    <parameter name="leads" />
                    <parameter name="customers" />
                    <parameter name="openSlsOrders" />
                    <parameter name="openPurOrders" />
                    <parameter name="opportunities" />
                    <parameter name="myOpportunities" />
                    <parameter name="categories" />
                    <parameter name="products" />
                    <parameter name="assets" />
                    <parameter name="salesInvoicesNotPaidCount" />
                    <parameter name="salesInvoicesNotPaidAmount" />
                    <parameter name="purchInvoicesNotPaidCount" />
                    <parameter name="purchInvoicesNotPaidAmount" />
                    <parameter name="allTasks" />
                    <parameter name="notInvoicedHours" />
                    <parameter name="outgoingShipments" />
                    <parameter name="incomngShipments" />
                    <parameter name="whLocations" />
                    <parameter name="requests" />
                    <parameter name="notReadChatRooms" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <if condition="classificationId == 'token'">
                <set field="authenticate" from="[moquiSessionToken: ec.web.sessionToken]" />
                <!-- used by chat to see if apiKey is valid -->
                <return />
            </if>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- get owner -->
            <set field="authenticate"
                from="[ownerPartyId: ownerPartyId,classificationId: classificationId]" />
            <!-- get user-->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId, ownerPartyId: ownerPartyId]"
                out-map="userInfo" />
            <if condition="!userInfo.users.isEmpty()">
                <set field="authenticate.user" from="userInfo.users[0]" />
            </if>
            <!-- get company-->
            <service-call name="growerp.100.PartyServices100.get#Company"
                in-map="[companyPartyId: companyPartyId, ownerPartyId: ownerPartyId]"
                out-map="companyInfo" />
            <if condition="!companyInfo.companies.isEmpty()">
                <set field="authenticate.company" from="companyInfo.companies[0]" />
            </if>
            <!-- keys -->
            <set field="authenticate.apiKey" from="ec.user.getLoginKey()" />
            <set field="authenticate.moquiSessionToken" from="ec.web.sessionToken" />
            <!-- statistics -->
            <service-call name="growerp.100.GeneralServices100.get#Stats"
                out-map="authenticate" />
        </actions>
    </service>

    <service verb="get" noun="CurrencyList" authenticate="anonymous-all">
        <description>
            Get currency list for registration.
        </description>
        <out-parameters>
            <parameter name="currencyList" type="List">
                <parameter name="description" />
                <parameter name="abbreviation" />
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.Uom" list="allCurrencyList">
                <econdition field-name="uomTypeEnumId" value="UT_CURRENCY_MEASURE" />
                <order-by field-name="description" />
            </entity-find>
            <set field="currencyList" from="[]" />
            <iterate entry="currency" list="allCurrencyList">
                <script>currencyList.add("${currency.description} [${currency.abbreviation}]")</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="CountryList" authenticate="anonymous-all">
        <description>
            Get country list for registration.
        </description>
        <out-parameters>
            <parameter name="countryList" type="List">
                <parameter name="geoId" />
                <parameter name="geoName" />
            </parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.Geo" list="allCountryList">
                <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY" />
                <order-by field-name="description" />
            </entity-find>
            <set field="countryList" from="[]" />
            <iterate entry="country" list="allCountryList">
                <script>countryList.add("${country.geoName} [${country.geoId}]")</script>
            </iterate>
        </actions>
    </service>

    <service verb="logout" noun="User">
        <description>logout of the system</description>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId]" out-map="userInfo" />
            <if condition="userInfo.users">
                <set field="user" from="userInfo.users[0]" />
            </if>
            <script>
                    if (ec.user.username) { ec.user.logoutUser(); ec.web.sendTextResponse("successful") }
                    else { ec.web.sendTextResponse("no_user") }
                </script>
        </actions>
    </service>

    <service verb="login" noun="User" authenticate="anonymous-all">
        <description>service to return an apikey and user information
            if user/password ok, when not check for a reset password
            if extra company info requested create main company
            Check payment for frontend payment screen.
        </description>
        <in-parameters>
            <parameter name="username" required="true">
                <description>any name, can also be the entered email address</description>
            </parameter>
            <parameter name="password" required="true">
                <description>A password which contains at least a numeric and special character</description>
            </parameter>
            <parameter name="companyName" />
            <parameter name="currencyId" />
            <parameter name="creditCardNumber" />
            <parameter name="creditCardType" />
            <parameter name="nameOnCard" />
            <parameter name="expireMonth" />
            <parameter name="expireYear" />
            <parameter name="cVC" />
            <parameter name="plan" /><!--  diyPlan, smallPlan, fullPlan -->
            <parameter name="demoData" default-value="false" type="Boolean" />
            <parameter name="classificationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate" type="Map">
                <parameter name="ownerPartyId" />
                <parameter name="classificationId" />
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                        <parameter name="name" />
                        <parameter name="email" />
                        <parameter name="role" />
                    </parameter>
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                </parameter>
                <parameter name="apiKey" />
                <parameter name="sessionToken" />
            </parameter>
        </out-parameters>
        <actions>
            <!-- get user account info -->
            <entity-find-one entity-name="moqui.security.UserAccount"
                value-field="userAccount" cache="false">
                <field-map field-name="username" />
            </entity-find-one>
            <if condition="!userAccount">
                <set field="authenticate"
                    from="[user: [loginName: username],
                            classificationId: classificationId]" />
                <return error="true"
                    message="cannot find username: ${username}" public="true" />
            </if>

            <!-- check password -->
            <set field="oldPassword" from="password" />
            <script>
                def token = new org.apache.shiro.authc.UsernamePasswordToken(
                    (String) userAccount.username, (String) oldPassword)
                def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(
                    userAccount.username, userAccount.currentPassword,
                    userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource(
                        (String) userAccount.passwordSalt) : null, "moquiRealm")
            </script>
            <if
                condition="!userAccount.currentPassword || 
                    !ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 
                    'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                <if condition="userAccount.resetPassword">
                    <!-- try the resetPassword -->
                    <script>
                        info = new org.apache.shiro.authc.SimpleAuthenticationInfo(
                            userAccount.username, userAccount.resetPassword,
                            userAccount.passwordSalt 
                                ? new org.apache.shiro.util.SimpleByteSource(
                                        (String) userAccount.passwordSalt) 
                                : null, "moquiRealm")
                    </script>
                    <if
                        condition="ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType,
                         'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                        <!-- show reset password screen -->
                        <set field="authenticate"
                            from="authenticate + [apiKey: 'passwordChange']" />
                        <return />
                        <else>
                            <return error="true" message="Password incorrect for user ${username}" />
                        </else>

                    </if>
                </if>
            </if>

            <!-- login directly with AppSupport-->
            <if condition="classificationId == 'AppSupport'">
                <script>ec.user.loginUser(username, password)</script>
                <service-call name="growerp.100.GeneralServices100.get#Authenticate"
                    in-map="classificationId: classificationId"
                    out-map="context" />
                <return />
            </if>

            <!-- get person information -->
            <entity-find-one entity-name="mantle.party.Person"
                value-field="person">
                <field-map field-name="partyId" from="userAccount.partyId" />
            </entity-find-one>
            <!-- get ownerPartyId from user -->
            <entity-find-one entity-name="mantle.party.Party"
                value-field="userParty">
                <field-map field-name="partyId" from="userAccount.partyId" />
            </entity-find-one>
            <set field="ownerPartyId" from="userParty.ownerPartyId" />
            <!-- find main company -->
            <entity-find entity-name="growerp.party.OwnerAndCompany" list="mainCompanies">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="companyRole" value="OrgInternal" />
            </entity-find>
            <set field="companyPartyId" from="mainCompanies[0].companyPartyId" />
            <set field="companyName" from="companyName ?:mainCompanies[0].companyName" />
            <!-- set basic return data -->
            <set field="authenticate"
                from="[user: [partyId: userAccount.partyId,
                            pseudoId: userParty.pseudoId,
                            firstName: person.firstName,
                            lastName: person.lastName,
                            loginName: username,
                            email: username],
                        ownerPartyId: ownerPartyId,
                        moquiSessionToken: password,
                        classificationId: classificationId,
                        company:[partyId: companyPartyId,
                            name: companyName,
                            role: 'OrgInternal']
                    ]" />

            <!-- check if any classification attached for this user -->
            <!-- if none, if admin ask for more info for company setup -->
            <!-- if not admin, ask for company and relate with owner-->
            <entity-find entity-name="mantle.party.PartyClassificationAndAppl" limit="1"
                list="partyClassifications">
                <econdition field-name="partyId" from="userAccount.partyId" />
                <econdition field-name="classificationTypeEnumId" value="PcltMobileApp" />
                <econdition field-name="partyClassificationId" from="classificationId" />
            </entity-find>
            <if condition="!partyClassifications"><!-- more setup needed -->
                <!-- usergroup to see if admin (company name required) or not -->
                <entity-find entity-name="moqui.security.UserGroupMember" list="adminAccess">
                    <econdition field-name="userId" from="userAccount.userId" />
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN" />
                </entity-find>
                <if condition="adminAccess">
                    <then><!-- update company and admin from party registration-->
                        <if condition="companyName &amp;&amp; currencyId">
                            <!-- update main company name currency: temporary -->
                            <service-call name="update#mantle.party.Organization"
                                out-map="context"
                                in-map="[partyId: companyPartyId,
                                        organizationName: companyName,
                                        officeSiteName: currencyId]" />
                            <!-- activate owner -->
                            <service-call name="update#mantle.party.Party"
                                in-map="[partyId: ownerPartyId, disabled: 'N']" />
                        </if>
                        <!-- check owner activated, when not, request more info -->
                        <entity-find-one
                            entity-name="mantle.party.Party" value-field="ownerParty">
                            <field-map field-name="partyId" from="ownerPartyId" />
                        </entity-find-one>
                        <if condition="ownerParty.disabled == 'Y'">
                            <!-- if disabled request company and other info -->
                            <set field="authenticate.user"
                                from="authenticate.user + [
                                    userGroupId: 'GROWERP_M_ADMIN', role: 'OrgInternal']" />
                            <set field="authenticate"
                                from="authenticate + [apiKey: 'moreInfo']" />
                            <return />
                        </if>
                        <!-- process payment with credit card -->
                        <if
                            condition="creditCardNumber &amp;&amp; nameOnCard &amp;&amp; expireMonth &amp;&amp; expireYear &amp;&amp; cVC &amp;&amp; plan">
                            <!-- save creditcard in user record -->
                            <set field="expireDate" value="${expireMonth}/20${expireYear}" />
                            <set field="ccInMap"
                                from="[
                                paymentMethodTypeEnumId: 'PmtCreditCard',
                                ownerPartyId: companyPartyId,
                                cardNumber: creditCardNumber,
                                creditCardTypeEnumId: 'Cct' + creditCardType,
                                expireDate: expireDate,
                                firstNameOnAccount: nameOnCard,
                                lastNameOnAccount: '',
                                paymentGatewayConfigId: System.getProperty('paymentGatewayConfigId'),
                                ]" />
                            <service-call
                                name="mantle.account.PaymentMethodServices.create#CreditCard"
                                in-map="ccInMap" out-map="userPayment" />
                            <set field="paymentMethodId" from="userPayment.paymentMethodId" />
                            <!-- create growerp as supplier -->
                            <set field="growerpCompany"
                                from="[name: 'GrowERP', role: 'Supplier',
                                   email: 'support@growerp.com']" />
                            <service-call
                                name="growerp.100.PartyServices100.create#Company"
                                in-map=" [company: growerpCompany,ownerPartyId: ownerPartyId]"
                                out-map="companyInfo" />
                            <set field="growerpPartyId" from="companyInfo.company.partyId" />
                            <!-- decode plan to amount, get later from product 100000-->
                            <set field="planAmount"
                                from="[diyPlan: '50.00',
                                       smallPlan: '499.00', fullPlan: '999.00']" />
                            <!-- create payment-->
                            <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                in-map="[ownerPartyId: ownerPartyId, seqName: 'payment']"
                                out-map="context" />
                            <set field="paymentInMap"
                                from="[
                                    pseudoId: seqNum,
                                    statusId: 'PmntProposed',
                                    paymentType: 'PtPrePayment',
                                    paymentMethodId: paymentMethodId,
                                    amount: planAmount[plan],
                                    amountUomId: 'USD',
                                    paymentInstrumentEnumId: 'PiCreditCard',
                                    effectiveDate: ec.user.nowTimestamp,
                                    paymentTypeEnumId: 'PmtCreditCard',
                                    fromPartyId: companyPartyId,
                                    toPartyId: growerpPartyId,
                                    memo: memo,
                                ]" />
                            <service-call name="create#mantle.account.payment.Payment"
                                in-map="paymentInMap" out-map="paymentInfo" />
                            <set field="paymentId" from="paymentInfo.paymentId" />
                            <!-- get payment gateway config -->
                            <entity-find-one
                                entity-name="mantle.account.method.PaymentGatewayConfig"
                                value-field="paymentGatewayConfig">
                                <field-map field-name="paymentGatewayConfigId"
                                    from="System.getProperty('paymentGatewayConfigId')" />
                            </entity-find-one>
                            <if condition="!paymentGatewayConfig">
                                <return error="true"
                                    message="Payment gateway not configured, please contact support." />
                            </if>
                            <!-- authorize Payment -->
                            <service-call name="${paymentGatewayConfig.authorizeServiceName}"
                                in-map="[paymentId: paymentId,
                                    paymentGatewayConfigId: paymentGatewayConfig.paymentGatewayConfigId]"
                                out-map="context" />
                            <!-- GrowERP account processing: get GrowERP companyId-->
                            <entity-find entity-name="growerp.party.OwnerAndCompany"
                                list="growerpMainCompanies">
                                <econdition field-name="ownerPartyId" value="100000" />
                                <econdition field-name="companyRole" value="OrgInternal" />
                            </entity-find>
                            <set field="growerpMainCompanyPartyId"
                                from="growerpMainCompanies[0].companyPartyId" />
                            <!-- create in growerp account-->
                            <set field="growerpCustomerCompany"
                                from="[name: companyName, role: 'Customer', email: username]" />
                            <service-call
                                name="growerp.100.PartyServices100.create#Company"
                                in-map=" [company: growerpCustomerCompany,ownerPartyId: '100000']"
                                out-map="companyInfo" />
                            <set field="growerpCustomerPartyId" from="companyInfo.company.partyId" />
                            <!-- create payment method and credit card-->
                            <set field="growerpCcInMap"
                                from="ccInMap + [ownerPartyId: growerpCustomerPartyId]" />
                            <service-call
                                name="mantle.account.PaymentMethodServices.create#CreditCard"
                                in-map="growerpCcInMap" out-map="growerpCcInMap" />
                            <set field="growerpPaymentMethodId" from="userPayment.paymentMethodId" />
                            <!-- payment + gateway response id -> refno -->
                            <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                                in-map="[ownerPartyId: '100000', seqName: 'payment']"
                                out-map="context" />
                            <set field="growerpPaymentInMap"
                                from="paymentInMap + [pseudoId: seqNum,
                                    fromPartyId: growerpCustomerPartyId,
                                    toPartyId: growerpMainCompanyPartyId,
                                    paymentMethodId: growerpPaymentMethodId,
                                    paymentRefNum: paymentGatewayResponseId]" />
                            <service-call name="create#mantle.account.payment.Payment"
                                in-map="growerpPaymentInMap" out-map="paymentInfo" />
                            <set field="paymentId" from="paymentInfo.paymentId" />
                        </if>

                        <!-- prompt for capture of payment if not first tenant != GrowERP-->
                        <if condition="ownerPartyId != '100000'">
                            <!-- get authorized capturepayment(when STRIPE) for this company -->
                            <entity-find entity-name="mantle.account.payment.Payment"
                                list="payments" limit="1">
                                <econdition field-name="fromPartyId" from="companyPartyId" />
                                <econdition field-name="toPartyId" from="growerpPartyId" />
                                <!-- econdition field-name="statusId" value="PmntAuthorized" /-->
                                <order-by field-name="-paymentId" />
                            </entity-find>
                            <!-- test check for payments -->
                            <if condition="!payments">
                                <set field="authenticate"
                                    from="authenticate + [apiKey: 'paymentFirst']" />
                                <return />
                            </if>
                            <!-- check when STRIPE -->
                            <if
                                condition="System.getProperty('paymentGatewayConfigId') == 'STRIPE'">
                                <entity-find
                                    entity-name="mantle.account.method.PaymentGatewayResponse"
                                    list="resps">
                                    <econdition field-name="paymentId" from="payments[0].paymentId" />
                                    <econdition field-name="paymentOperationEnumId"
                                        value="PgoCapture" />
                                    <econdition field-name="resultSuccess" value="Y" />
                                </entity-find>
                                <if condition="!resps">
                                    <!-- no capture response from gateway -->
                                    <set field="authenticate"
                                        from="authenticate + [apiKey: 'paymentFirst']" />
                                    <return />
                                </if>
                            </if>
                        </if>
                        <!-- get temp location currency and remove -->
                        <entity-find-one entity-name="mantle.party.Organization"
                            value-field="org" for-update="true">
                            <field-map field-name="partyId" from="companyPartyId" />
                        </entity-find-one>
                        <!-- initialize accounting with defaults, login first-->
                        <script>ec.user.loginUser(username, password)</script>
                        <service-call
                            name="growerp.100.AccountingServices100.init#PartyAccountingConfiguration"
                            in-map="[sourcePartyId: 'DefaultSettings',
                                        organizationPartyId: companyPartyId,
                                        baseCurrencyUomId: org.officeSiteName]" />
                        <set field="org.officeSiteName" from="null" />
                        <entity-update value-field="org" />
                        <!-- the organizational setup -->
                        <service-call
                            name="growerp.100.PartyServices100.setup#MainOrganization"
                            in-map="[ownerPartyId: ownerPartyId, userPartyId: userAccount.partyId,
                                    hostName: ec.web.getHostName(false), currencyId: currencyId,
                                    companyPartyId: companyPartyId, classificationId: classificationId]" />
                        <!-- specific App setups for new company and first admin-->
                        <service-call
                            name="growerp.100.PartyServices100.setup#SpecificApp"
                            in-map="[ownerPartyId: ownerPartyId, userPartyId: userAccount.partyId,
                                        companyPartyId: companyPartyId, classificationId: classificationId]" />
                        <!-- demo data -->
                        <if condition="demoData">
                            <service-call
                                name="growerp.100.PartyServices100.load#DemoData"
                                include-user-login="true"
                                in-map="[ownerPartyId: ownerPartyId,
                                                        companyPartyId: companyPartyId,
                                                        currencyId: currencyId,
                                                        classificationId: classificationId,
                                                        userPartyId: userAccount.partyId]" />
                        </if>
                        <!-- create event -->
                        <service-call
                            name="growerp.100.ActivityServices100.create#Event"
                            in-map='[partyId: userAccount.partyId, userGroupId: "GROWERP_M_ADMIN",
                                    name: "$companyName created"]' />
                    </then>
                    <else><!-- customer/supplier user with optional company-->
                        <if condition="companyName">
                            <!-- create user company-->
                            <service-call
                                name="growerp.100.GeneralServices100.getNext#PseudoId"
                                in-map="[ownerPartyId: ownerPartyId, seqName: 'party']"
                                out-map="context" />
                            <service-call
                                name="mantle.party.PartyServices.create#Organization"
                                out-map="context"
                                in-map="[organizationName: companyName,
                                            pseudoId: seqNum,
                                            ownerPartyId: ownerPartyId,
                                            roleTypeId: 'Customer',
                                            customerStatusId: 'CUSTOMER_QUALIFIED',
                                            disabled: 'N']" />
                            <!-- employee to company relationship-->
                            <service-call name="create#mantle.party.PartyRelationship"
                                in-map="[
                                            fromPartyId: userAccount.partyId,
                                            fromRoleTypeId: 'Employee',
                                            toPartyId: partyId,
                                            toRoleTypeId: 'Customer',
                                            relationshipTypeEnumId: 'PrtEmployee',
                                            fromDate: ec.user.nowTimestamp
                                            ]" />
                            <return />
                        </if>
                    </else>
                </if>
                <!-- finally create classification which will not show more info anymore -->
                <service-call name="create#mantle.party.PartyClassificationAppl"
                    in-map="[partyId: userAccount.partyId,
                                classificationTypeEnumId: 'PcltMobileApp',
                                partyClassificationId: classificationId]" />
            </if>

            <!-- everything ok just login -->
            <script>ec.user.loginUser(username, password)</script>
            <service-call name="growerp.100.GeneralServices100.get#Authenticate"
                in-map="classificationId: classificationId"
                out-map="context" />
        </actions>
    </service>

    <service verb="reset" noun="Password" authenticate="anonymous-all">
        <description>will send a new password by email and will initiate a change password at login time</description>
        <in-parameters>
            <parameter name="username" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.email.EmailServer"
                value-field="emailExist">
                <field-map field-name="emailServerId" value="SYSTEM" />
            </entity-find-one>
            <if condition="emailExist &amp;&amp; emailExist.mailPassword != 'SMTP_PASSWORD'">
                <service-call name="org.moqui.impl.UserServices.reset#Password"
                    in-map="[username: username]" />
                <else>
                    <!-- copied from UserServices.xml -->
                    <entity-find-one entity-name="moqui.security.UserAccount"
                        value-field="userAccount" for-update="true">
                        <field-map field-name="username" from="username" />
                    </entity-find-one>
                    <if condition="!userAccount">
                        <entity-find-one entity-name="moqui.security.UserAccount"
                            value-field="userAccount" for-update="true">
                            <field-map field-name="emailAddress" from="username" />
                        </entity-find-one>
                    </if>
                    <if condition="userAccount">
                        <set field="resetPassword" from="getRandomString(12)" />
                        <set field="passwordNode"
                            from="ec.ecfi.confXmlRoot.first('user-facade').first('password')" />
                        <set field="userAccount.resetPassword"
                            from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))" />
                        <set field="userAccount.requirePasswordChange"
                            from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'" />
                        <entity-update value-field="userAccount" />
                        <else>
                            <return error="true"
                                message="Could not find a user account for $username" />
                        </else>
                    </if>
                </else>
            </if>
        </actions>
    </service>

    <service verb="update" noun="Password">
        <description>Change the password of an account and re-enable also used with reset password logged off</description>
        <in-parameters>
            <parameter name="username" required="true" />
            <parameter name="newPassword" required="true" />
            <parameter name="oldPassword" />
            <parameter name="classificationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate" type="Map">
                <parameter name="user" type="Map">
                    <parameter name="partyId" />
                    <parameter name="email" />
                    <parameter name="firstName" />
                    <parameter name="lastName" />
                    <parameter name="loginDisabled" type="Boolean" />
                    <parameter name="loginName" />
                    <parameter name="userGroupId" />
                    <parameter name="groupDescription" />
                    <parameter name="language" />
                    <parameter name="image" />
                    <parameter name="userId" />
                    <parameter name="locale" />
                    <parameter name="telephoneNr" />
                    <parameter name="company" type="Map">
                        <parameter name="partyId" />
                        <parameter name="name" />
                        <parameter name="email" />
                        <parameter name="role" />
                    </parameter>
                </parameter>
                <parameter name="company" type="Map">
                    <parameter name="partyId" />
                    <parameter name="name" />
                    <parameter name="role" />
                    <parameter name="email" />
                    <parameter name="currency" type="Map">
                        <parameter name="currencyId" />
                        <parameter name="description" />
                    </parameter>
                    <parameter name="vatPerc">
                        <description>Percentage used for VAT if applicable</description>
                    </parameter>
                    <parameter name="salesPerc">
                        <description>Percentage used for sales tax</description>
                    </parameter>
                    <parameter name="address" type="Map">
                        <parameter name="addressId" />
                        <parameter name="address1" />
                        <parameter name="address2" />
                        <parameter name="city" />
                        <parameter name="postalCode" />
                        <parameter name="province" />
                        <parameter name="provinceId" />
                        <parameter name="country" />
                        <parameter name="countryId" />
                    </parameter>
                    <parameter name="image" />
                    <parameter name="paymentMethod">
                        <parameter name="ccPaymentMethodId" />
                        <parameter name="ccDescription" />
                    </parameter>
                    <parameter name="telephoneNr" />
                    <parameter name="employees" type="List">
                        <parameter name="employee" type="Map">
                            <parameter name="partyId" />
                            <parameter name="email" />
                            <parameter name="firstName" />
                            <parameter name="lastName" />
                        </parameter>
                    </parameter>
                </parameter>
                <parameter name="apiKey" />
                <parameter name="sessionToken" />
                <parameter name="statistics" type="Map">
                    <parameter name="admins" />
                    <parameter name="employees" />
                    <parameter name="suppliers" />
                    <parameter name="leads" />
                    <parameter name="customers" />
                    <parameter name="openSlsOrders" />
                    <parameter name="openPurOrders" />
                    <parameter name="opportunities" />
                    <parameter name="myOpportunities" />
                    <parameter name="categories" />
                    <parameter name="products" />
                    <parameter name="assets" />
                    <parameter name="salesInvoicesNotPaidCount" />
                    <parameter name="salesInvoicesNotPaidAmount" />
                    <parameter name="purchInvoicesNotPaidCount" />
                    <parameter name="purchInvoicesNotPaidAmount" />
                    <parameter name="allTasks" />
                    <parameter name="notInvoicedHours" />
                    <parameter name="outgoingShipments" />
                    <parameter name="incomngShipments" />
                    <parameter name="whLocations" />
                    <parameter name="requests" />
                    <parameter name="notReadChatRooms" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <if condition="ec.user.userAccount"><!-- only possible with a loggedin user -->
                <service-call out-map="context"
                    name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
                <!-- make sure that username is only searched for in the logged in user own company -->
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLogin" list="accounts">
                    <econdition field-name="username" />
                    <econdition field-name="toPartyId" from="companyPartyId" />
                </entity-find>
                <if condition="!accounts">
                    <return error="true"
                        message="cannot find username: ${username}" public="true" />
                </if>
            </if>
            <service-call name="org.moqui.impl.UserServices.update#Password"
                in-map="[username: username, oldPassword: oldPassword,
                    newPassword: newPassword, newPasswordVerify: newPassword]" />
            <!-- enable useraccount -->
            <service-call name="update#moqui.security.UserAccount"
                in-map="[username:username, disabled:'N', disabledDateTime:null,
                    successiveFailedLogins:0]" />
            <script>ec.user.loginUser(username, newPassword)</script>
            <service-call name="growerp.100.GeneralServices100.get#Authenticate"
                in-map="classificationId: classificationId"
                out-map="context" />
        </actions>
    </service>

</services>
 