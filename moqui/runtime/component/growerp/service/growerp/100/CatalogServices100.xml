<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="Products" authenticate="false">
        <description> get a single, or all products</description>
        <in-parameters>
            <parameter name="classificationId" default="AppAdmin" /><!-- AppHotel AppXXXXX-->
            <parameter name="ownerPartyId" />
            <parameter name="pseudoId" />
            <parameter name="categoryId" />
            <parameter name="productId" />
            <parameter name="productTypeId" />
            <parameter name="assetClassId" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="20" type="Integer" />
            <parameter name="isForDropDown" type="Boolean" default="false" />
            <parameter name="search" default="null" />
        </in-parameters>
        <out-parameters>
            <parameter name="products" type="List">
                <parameter name="product" type="Map">
                    <parameter name="productId" />
                    <parameter name="pseudoId" />
                    <parameter name="productTypeId" />
                    <parameter name="assetClassId" />
                    <parameter name="productName" />
                    <parameter name="description" />
                    <parameter name="price" />
                    <parameter name="listPrice" />
                    <parameter name="categories" type="List">
                        <parameter name="category" type="Map">
                            <parameter name="categoryId" />
                            <parameter name="categoryName" />
                        </parameter>
                    </parameter>
                    <parameter name="useWarehouse" type="Boolean" />
                    <parameter name="assetCount" />
                    <parameter name="image" />
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <if condition="!ownerPartyId">
                <!-- if not provided and not logged in use the one which was first created -->
                <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                    <order-by field-name="partyId" />
                </entity-find>
                <set field="ownerPartyId" from="parties[0].partyId" />
            </if>
            <if condition="categoryId == '###first one###'">
                <!-- for ecommerce startup we only need products in the first alphabetical category
                    but do not know which one that is -->
                <entity-find
                    entity-name="mantle.product.category.ProductCategory" list="catList" limit="1">
                    <econdition field-name="ownerPartyId" from="ownerPartyId" />
                    <econdition field-name="productCategoryTypeEnumId" operator="not-equals"
                        value="PsctBrowseRoot" />
                    <order-by field-name="categoryName" />
                </entity-find>
                <set field="categoryId" from="catList[0].productCategoryId" />
            </if>
            <if condition="search != null">
                <set field="search" value="%${search}%" />
            </if>
            <!-- convert AssetClassId -->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetClassId]" out-map="assetClass" />
            <!-- convert ProductTypeId -->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: productTypeId]" out-map="productType" />
            <!-- get products , ignore allProducts category-->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="catgs">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
            </entity-find>
            <entity-find offset="start" limit="limit*4"
                entity-name="growerp.mobile.product.ProductAndCategoryAndPrices"
                list="productList">
                <econdition field-name="ownerPartyId" from="ownerPartyId" ignore-if-empty="true" />
                <econdition field-name="productTypeEnumId"
                    from="productType.convertedStatusId" ignore-if-empty="true" />
                <econdition field-name="assetClassEnumId"
                    from="assetClass.convertedStatusId" ignore-if-empty="true" />
                <econdition field-name="categoryId" ignore-if-empty="true" />
                <econdition field-name="productId" ignore-if-empty="true" />
                <econdition field-name="pseudoId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="productId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="pseudoId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="productName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="description" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <date-filter from-field-name="productFromDate"
                    thru-field-name="productThruDate" />
                <date-filter /><!-- product from/thrudate on category-->
                <date-filter from-field-name="listPriceFromDate"
                    thru-field-name="listPriceThruDate" />
                <date-filter from-field-name="priceFromDate"
                    thru-field-name="priceThruDate" />
                <order-by field-name="productName" />
            </entity-find>
            <!-- create product list -->
            <set field="products" from="[]" />
            <set field="categories" from="[]" />
            <set field="lastItem" from="null" />
            <!-- get root category, do not display -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="catgs">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
            </entity-find>
            <if condition="!catgs">
                <return error="true"
                    message="Internal data error; mandatory root category not found for owner $ownerPartyId" />
            </if>
            <iterate entry="product" list="productList">
                <if condition="lastItem &amp;&amp; lastItem.productId != product.productId">
                    <if condition="!isForDropDown">
                        <set field="productOut.categories" from="categories" />
                    </if>
                    <script>products.add(productOut)</script>
                    <set field="categories" from="[]" />
                </if>
                <if condition="!lastItem || lastItem.productId != product.productId">
                    <if condition="classificationId == 'AppHotel'">
                        <entity-find-count entity-name="mantle.product.asset.Asset"
                            count-field="assetCount">
                            <econdition field-name="productId" from="product.productId" />
                        </entity-find-count>
                        <else>
                            <!-- assets totalled by quantityOnHand -->
                            <entity-find entity-name="growerp.mobile.asset.ProductAssetSummary"
                                list="assetCountList">
                                <econdition field-name="productId" from="product.productId" />
                                <econdition field-name="ownerPartyId" from="companyPartyId" />
                                <econdition field-name="statusId" operator="not-equals"
                                    value="AstDeactivated" />
                                <econdition
                                    field-name="classEnumId" from="product.assetClassEnumId"
                                    ignore-if-empty="true" />
                                <econdition field-name="assetTypeEnumId"
                                    from="product.assetTypeEnumId" ignore-if-empty="true" />
                            </entity-find>
                            <set field="assetCount"
                                from="assetCountList ? (int) assetCountList[0].totalAssets : null" />
                        </else>
                    </if>

                    <if condition="isForDropDown">
                        <set field="productOut"
                            from="[
                                productId: product.productId,
                                pseudoId: product.pseudoId,
                                productName: product.productName,
                                ]" />
                        <if condition="product.price">
                            <set field="productOut.price"
                                from="product.price.toString()" />
                        </if>
                        <else>
                            <!-- content -->
                            <entity-find entity-name="mantle.product.ProductContent" list="contents"
                                limit="1">
                                <econdition field-name="productId" from="product.productId" />
                                <econditions combine="or">
                                    <econdition field-name="productContentTypeEnumId"
                                        value="PcntImageSmall" />
                                </econditions>
                            </entity-find>
                            <if condition="contents">
                                <service-call name="growerp.100.ImageServices100.download#Image"
                                    in-map="[contentLocation: contents[0].contentLocation]"
                                    out-map="context" />
                                <else>
                                    <set field="imageFile" from="null" />
                                </else>
                            </if>
                            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                                in-map="[docType: 'product', statusId: product.productTypeEnumId]"
                                out-map="prodConvert" />
                            <set field="productOut"
                                from="[
                                    productId: product.productId,
                                    pseudoId: product.pseudoId,
                                    productName: product.productName ?: '',
                                    productTypeId: prodConvert.convertedStatusId,
                                    assetClassId: product.assetClassEnumId,
                                    description: product.description?:'',
                                    useWarehouse: product.requireInventory == 'Y' ? true : false,
                                    assetCount: assetCount ? assetCount : null,
                                    image: imageFile,
                                    price: product.price ? product.price.toString() : '0.00',
                                    listPrice: product.listPrice ? product.listPrice.toString() : '0.00',
                                ]" />
                        </else>
                    </if>
                </if>
                <if
                    condition="product.categoryId &amp;&amp; 
                        product.categoryId != catgs[0].productCategoryId">
                    <script><!-- ignore root category allProducts -->
                        categories.add([categoryId: product.categoryId,
                                categoryName: product.categoryName])
                    </script>
                </if>
                <set field="lastItem" from="product" />
            </iterate>
            <if condition="lastItem">
                <if condition="!isForDropDown">
                    <set field="productOut.categories" from="categories" />
                </if>
                <script>products.add(productOut)</script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Product">
        <description> Create a Product with a price in a category</description>
        <in-parameters>
            <parameter name="classificationId" required="true" />
            <parameter name="product" required="true" type="Map">
                <parameter name="pseudoId" />
                <parameter name="productTypeId" />
                <parameter name="assetClassId" />
                <parameter name="productName" />
                <parameter name="description" />
                <parameter name="price" />
                <parameter name="listPrice" />
                <parameter name="categories" type="List">
                    <parameter name="category" type="Map">
                        <parameter name="categoryId" />
                        <parameter name="categoryName" />
                        <parameter name="description" />
                        <parameter name="image" />
                    </parameter>
                </parameter>
                <parameter name="useWarehouse" type="Boolean" />
                <parameter name="image" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="product" type="Map">
                <parameter name="productId" />
                <parameter name="pseudoId" />
                <parameter name="productTypeId" />
                <parameter name="assetClassId" />
                <parameter name="productName" />
                <parameter name="description" />
                <parameter name="price" />
                <parameter name="listPrice" />
                <parameter name="categories" type="List">
                    <parameter name="category" type="Map">
                        <parameter name="categoryId" />
                        <parameter name="categoryName" />
                    </parameter>
                </parameter>
                <parameter name="useWarehouse" type="Boolean" />
                <parameter name="assetCount" />
                <parameter name="image" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <set field="quantityUomId" value="OTH_ea" />
            <!-- convert AssetClassId and product type-->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: product.assetClassId]" out-map="context" />
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: product.productTypeId]" out-map="prodConvert" />
            <!-- create pseudoId when not provided -->
            <if condition="!product.pseudoId || product.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'product']"
                    out-map="context" />
                <set field="product.pseudoId" from="seqNum" />
            </if>
            <!-- create product -->
            <service-call name="create#mantle.product.Product"
                in-map="[
                pseudoId: product.pseudoId,
                productName: product.productName,
                description: product.description,
                salesIntroductionDate: ec.user.nowTimestamp,
                ownerPartyId: ownerPartyId,
                productTypeEnumId: prodConvert.convertedStatusId,
                assetTypeEnumId: prodConvert.convertedStatusId != 'PtService'? 'AstTpInventory' : null,
                requireInventory: prodConvert.convertedStatusId == 'PtService'? 'N' : product.useWarehouse == true ? 'Y' : 'N',
                assetClassEnumId: prodConvert.convertedStatusId != 'PtService'? 'AsClsInventoryFin' : null]"
                out-map="context" />
            <!-- product price and currency -->
            <entity-find-one value-field="pref"
                entity-name="mantle.ledger.config.PartyAcctgPreference">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <set field="priceMap"
                from="[productId: productId,
                        priceTypeEnumId: 'PptList',
                        priceUomId: pref.baseCurrencyUomId,
                        price: product.listPrice,
                        quantityUomId: 'OTH_ea',
                        fromDate: ec.user.nowTimestamp,
                        pricePurposeEnumId: 'PppPurchase']" />
            <service-call name="create#mantle.product.ProductPrice"
                in-map="priceMap" />
            <service-call name="create#mantle.product.ProductPrice"
                in-map="priceMap + [priceTypeEnumId: 'PptCurrent',
                                    price: product.price,
                                    ]" />
            <!-- related categories -->
            <iterate list="product.categories" entry="category">
                <!-- add if no id's -->
                <if condition="!category.categoryId">
                    <!-- check if exist not required, already done in entity import -->
                    <service-call name="growerp.100.CatalogServices100.create#ProductCategory"
                        in-map="[category: category]" out-map="categoryResult" />
                    <set field="categoryId" from="categoryResult.category.categoryId" />
                    <else>
                        <set field="categoryId" from="category.categoryId" />
                    </else>
                </if>
                <!-- add to category member -->
                <service-call name="create#mantle.product.category.ProductCategoryMember"
                    in-map="[   productId: productId,
                                productCategoryId: categoryId,
                                fromDate: ec.user.nowTimestamp]" />
            </iterate>
            <!-- always connect product to category allProducts -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="catgs">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
            </entity-find>
            <!-- add allProducts to category member -->
            <service-call name="create#mantle.product.category.ProductCategoryMember"
                in-map="[   productId: productId,
                            productCategoryId: catgs[0].productCategoryId,
                            fromDate: ec.user.nowTimestamp]" />
            <!-- asset count -->
            <if
                condition="product.assetCount != null &amp;&amp; Integer.parseInt(product.assetCount) > 0">
                <set field="newProduct" from="[productId: productId]" />
                <set field="inMap"
                    from="[assetName: 'set by productDialog',
                        quantityOnHand: product.assetCount,
                        product: newProduct,
                        statusId: 'Available']" />
                <service-call name="growerp.100.InventoryServices100.create#Asset"
                    in-map="[asset: inMap, classificationId: classificationId]" />
            </if>
            <!-- product Image -->
            <if condition="product.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: productId,
                        base64: product.image]" />
            </if>
            <!-- return created product -->
            <service-call name="growerp.100.CatalogServices100.get#Products"
                in-map="[productId: productId]" out-map="context" />
            <set field="product" from="products[0]" />
        </actions>
    </service>

    <service verb="update" noun="Product">
        <description> Update an existing Product</description>
        <in-parameters>
            <parameter name="product" required="true" type="Map">
                <parameter name="productId" />
                <parameter name="pseudoId" />
                <parameter name="productTypeId" />
                <parameter name="assetClassId" />
                <parameter name="productName" />
                <parameter name="description" />
                <parameter name="price" />
                <parameter name="listPrice" />
                <parameter name="categories" type="List">
                    <parameter name="category" type="Map">
                        <parameter name="categoryId" />
                        <parameter name="categoryName" />
                    </parameter>
                </parameter>
                <parameter name="useWarehouse" type="Boolean" />
                <parameter name="image" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="product" type="Map" required="true">
                <parameter name="productId" />
                <parameter name="pseudoId" />
                <parameter name="productTypeId" />
                <parameter name="assetClassId" />
                <parameter name="productName" />
                <parameter name="description" />
                <parameter name="price" />
                <parameter name="listPrice" />
                <parameter name="categories" type="List">
                    <parameter name="category" type="Map">
                        <parameter name="categoryId" />
                        <parameter name="categoryName" />
                    </parameter>
                </parameter>
                <parameter name="useWarehouse" type="Boolean" />
                <parameter name="assetCount" />
                <parameter name="image" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find list="prods" entity-name="mantle.product.Product" for-update="true"
                limit="1">
                <econdition field-name="productId" from="product.productId" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!prods">
                <return error="true" message="product ${product.productId} not found!}" />
            </if>
            <set field="oldProduct" from="prods[0]" />
            <!-- require inventory flag -->
            <set field="requireInventory" from="product.useWarehouse == true ? 'Y' : 'N'" />
            <!-- product fields -->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: product.productTypeId]" out-map="prodConvert" />
            <if
                condition=" 
                    (product.pseudoId &amp;&amp; product.pseudoId != oldProduct.pseudoId)
                    || (product.productName &amp;&amp; product.productName != oldProduct.productName)
                    || (product.description &amp;&amp; product.description != oldProduct.description)
                    || (prodConvert.convertedStatusId &amp;&amp;
                        product.productTypeEnumId != prodConvert.convertedStatusId)
                    || (product.useWarehouse &amp;&amp; product.requireInventory != requireInventory)">
                <set field="oldProduct.pseudoId" from="product.pseudoId" />
                <set field="oldProduct.productName" from="product.productName" />
                <set field="oldProduct.description" from="product.description" />
                <set field="oldProduct.productTypeEnumId" from="prodConvert.convertedStatusId" />
                <set field="oldProduct.requireInventory" from="requireInventory" />
                <entity-update value-field="oldProduct" />
            </if>
            <!-- prices -->
            <set field="nowDate" from="ec.user.nowTimestamp" />
            <entity-find-one value-field="pref"
                entity-name="mantle.ledger.config.PartyAcctgPreference">
                <field-map field-name="organizationPartyId" from="companyPartyId" />
            </entity-find-one>
            <set field="priceMap"
                from="[productId: product.productId,
                        priceTypeEnumId: 'PptCurrent',
                        priceUomId: pref.baseCurrencyUomId,
                        price: product.price,
                        quantityUomId: 'OTH_ea',
                        fromDate: nowDate,
                        pricePurposeEnumId: 'PppPurchase']" />

            <!-- current price -->
            <entity-find entity-name="mantle.product.ProductPrice"
                list="productPrices" for-update="true">
                <econdition field-name="productId" from="product.productId" />
                <econdition field-name="priceTypeEnumId" value="PptCurrent" />
                <date-filter />
            </entity-find>
            <if
                condition="(!productPrices &amp;&amp; product.price &amp;&amp; !new BigDecimal(product.price).ZERO) 
                    || (productPrices[0]?.price != product?.price)">
                <set field="productPrice" from="productPrices[0]" />
                <service-call name="create#mantle.product.ProductPrice" in-map="priceMap" />
                <!-- delete old record -->
                <if condition="productPrices">
                    <service-call name="update#mantle.product.ProductPrice"
                        in-map="[productPriceId: productPrices[0].productPriceId,
                                thruDate: nowDate]" />
                </if>
            </if>
            <!-- list price -->
            <entity-find entity-name="mantle.product.ProductPrice"
                list="productPrices" for-update="true">
                <econdition field-name="productId" from="product.productId" />
                <econdition field-name="priceTypeEnumId" value="PptList" />
                <date-filter />
            </entity-find>
            <if
                condition="(!productPrices &amp;&amp; product.listPrice &amp;&amp; !new BigDecimal(product.listPrice).ZERO) 
                    || (productPrices[0]?.price != product?.price)">
                <service-call name="create#mantle.product.ProductPrice"
                    in-map="priceMap + [priceTypeEnumId: 'PptList',price: product.listPrice]" />
                <!-- delete old record -->
                <if condition="productPrices">
                    <service-call name="update#mantle.product.ProductPrice"
                        in-map="[productPriceId: productPrices[0].productPriceId,
                                thruDate: nowDate]" />
                </if>
            </if>

            <!-- get root catg -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="catgs">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
            </entity-find>
            <!-- related categories  delete all and add all with root category -->
            <entity-find entity-name="mantle.product.category.ProductCategoryMember"
                list="categories">
                <econdition field-name="productId" from="product.productId" />
            </entity-find>
            <iterate list="categories" entry="category">
                <service-call name="delete#mantle.product.category.ProductCategoryMember"
                    in-map="[   productId: category.productId,
                                productCategoryId: category.productCategoryId,
                                fromDate: category.fromDate]" />
            </iterate>
            <if condition="product.categories">
                <script>product.categories.add([categoryId: catgs[0].productCategoryId])</script>
                <else>
                    <set field="product.categories"
                        from="[[categoryId: catgs[0].productCategoryId]]" />
                </else>
            </if>
            <iterate list="product.categories" entry="category">
                <service-call name="create#mantle.product.category.ProductCategoryMember"
                    in-map="[   productId: product.productId,
                                productCategoryId: category.categoryId,
                                fromDate: ec.user.nowTimestamp]" />
            </iterate>
            <!-- asset count -->
            <entity-find entity-name="mantle.product.asset.Asset" list="assets" for-update="true">
                <econdition field-name="productId" from="product.productId" />
            </entity-find>
            <if condition="product.assetCount">
                <if condition="assets">
                    <if condition="product.assetCount != assets[0].quantityOnHandTotal.toString()">
                        <set field="assets[0].quantityOnHandTotal" from="product.assetCount" />
                        <entity-update value-field="assets[0]" />
                    </if>
                    <else>
                        <set field="newProduct" from="[productId: product.productId]" />
                        <set field="asset"
                            from="[assetName: 'set by productDialog',
                            quantityOnHand: Integer.parseInt(product.assetCount),
                            product: newProduct,
                            statusId: 'Available']" />
                        <service-call name="growerp.100.InventoryServices100.create#Asset"
                            in-map="[asset: asset]" />
                    </else>
                </if>
            </if>
            <!-- update image -->
            <if condition="product.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: product.productId,
                        base64: product.image]" />
            </if>
            <service-call name="growerp.100.CatalogServices100.get#Products"
                in-map="[productId: product.productId]" out-map="context" />
            <set field="product" from="products[0]" />
        </actions>
    </service>

    <service verb="delete" noun="Product">
        <description> Delete a Product </description>
        <in-parameters>
            <parameter name="product" type="Map" required="true">
                <parameter name="productId" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="product" type="Map">
                <parameter name="productId" />
                <parameter name="productTypeId" />
                <parameter name="assetClassId" />
                <parameter name="productName" />
                <parameter name="description" />
                <parameter name="price" />
                <parameter name="categories" type="List">
                    <parameter name="category" type="Map">
                        <parameter name="categoryId" />
                        <parameter name="categoryName" />
                    </parameter>
                </parameter>
                <parameter name="useWarehouse" type="Boolean" />
                <parameter name="assetCount" />
                <parameter name="image" />
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find list="prods" entity-name="mantle.product.Product" for-update="true"
                limit="1">
                <econdition field-name="productId" from="product.productId" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <set field="prods[0].salesDiscontinuationDate" from="ec.user.nowTimestamp" />
            <entity-update value-field="prods[0]" />
            <service-call name="growerp.100.CatalogServices100.get#Products"
                in-map="[productId: product.productId]" out-map="context" />
            <set field="product" from="products[0]" />
        </actions>
    </service>

    <service verb="get" noun="ProductCategories" authenticate="false">
        <description> get a single or all categories to group products</description>
        <in-parameters>
            <parameter name="companyPartyId" />
            <parameter name="categoryId" />
            <parameter name="start" default-value="0" type="Integer" />
            <parameter name="limit" default-value="20" type="Integer" />
            <parameter name="isForDropDown" type="Boolean" default="false" />
            <parameter name="search" default="null" />
        </in-parameters>
        <out-parameters>
            <parameter name="categories" type="List">
                <parameter name="category" type="Map">
                    <parameter name="categoryId" />
                    <parameter name="categoryName" />
                    <parameter name="description" />
                    <parameter name="image" />
                    <parameter name="nbrOfProducts" />
                    <parameter name="products" type="List">
                        <parameter name="product" type="Map">
                            <parameter name="productId" />
                            <parameter name="productName" />
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId">
                <service-call out-map="context"
                    name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            </if>
            <if condition="!companyPartyId">
                <!-- if not provided and not logged in use the one which was first created -->
                <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                    <order-by field-name="partyId" />
                </entity-find>
                <set field="companyPartyId" from="parties[0].partyId" />
            </if>
            <!-- root category -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!rootList">
                <return error="true"
                    message="Root category not found for ownerPartyId: $ownerPartyId" />
            </if>
            <set field="parentProductCategoryId" from="rootList[0].productCategoryId" />
            <if condition="search != null">
                <set field="search" value="%${search}%" />
            </if>
            <entity-find offset="start" limit="limit" list="groups"
                entity-name="growerp.mobile.party.category.ProductCategoryParentsAndChild">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="parentProductCategoryId"
                    from="parentProductCategoryId" />
                <econdition field-name="productCategoryId"
                    from="categoryId" ignore-if-empty="true" />
                <econditions combine="or">
                    <econdition field-name="productCategoryId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="pseudoId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="categoryName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                    <econdition field-name="description" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true" />
                </econditions>
                <date-filter ignore="categoryId" />
                <order-by field-name="pseudoId" />
            </entity-find>
            <set field="categories" from="[]" />
            <set field="lastItem" from="null" />
            <iterate entry="group" list="groups">
                <if condition="!isForDropDown">
                    <!-- number of products -->
                    <entity-find-count entity-name="mantle.product.category.ProductCategoryMember"
                        count-field="nbrOfProducts">
                        <econdition field-name="productCategoryId" from="group.productCategoryId" />
                        <date-filter />
                    </entity-find-count>
                    <!-- content -->
                    <entity-find entity-name="mantle.product.category.ProductCategoryContent"
                        list="contents">
                        <econdition field-name="productCategoryId" from="group.productCategoryId" />
                        <econdition field-name="categoryContentTypeEnumId"
                            from="categoryId? 'PcctImageMedium' : 'PcctImageThumbNail'" />
                        <date-filter />
                    </entity-find>
                    <if condition="contents">
                        <service-call name="growerp.100.ImageServices100.download#Image"
                            in-map="[contentLocation: contents[0].contentLocation]"
                            out-map="context" />
                        <else>
                            <set field="imageFile" from="null" />
                        </else>
                    </if>
                    <!-- first 10 products -->
                    <entity-find
                        entity-name="growerp.mobile.party.category.ProductCategoryMemberAndProduct"
                        limit="10" list="productList">
                        <econdition field-name="productCategoryId" from="group.productCategoryId" />
                    </entity-find>
                    <set field="products" from="[]" />
                    <iterate list="productList" entry="product">
                        <script>products.add([productName: product.productName,
                            productId: product.productId, pseudoId: product.pseudoId])
                    </script>
                    </iterate>
                    <!-- output -->
                    <set field="groupOut"
                        from="[
                            categoryId: group.productCategoryId,
                            pseudoId: group.pseudoId,
                            categoryName: group.categoryName,
                            description: group.description,
                            nbrOfProducts: nbrOfProducts,
                            products: products,
                            image: imageFile,
                            ]" />
                    <else>
                        <set field="groupOut"
                            from="[
                                categoryId: group.productCategoryId,
                                pseudoId: group.pseudoId,
                                categoryName: group.categoryName,
                                ]" />
                    </else>
                </if>
                <script>categories.add(groupOut)</script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="ProductCategory">
        <description> Create a category to group products by drinks , 
                                            salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" type="Map" required="true">
                <parameter name="pseudoId" />
                <parameter name="categoryName" />
                <parameter name="description" />
                <parameter name="image" />
                <parameter name="products" type="List">
                    <parameter name="product" type="Map">
                        <parameter name="productId" />
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="category" type="Map">
                <parameter name="categoryId" />
                <parameter name="pseudoId" />
                <parameter name="categoryName" />
                <parameter name="description" />
                <parameter name="image" />
                <parameter name="products" type="List">
                    <parameter name="product" type="Map">
                        <parameter name="productId" />
                        <parameter name="productName" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <!-- get root category -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!rootList">
                <return error="true"
                    message="Root category not found for companyId: $companyPartyId" />
            </if>
            <!-- create pseudoId when not provided -->
            <if condition="!category.pseudoId || category.pseudoId == ''">
                <service-call name="growerp.100.GeneralServices100.getNext#PseudoId"
                    in-map="[ownerPartyId: ownerPartyId, seqName: 'category']"
                    out-map="context" />
                <set field="category.pseudoId" from="seqNum" />
            </if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId" />
            <!-- create -->
            <service-call name="create#mantle.product.category.ProductCategory"
                in-map="[categoryName: category.categoryName,
                    pseudoId: category.pseudoId,
                    description: category.description,
                    productCategoryTypeEnumId: 'PctCatalog',
                    ownerPartyId: ownerPartyId]"
                out-map="context" />
            <!-- add to root category -->
            <service-call
                name="create#mantle.product.category.ProductCategoryRollup"
                in-map="[parentProductCategoryId: rootProductCategoryId,
                        productCategoryId: productCategoryId]" />
            <!-- image -->
            <if condition="category.image != null">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category',
                        id: productCategoryId, base64: category.image]" />
            </if>
            <!-- related products -->
            <iterate list="category.products" entry="product">
                <service-call name="create#mantle.product.category.ProductCategoryMember"
                    in-map="[productCategoryId: productCategoryId,
                            productId: product.productId,
                            fromDate: ec.user.nowTimestamp]" />
            </iterate>
            <!-- get added category -->
            <service-call name="growerp.100.CatalogServices100.get#ProductCategories"
                in-map="[categoryId: productCategoryId]" out-map="context" />
            <set field="category" from="categories[0]" />
        </actions>
    </service>

    <service verb="update" noun="ProductCategory">
        <description> Update a category to group products by drinks , salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" type="Map" required="true">
                <parameter name="categoryId" required="true" />
                <parameter name="categoryName" />
                <parameter name="description" />
                <parameter name="image" />
                <parameter name="products" type="List">
                    <parameter name="product" type="Map">
                        <parameter name="productId" />
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="category" type="Map">
                <parameter name="categoryId" />
                <parameter name="categoryName" />
                <parameter name="description" />
                <parameter name="image" />
                <parameter name="products" type="List">
                    <parameter name="product" type="Map">
                        <parameter name="productId" />
                        <parameter name="productName" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find for-update="true" list="productCategories" limit="1"
                entity-name="mantle.product.category.ProductCategory">
                <econdition field-name="productCategoryId" from="category.categoryId" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <if condition="!productCategories">
                <return error="true" message="Category: ${category.categoryId} not found" />
            </if>
            <set field="productCategory" from="productCategories[0]" />
            <if condition="category.categoryName">
                <set field="productCategory.categoryName" from="category.categoryName" />
            </if>
            <if condition="category.description">
                <set field="productCategory.description" from="category.description" />
            </if>
            <if condition="category.preparationAreaId">
                <set field="productCategory.preparationAreaId" from="category.preparationAreaId" />
            </if>
            <entity-update value-field="productCategory" />
            <!-- related products  delete all and add all -->
            <if condition="category.products != null">
                <entity-delete-by-condition
                    entity-name="mantle.product.category.ProductCategoryMember">
                    <econdition field-name="productCategoryId" from="category.categoryId" />
                </entity-delete-by-condition>
                <iterate list="category.products" entry="product">
                    <service-call name="create#mantle.product.category.ProductCategoryMember"
                        in-map="[   productId: product.productId,
                                    productCategoryId: category.categoryId,
                                    fromDate: ec.user.nowTimestamp]" />
                </iterate>
            </if>
            <!-- update image -->
            <if condition="category.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category', id: category.categoryId, base64: category.image]" />
            </if>
            <!-- return category information -->
            <service-call name="growerp.100.CatalogServices100.get#ProductCategories"
                in-map="[categoryId: category.categoryId]" out-map="context" />
            <set field="category" from="categories[0]" />
        </actions>
    </service>

    <service verb="delete" noun="ProductCategory">
        <description> delete a category to group products</description>
        <in-parameters>
            <parameter name="category" type="Map" required="true">
                <parameter name="categoryId" />
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="category" type="Map" required="true">
                <parameter name="categoryId" />
                <parameter name="categoryName" />
                <parameter name="description" />
                <parameter name="image" />
                <parameter name="products" type="List">
                    <parameter name="product" type="Map">
                        <parameter name="productId" />
                        <parameter name="productName" />
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" />
            <entity-find list="productCategories"
                entity-name="mantle.product.category.ProductCategory" limit="1">
                <econdition field-name="productCategoryId" from="category.categoryId" />
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
            </entity-find>
            <set field="productCategory" from="productCategories[0]" />
            <!-- disable category in categoryRollUp entity -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="ownerPartyId" from="ownerPartyId" />
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot" />
            </entity-find>
            <entity-find entity-name="mantle.product.category.ProductCategoryRollup"
                list="rollUpList" for-update="true" limit="1">
                <econdition field-name="productCategoryId" from="category.categoryId" />
                <econdition field-name="parentProductCategoryId"
                    from="rootList[0].productCategoryId" />
                <date-filter />
            </entity-find>
            <if condition="rollUpList">
                <set field="rollUpList[0].thruDate" from="ec.user.nowTimestamp" />
                <entity-update value-field="rollUpList[0]" />
                <else>
                    <return error="true"
                        message="could not find rollup for category: ${category.categoryId}" />
                </else>
            </if>
            <service-call name="growerp.100.CatalogServices100.get#ProductCategories"
                in-map="[categoryId: category.categoryId]" out-map="context" />
            <set field="category" from="categories[0]" />
        </actions>
    </service>

</services>