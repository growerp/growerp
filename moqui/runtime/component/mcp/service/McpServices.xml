<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

  <!-- MCP Server Management Services -->

  <service verb="start" noun="McpServer">
    <description>Start the MCP Server</description>
    <in-parameters>
      <parameter name="port" type="Integer" default="3000" />
      <parameter name="debug" type="Boolean" default="false" />
    </in-parameters>
    <out-parameters>
      <parameter name="serverId" type="String" />
      <parameter name="status" type="String" />
    </out-parameters>
    <actions>
      <set field="serverId" value="mcp-server-${ec.user.userId}-${ec.context.nowTimestamp.time}" />
      <set field="status" value="started" />
      <log level="info" message="MCP Server started with ID: ${serverId} on port ${port}" />
    </actions>
  </service>

  <service verb="stop" noun="McpServer">
    <description>Stop the MCP Server</description>
    <in-parameters>
      <parameter name="serverId" type="String" />
    </in-parameters>
    <out-parameters>
      <parameter name="status" type="String" />
    </out-parameters>
    <actions>
      <set field="status" value="stopped" />
      <log level="info" message="MCP Server stopped: ${serverId}" />
    </actions>
  </service>

  <service verb="handle" noun="McpRequest">
    <description>Handle MCP Protocol Request</description>
    <in-parameters>
      <parameter name="request" type="Map" required="true" />
    </in-parameters>
    <out-parameters>
      <parameter name="response" type="Map" />
    </out-parameters>
    <actions>
      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'execute', method: method]" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <set field="response"
          from="[
          jsonrpc: '2.0',
          id: request.id,
          error: [
            code: -32001,
            message: 'Authorization failed: ' + (authCheck.errorMessage ?: 'Access denied')
          ]
        ]" />
        <return />
      </if>

      <script><![CDATA[
                import com.mcp.McpProtocolHandlerSimple
                
                def handler = new McpProtocolHandlerSimple(ec)
                response = handler.handleRequest(request)
            ]]></script>
    </actions>
  </service>

  <service verb="handle" noun="McpRequestFlexible">
    <description>Handle MCP Protocol Request (flexible format)</description>
    <in-parameters>
      <parameter name="jsonrpc" type="String" />
      <parameter name="method" type="String" />
      <parameter name="params" type="Map" />
      <parameter name="id" type="Object" />
      <parameter name="request" type="Map" />
    </in-parameters>
    <out-parameters>
      <parameter name="jsonrpc" type="String" />
      <parameter name="id" type="Object" />
      <parameter name="result" type="Map" />
      <parameter name="error" type="Map" />
    </out-parameters>
    <actions>
      <!-- Extract method and ID for authorization -->
      <set field="requestMethod" from="request?.method ?: method" />
      <set field="requestId" from="request?.id ?: id" />

      <!-- Handle special login method -->
      <if condition="requestMethod == 'auth/login'">
        <!-- Extract credentials from params -->
        <set field="loginParams" from="request?.params ?: params" />
        <service-call name="McpAuthServices.handle#LoginPrompt"
          in-map="[
            username: loginParams?.username,
            password: loginParams?.password, 
            classificationId: loginParams?.classificationId ?: 'AppSupport',
            requestId: requestId
          ]"
          out-map="loginResult" />

        <!-- Return login response -->
        <set field="jsonrpc" value="2.0" />
        <set field="id" from="requestId" />
        <if condition="loginResult.success">
          <set field="result" from="loginResult.loginResponse.result" />
          <else>
            <set field="error" from="loginResult.loginResponse.error" />
          </else>
        </if>
        <return />
      </if>

      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'execute', method: requestMethod, requestId: requestId]"
        out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <set field="jsonrpc" value="2.0" />
        <set field="id" from="requestId" />

        <!-- Return authentication prompt if available -->
        <if condition="authCheck.authPrompt">
          <set field="error" from="authCheck.authPrompt.error" />
          <else>
            <set field="error"
              from="[
            code: -32001,
            message: 'Authorization failed: ' + (authCheck.errorMessage ?: 'Access denied')
          ]" />
          </else>
        </if>
        <return />
      </if>

      <script><![CDATA[
                import com.mcp.McpProtocolHandlerSimple
                
                def handler = new McpProtocolHandlerSimple(ec)
                
                // Check if we have a wrapped request or direct JSON-RPC
                Map mcpRequest
                if (request != null) {
                    // Wrapped format
                    mcpRequest = request
                } else {
                    // Direct JSON-RPC format
                    mcpRequest = [
                        jsonrpc: jsonrpc,
                        method: method,
                        params: params,
                        id: id
                    ]
                }
                
                def response
                if (mcpRequest.method == "prompts/list") {
                    // Handle prompts/list directly in the service
                    response = [
                        jsonrpc: "2.0",
                        id: mcpRequest.id,
                        result: [prompts: []]
                    ]
                } else if (mcpRequest.method == "tools/list") {
                    // Handle tools/list with proper authorization check
                    def toolsResult = ec.service.sync().name("McpServices.list#Tools").call()
                    if (toolsResult.errorResponse) {
                        // Return the authentication prompt or error response
                        response = toolsResult.errorResponse
                        response.id = mcpRequest.id  // Set the correct request ID
                    } else if (toolsResult.errors) {
                        response = [
                            jsonrpc: "2.0",
                            id: mcpRequest.id,
                            error: [
                                code: -32001,
                                message: toolsResult.errors.join(", ")
                            ]
                        ]
                    } else {
                        response = [
                            jsonrpc: "2.0",
                            id: mcpRequest.id,
                            result: [tools: toolsResult.tools ?: []]
                        ]
                    }
                } else if (mcpRequest.method == "tools/call") {
                    // Handle tools/call with proper authorization check
                    def toolParams = mcpRequest.params ?: [:]
                    def toolResult = ec.service.sync().name("McpServices.execute#McpTool")
                        .parameter("name", toolParams.name)
                        .parameter("arguments", toolParams.arguments ?: [:])
                        .call()
                    
                    if (toolResult.errorResponse) {
                        // Return the authentication prompt or error response
                        response = toolResult.errorResponse
                        response.id = mcpRequest.id  // Set the correct request ID
                    } else if (toolResult.errors) {
                        response = [
                            jsonrpc: "2.0",
                            id: mcpRequest.id,
                            error: [
                                code: -32001,
                                message: toolResult.errors.join(", ")
                            ]
                        ]
                    } else {
                        // Return the tool result content directly
                        response = [
                            jsonrpc: "2.0",
                            id: mcpRequest.id,
                            result: toolResult.result ?: [content: [[type: "text", text: "Tool executed successfully"]]]
                        ]
                    }
                } else {
                    response = handler.handleRequest(mcpRequest)
                }
                
                // Return the response fields directly
                jsonrpc = response.jsonrpc
                id = response.id
                result = response.result
                error = response.error
            ]]></script>
    </actions>
  </service>

  <service verb="list" noun="McpResources">
    <description>List available MCP resources</description>
    <out-parameters>
      <parameter name="resources" type="List" />
    </out-parameters>
    <actions>
      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'read', method: 'resources/list']" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <return error="true" message="${authCheck.errorMessage ?: 'Authorization required'}" />
      </if>

      <script><![CDATA[
                import com.mcp.McpResourceManagerSimple
                
                def resourceManager = new McpResourceManagerSimple(ec)
                def result = resourceManager.listResources()
                resources = result.resources
            ]]></script>
    </actions>
  </service>

  <service verb="read" noun="McpResource">
    <description>Read a specific MCP resource</description>
    <in-parameters>
      <parameter name="uri" type="String" required="true" />
    </in-parameters>
    <out-parameters>
      <parameter name="contents" type="List" />
    </out-parameters>
    <actions>
      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'read', method: 'resources/read']" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <return error="true" message="${authCheck.errorMessage ?: 'Authorization required'}" />
      </if>

      <script><![CDATA[
                import com.mcp.McpResourceManagerSimple
                
                def resourceManager = new McpResourceManagerSimple(ec)
                def result = resourceManager.readResource(uri)
                contents = result.contents
            ]]></script>
    </actions>
  </service>

  <service verb="list" noun="Tools">
    <description>List available MCP tools</description>
    <out-parameters>
      <parameter name="tools" type="List" />
      <parameter name="errorResponse" type="Map" />
    </out-parameters>
    <actions>
      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'read', method: 'tools/list']" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <!-- Return authentication prompt if available, otherwise error -->
        <if condition="authCheck.authPrompt">
          <set field="errorResponse" from="authCheck.authPrompt" />
          <else>
            <set field="errorResponse"
              from="[
            jsonrpc: '2.0',
            id: null,
            error: [
              code: -32001,
              message: authCheck.errorMessage ?: 'Authorization required'
            ]
          ]" />
          </else>
        </if>
        <return error="true" message="Authentication required" />
      </if>

      <script><![CDATA[
                import com.mcp.McpToolManager
                
                def toolManager = new McpToolManager(ec)
                def result = toolManager.listTools([:])
                tools = result.tools
            ]]></script>
    </actions>
  </service>

  <service verb="list" noun="Prompts">
    <description>List available MCP prompts</description>
    <out-parameters>
      <parameter name="prompts" type="List" />
    </out-parameters>
    <actions>
      <!-- Validate authorization -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'read', method: 'prompts/list']" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <return error="true" message="${authCheck.errorMessage ?: 'Authorization required'}" />
      </if>

      <set field="prompts" from="[]" />
    </actions>
  </service>

  <service verb="execute" noun="McpTool">
    <description>Execute an MCP tool</description>
    <in-parameters>
      <parameter name="name" type="String" required="true" />
      <parameter name="arguments" type="Map" />
    </in-parameters>
    <out-parameters>
      <parameter name="result" type="Map" />
      <parameter name="errorResponse" type="Map" />
    </out-parameters>
    <actions>
      <!-- Validate authorization for tool execution -->
      <service-call name="McpAuthServices.check#McpAuthorization"
        in-map="[operation: 'execute', method: 'tools/execute']" out-map="authCheck" />
      <if condition="!authCheck.authorized">
        <!-- Return authentication prompt if available, otherwise error -->
        <if condition="authCheck.authPrompt">
          <set field="errorResponse" from="authCheck.authPrompt" />
          <else>
            <set field="errorResponse"
              from="[
            jsonrpc: '2.0',
            id: null,
            error: [
              code: -32001,
              message: authCheck.errorMessage ?: 'Execution authorization required'
            ]
          ]" />
          </else>
        </if>
        <return error="true" message="Authentication required" />
      </if>

      <script><![CDATA[
                import com.mcp.McpToolManager
                def toolManager = new McpToolManager(ec)
                result = toolManager.callTool([name: name, arguments: arguments ?: [:]])
                
                // Check if the tool returned an authentication error
                if (result.isError && result.isAuthError) {
                    // Create authentication prompt
                    def promptResult = ec.service.sync().name("McpAuthServices.create#AuthPrompt")
                        .parameter("operation", "login")
                        .parameter("reason", "Authentication required for tool execution")
                        .call()
                    errorResponse = promptResult.promptResponse
                }
            ]]></script>
    </actions>
  </service>

  <service verb="get" noun="Health">
    <description>Get MCP server health status</description>
    <out-parameters>
      <parameter name="status" type="String" />
      <parameter name="timestamp" type="Long" />
      <parameter name="version" type="String" />
    </out-parameters>
    <actions>
      <!-- Validate API key but allow basic health check -->
      <service-call name="McpAuthServices.validate#McpApiKey" out-map="authResult" />
      <if condition="!authResult.authenticated">
        <return error="true" message="${authResult.errorMessage ?: 'API key required'}" />
      </if>

      <set field="status" value="healthy" />
      <set field="timestamp" from="java.time.ZonedDateTime.now().toInstant().toEpochMilli()" />
      <set field="version" value="1.0.0" />
    </actions>
  </service>

</services>